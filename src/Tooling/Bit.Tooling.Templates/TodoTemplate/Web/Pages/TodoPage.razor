@page "/todo"
@attribute [Authorize]

@inherits TodoTemplateComponentBase;

<div class="page-container">
    <div class="todo-form-white">
        <div class="search-todo-container">
            <BitSearchBox Class="search-todo-input"
                          Placeholder="Search some todo..."
                          OnChange="SetSearchText"
                          OnClear="() => SetSearchText(String.Empty)"/>
        </div>
        <div class="todo-content">
            <h2 class="todo-title">Todo</h2>
            <div class="add-todo-container">
                <BitTextField @bind-Value="TitleToAdd"
                              OnKeyUp="() => InvokeAsync(CheckAddButtonEnable)"
                              Placeholder="Add a todo"
                              Class="add-todo-input" />

                <BitButton OnClick="() => InvokeAsync(AddTodoItem)"
                           Class="add-todo-button"
                           IsEnabled="IsEnabledAddButton">
                    @if (IsLoadingAddButton)
                    {
                        <BitSpinner Size="BitSpinnerSize.Small"></BitSpinner>
                    }
                    else
                    {
                        <span>Add</span>
                    }
                </BitButton>
            </div>
            <div class="todo-items-container">

                <div class="todo-sort-container">
                    <BitDropDown OnSelectItem="SetSelectedSortName"
                                 Class="sort-todo-dropdown"
                                 Items="SortItemList">
                        <CaretDownFragment>
                            <BitActionButton IconName="BitIconName.Sort">
                                Sort by @SelectedSortName
                            </BitActionButton>
                        </CaretDownFragment>
                    </BitDropDown>
                </div>

                <BitPivot OnLinkClick="SetSelectedPivotName">
                    <BitPivotItem Class="todo-pivot-tab" HeaderText="All"/>
                    <BitPivotItem Class="todo-pivot-tab" HeaderText="Active"/>
                    <BitPivotItem Class="todo-pivot-tab" HeaderText="Completed"/>
                </BitPivot>

                <div class="todo-items">

                    @if (IsLoadingPage)
                    {
                        <BitSpinner Class="todo-list-spinner"></BitSpinner>
                    }
                    else
                    {
                        if (ViewTodoItemList.Count == 0)
                        {
                            <div class="todo-empty">
                                <img src="/images/empty-todo.svg">
                                <BitLabel>No todo yet</BitLabel>
                            </div>
                        }
                        else
                        {
                            <BitBasicList Class="todo-item-list"
                                          Items="ViewTodoItemList"
                                          Virtualize="true">
                                <RowTemplate>
                                    <div class="item">
                                        @if (context.IsInEditMode)
                                        {
                                            <BitTextField @bind-Value="TitleToEdit"
                                                           Class="todo-input"
                                                           OnKeyUp="() => InvokeAsync(() => CheckEditButtonEnable(context.Id))"/>
                                            <div>
                                                <BitButton
                                                    OnClick="() => InvokeAsync(() => EditTodoItem(context))"
                                                    IsEnabled="IsEnabledEditButton">
                                                    @if (IsLoadingEditButton)
                                                    {
                                                        <BitSpinner Size="BitSpinnerSize.Small"></BitSpinner>
                                                    }
                                                    else
                                                    {
                                                        <span>Edit</span>
                                                    }
                                                </BitButton>
                                                <BitButton Class="todo-button"
                                                           ButtonStyle="BitButtonStyle.Standard"
                                                           OnClick="() => InvokeAsync(() => CancelEditMode(context))">Cancel</BitButton>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="todo-info">
                                                <BitCheckbox DefaultIsChecked="context.IsDone"
                                                             OnChange="() => InvokeAsync(() => ToggleTodoItem(context))">
                                                    @context.Title
                                                </BitCheckbox>

                                                <div Class="todo-item-date">
                                                    @context.Date.ToString("MMMM dd , yyyy , dddd")
                                                </div>
                                            </div>
                                            <div class="todo-buttons-container">
                                                <BitIconButton IconName="BitIconName.Edit"
                                                               OnClick="() => InvokeAsync(() => ChangeToEditMode(context))"/>

                                                <BitIconButton IconName="BitIconName.Delete"
                                                               OnClick="() => InvokeAsync(() => DeleteTodoItem(context))"/>
                                            </div>
                                        }
                                    </div>
                                </RowTemplate>
                            </BitBasicList>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>
