<#@ template language="C#" #>
<#@ parameter type="System.Collections.Generic.IList<DtoController>" name="Controllers" #>
<#@ parameter type="Bit.Tooling.Core.Model.BitCodeGeneratorMapping" name="Mapping" #>
<#@ parameter type="System.String" name="BitToolingVersion" #>
<#@ import namespace="Bit.Tooling.Core.Model" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="System.Linq" #>

namespace Simple.OData.Client
{

<# foreach (DtoController controller in Controllers) { #>
	<# if (controller.ModelSymbol.ContainingNamespace.Name == "Auto")
	{ #>
		namespace Auto { [System.CodeDom.Compiler.GeneratedCode("BitCodeGenerator", "<#= BitToolingVersion #>")] public class <#= controller.ModelSymbol.Name #> : Bit.Model.Contracts.IDto { public System.Guid Id { get; set; } } }
	<# } #>
<# } #>

	[System.CodeDom.Compiler.GeneratedCode("BitCodeGenerator", "<#= BitToolingVersion #>")]
    public static class <#= Mapping.Route #>ContextExt
    {
		<# foreach (DtoController controller in Controllers) { #>

			public static IBoundClient<<#= controller.ModelSymbol.ToDisplayString() #>> <#= controller.Name #>(this IODataClient odataClient)
			{
				return odataClient.For<<#= controller.ModelSymbol.ToDisplayString() #>>("<#= controller.Name #>");
			}

			<# foreach (ODataOperation operation in controller.Operations) { #>

                <# if (operation.Kind == ODataOperationKind.Action)
                { #>

				    public static IBoundClient<<#= controller.ModelSymbol.ToDisplayString() #>> <#= operation.Method.Name #>(this <#= string.Join(",", new string[]{ $@"IBoundClient<{controller.ModelSymbol.ToDisplayString()}> {controller.Name.AsCamelCase()}Controller" }.Union(operation.Parameters.Select(parameter =>  $@"{parameter.Type.ToDisplayString()} {parameter.Name}" ))) #>)
				    {
					    return <#= $"{controller.Name.AsCamelCase()}Controller" #>.Action("<#= operation.Method.Name #>").Set(new 
					    { 
						    <#= string.Join(",", operation.Parameters.Select(parameter =>  $"{parameter.Name}" )) #>
					    });
				    }

                <# }
                   else
                   {
                #>

                    public static IBoundClient<<#= operation.GetODataClientFunctionReturnType().ToDisplayString() #>> <#= operation.Method.Name #>(this <#= string.Join(",", new string[]{ $@"IBoundClient<{controller.ModelSymbol.ToDisplayString()}> {controller.Name.AsCamelCase()}Controller" }.Union(operation.Parameters.Select(parameter =>  $@"{parameter.Type.ToDisplayString()} {parameter.Name}" ))) #>)
				    {
                        <# if (operation.GetODataClientFunctionReturnType() == controller.ModelSymbol)
                        { #>
					        return <#= $"{controller.Name.AsCamelCase()}Controller" #>.Function("<#= operation.Method.Name #>").Set(new 
					        { 
						        <#= string.Join(",", operation.Parameters.Select(parameter =>  $"{parameter.Name}" )) #>
					        });
                        <# }
                        else
                        {
                        #>
					        return <#= $"{controller.Name.AsCamelCase()}Controller" #>.Function<<#= operation.GetODataClientFunctionReturnType() #>>("<#= operation.Method.Name #>").Set(new 
					        { 
						        <#= string.Join(",", operation.Parameters.Select(parameter =>  $"{parameter.Name}" )) #>
					        });
                        <# } #>
				    }

                <# } #>

			<# } #>


		<# } #>
    }
}