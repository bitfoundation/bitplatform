@page "/todo-template/hosting-models"
@page "/admin-panel/hosting-models"
@page "/templates/hosting-models"
@inherits AppComponentBase

<PageOutlet Url="templates/hosting-models"
            Title="Hosting models - Templates"
            Description="hosting models of the project templates of the bit platform" />

<div class="page-container">
    <BitTypography Variant="BitTypographyVariant.H3" Gutter>Hosting models (Blazor Mode)</BitTypography>
    <br />
    <BitTypography Variant="BitTypographyVariant.Subtitle1" Gutter>
        <div class="section-card-txt">
            <b>Note</b>: The following doesn't apply to Bit.BlazorWeb. Follow the docs from <a href="templates/settings">Settings page</a>
        </div>
        bit project templates use Blazor for building UI. Blazor is a web framework for building web UI components that uses modern technologies to host different models.
        <br />
        Blazor can be hosted on server-side in ASP.NET Core (Blazor Server), on client-side in the browser on a WebAssembly-based .NET runtime (Blazor WebAssembly, Blazor WASM),
        and in native mobile and desktop apps that render to an embedded Web View control (Blazor Hybrid).
        <br />
        Regardless of the hosting model, the approach and tools used to build Blazor apps are the same and the same Blazor source code can be used for any of the hosting models.
    </BitTypography>
    <br />

    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Blazor Server</BitTypography>
        <div class="section-card-txt">
            With the Blazor Server hosting model, the app is executed on the server from within an ASP.NET Core app. UI updates, event handling,
            and JavaScript calls are handled over a SignalR connection using the WebSockets protocol.
            <br />
            To switch to Blazor server mode:
        </div>
        <div class="section-card-txt">
            1. Change value of <b>@("<BlazorMode>")</b> on <b>src/Directory.build.props</b> file in <b>Solution Items</b> root folder.
        </div>
        <div class="code-box">@("<BlazorMode>BlazorServer</BlazorMode>")</div>

        <div class="section-card-txt">
            2. Set solution on Multi-startup project, by right click on solution name and selecting properties from right-click menu (change the action of the Api, Web projects to start)
        </div>
        <div class="image-container">
            <img class="image small" alt="Multi-startup solution" src="/images/templates/multi-startup.webp" />
        </div>
        <br />
        <div class="section-card-txt">
            3. Make sure the first line in the <b>Client.Web.csproj</b> file contains the following value.
        </div>
        <div class="code-box">@("<Project Sdk=\"Microsoft.NET.Sdk.Web\">")</div>
    </section>

    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Blazor WebAssembly</BitTypography>
        <div class="section-card-txt">
            Blazor WebAssembly (WASM) apps run client-side in the browser on a WebAssembly-based .NET runtime. The Blazor app, its dependencies,
            and the .NET runtime are downloaded to the browser. The app is executed directly on the browser UI thread. UI updates and event handling occur within the same process.
            The app's assets are deployed as static files to a web server or service capable of serving static content to clients.
            <br />
            To switch to Blazor WebAssembly mode:
        </div>
        <div class="section-card-txt">
            1. Change value of <b>@("<BlazorMode>")</b> on <b>src/Directory.build.props</b> file in <b>Solution Items</b> root folder.
        </div>
        <div class="code-box">@("<BlazorMode>BlazorWebAssembly</BlazorMode>")</div>
        <div class="section-card-txt">
            2. Set <b>Api</b> project as the only startup project.
        </div>
        <div class="section-card-txt">
            3. Make sure the first line in the <b>Client.Web.csproj</b> file contains the following value.
        </div>
        <div class="code-box">@("<Project Sdk=\"Microsoft.NET.Sdk.BlazorWebAssembly\">")</div>
        <br />
        <div class="section-card-txt">
            <b>Note</b>: When you run the project, by default the swagger page will open in the launched browser. But you can simply remove the swagger url
            from the address bar to access the app itself.
        </div>
        <div class="section-card-txt">
            <b>Note</b>: The client side (WebAssembly) debugging doesn't work by default, but you can simply enable it by changing the <b>launch profile</b>
            to BlazorWebAssembly as shown in the following image:
            <div class="image-container">
                <img class="image small" alt="Blazor WASM target" src="/images/templates/blazor-wasm-target.webp" />
            </div>
            <b>Note</b>: We encourage you to debug on Blazor Server as much as possible and use Blazor WebAssembly for production.
        </div>
    </section>

    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Blazor Hybrid</BitTypography>
        <div class="section-card-txt">
            Blazor can also be used to build native client apps using a hybrid approach. Hybrid apps are native apps that leverage web technologies for their functionality.
            In a Blazor Hybrid app, Razor components run directly in the native app (not on WebAssembly) along with any other .NET code and render web UI based on HTML and CSS
            to an embedded Web View control through a local interop channel.
            <br />
            Blazor Hybrid is on top of .NET MAUI and has access to all native features of supported platforms (Android, iOS, macOS and Windows)
            <br />
            To switch to Blazor Hybrid mode:
        </div>
        <div class="section-card-txt">
            1. Change value of <b>@("<BlazorMode>")</b> on <b>src/Directory.build.props</b> file in <b>Solution Items</b> root folder.
        </div>
        <div class="code-box">@("<BlazorMode>BlazorHybrid</BlazorMode>")</div>
        <div class="section-card-txt">
            2. Set <b>Client.App</b> as the startup project, choose either Android, IOS, or Windows, then select your Physical device or Emulator as Debug-Target.
        </div>
        <div class="image-container">
            <img class="image small" alt="Debug target" src="/images/templates/debug-target.webp" />
        </div>
        <br />
        <div>
            3. Change <b>ApiServerAddress</b> in <b>Client/Boilerplate.Client.Core/appsettings.json</b> to make sure your Android / iOS device can reach the server.
        </div>
        <br />
        <div>
            4. Set solution on Multi-startup project, by right click on solution name and selecting properties from right-click menu (change the action of the Api, App projects to start)
        </div>
    </section>
</div>

<NavigationButtons Prev="Run" PrevUrl="/templates/run" Next="Deployment type" NextUrl="/templates/deployment-type" />