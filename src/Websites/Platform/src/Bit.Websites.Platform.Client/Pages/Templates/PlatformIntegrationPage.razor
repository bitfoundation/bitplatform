@page "/templates/platform-integration"
@inherits AppComponentBase

<PageOutlet Url="templates/platform-integration"
            Title="Platform integration - Templates"
            Description="use native platform features in project templates" />

<div class="page-container">
    <BitTypography Variant="BitTypographyVariant.H3" Gutter>Platform integration</BitTypography>
    <br />
    <BitTypography Variant="BitTypographyVariant.Subtitle1" Gutter>
        Use native platform features in project templates:
    </BitTypography>
    <br />

    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Overview</BitTypography>
        <div class="section-card-txt">
            In the bit platform, you have the ability to use JavaScript features across all operating systems (except during Prerendering).
            <br />
            Additionally, there's access to Java and Kotlin capabilities in Android, and Swift and Objective-C in iOS and macOS.
            C# .NET itself has good access to Windows OS features.
            <br />
            If you wish to use JavaScript, write the relevant function in app.ts and call it using JSRuntime. There are some examples in the project template, for example, for reading and writing in the cookie.
            <br />
            <b>Note</b>: The rest of the details are not related to BlazorWeb since this template doesn't produce an App output.
        </div>
    </section>

    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>MAUI Essentials sample</BitTypography>
        <div class="section-card-txt">
            Although reading phone contacts in JavaScript is <a href="https://whatwebcando.today/contacts.html" target="_blank">possible</a>, we will look at how to accomplish this in C#.
            <br />
            Suppose we plan to read contacts on Android and iOS and save them on the server. In the Windows and web versions, we'll fetch and display them from the server. We have two options for this:
        </div>

        <div class="section-card-txt">
            If the feature exists in <a href="https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/communication/contacts" target="_blank">Maui Essentials</a>, we're good to go!
            <br />
            You can use its capabilities under #if BlazorHybrid which will work on Android, iOS, Windows, and macOS. You can use it on any of your razor pages and csharp classes.
        </div>

        <pre class="code-box">if (OperatingSystem.IsAndroid() || OperatingSystem.IsIOS())
{
#if BlazorHybrid // MAUI Essentials are available in BlazorHybrid. In order to prevent build errors, use #if compiler directive.
    var contacts = await Contacts.GetAllAsync();
    // use these contacts for UI and also save them to server's database.
#endif
}
else // Windows, Web, macOS, Linux
{
    // get contacts from server using http client and show them in ui.
}</pre>
    </section>

    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Dependency injection sample</BitTypography>
        <div class="section-card-txt">
            Now, what if Maui Essentials doesn't have the needed feature?
            <br />
            You can define an interface in the <b>src\Client\Boilerplate.Client.Core/Services/Contracts</b> and implement it separately in the <b>src/Client/Boilerplate.Client.Maui/Platforms/Android</b> and iOS directories.
            <br />
            Then register it in the <b>src/Client/Boilerplate.Client.Maui/Platforms/Android/Extensions/IServiceCollectionExtensions</b> file for the android and relevant file for the iOS.
            <br />
            You can also have a Windows/Web-specific implementation that simply reads contacts previously saved on the server using an http client.
            <br />
            Then, inject the interface on the relevant razor page, get the list of contacts, and display them.
            <br />
        </div>

        <div class="section-card-txt">
            Sample code:
        </div>

        src\Client\Boilerplate.Client.Core/Services/Contracts
        <pre class="code-box">public class ContactData
{
    public string Name { get;set; }
}

public interface IContactsService
{
    Task&lt;List&lt;ContactData&gt;&gt; GetContactData();
}
        </pre>

        src/Client/Boilerplate.Client.Maui/Platforms/Android/Contracts
        <pre class="code-box">public class AndroidContactsService : IContactsService
{
    public async Task&lt;List&lt;ContactData&gt;&gt; GetContactData()
    {
        // here you've access to all android platform features!

        var uri = ContactsContract.Contacts.ContentUri!;

        string[] projection = {
           ContactsContract.Contacts.InterfaceConsts.Id,
           ContactsContract.Contacts.InterfaceConsts.DisplayName,
           ContactsContract.Contacts.InterfaceConsts.PhotoId,
        };

        // Whenever you need android's context, just use MauiApplication.Current

        var cursor = MauiApplication.Current.ContentResolver!.Query(uri, projection, null, null, null);

        // save contacts to the server's database

        // return contacts
    }
}</pre>
    </section>

    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Native UI (Xaml)</BitTypography>
        <div class="section-card-txt">
            Lastly, you might want to use Xaml Controls, like the well-known MediaElement from the Maui Community Toolkit.
            <br />
            In this case, inject <b>IPubService</b> on your razor page, publish a message, and inject IPubSubService in the constructor of the MainPage class in <b>src/Client/Boilerplate.Client.Maui/MainPage.xaml.cs</b>.
            <br />
            Then subscribe to the relevant key and display your new Xaml page using <b>App.Current.MainPage.PushAsync</b>.
            <br />
            There are a few samples for IPubSubService in the project template.
        </div>
    </section>

    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Advanced scenarios</BitTypography>
        <div class="section-card-txt">
            If needed, for using Kotlin, Swift, Objective-C, or Java libraries, you can utilize <b>.NET MAUI Binding Libraries</b>. This tool helps you have a C# Wrapper for your Kotlin, Java, Swift, Objective-C library, giving you full access.
            <br />
            For further advanced scenarios, you can integrate Blazor content with XAML controls or even display Native controls created in Kotlin or Swift.
            <br />
            There are interesting resources online. For instance, an <a href="https://medium.com/tema.denisoff/how-to-use-swiftui-components-in-maui-f43c54d2173c" target="_blank">article</a> showcases how to display SwiftUI controls in your iOS project.
            <br />
            You can also place a razor page once in the web project and once in the app project with the same route, but different C# codes. The appropriate page will be displayed at runtime!
            <br />
        </div>
    </section>

</div>

<NavigationButtons Prev="DevOps" PrevUrl="/templates/devops" Next="Settings" NextUrl="/templates/settings" />