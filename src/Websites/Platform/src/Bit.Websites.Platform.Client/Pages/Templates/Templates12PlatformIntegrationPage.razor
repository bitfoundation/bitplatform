@page "/templates/platform-integration"
@inherits AppComponentBase

<PageOutlet Url="templates/platform-integration"
            Title="Platform integration - Templates"
            Description="use native platform features in project templates" />

<div class="page-container">
    <BitTypography Variant="BitTypographyVariant.H3" Gutter>Platform integration</BitTypography>
    <br />
    <BitTypography Variant="BitTypographyVariant.Subtitle1" Gutter>
        Use native platform features in project templates:
    </BitTypography>
    <br />

    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Overview</BitTypography>
        <div class="section-card-txt">
            In the bit platform, you have the ability to use JavaScript features across all operating systems (except during Prerendering).
            <br />
            Additionally, there's access to Java and Kotlin capabilities in Android, and Swift and Objective-C in iOS and macOS.
            C# .NET itself has good access to Windows OS features.
            <br />
            If you wish to use JavaScript, write the relevant function in app.ts and call it using JSRuntime. There are some examples in the project template, for example, for reading and writing in the cookie.
        </div>
    </section>

    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Dependency injection sample</BitTypography>
        <div class="section-card-txt">
            Suppose we plan to read contacts on Android and iOS and save and sync them to the server. In the Windows, macOS and web versions, we'll fetch and display them from the server.
            <br />
            <br />
            First define an interface named <i>IContactsService</i> in the src\Client\Boilerplate.Client.Core/Services/Contracts and implement it separately in the following locations:
            <br />
            src/Client/Boilerplate.Client.Maui/Platforms/Android named AndroidContactsService
            <br />
            And
            <br />
            src/Client/Boilerplate.Client.Maui/Platforms/iOS named iOSContactsService
            <br />
            <br />
            Then register them in the following locations:
            <br />
            src/Client/Boilerplate.Client.Maui/Platforms/Android/Extensions/IServiceCollectionExtensions
            <CodeBox>services.AddTransient&lt;IContactsService, AndroidContactsService&gt;();</CodeBox>
            src/Client/Boilerplate.Client.Maui/Platforms/iOS/Extensions/IServiceCollectionExtensions
            <CodeBox>services.AddTransient&lt;IContactsService, iOSContactsService&gt;();</CodeBox>
            In each platform folder you've access to all native platform features!
            <br />
            Implement that interface once more in src\Client\Boilerplate.Client.Core/Services/ that leverages http client to get synced contacts from the server,
            and register that in src/Client/Boilerplate.Client.Core/Extensions/IServiceCollectionExtensions
            <CodeBox>services.TryAddTransient&lt;IContactsService, AndroidContactsService&gt;();</CodeBox>
            Using <b>TryAdd</b>, we're registering that service for all app models, unless one of them registers another implementation with Add instead of TryAdd.
            So Web, Windows and macOS versions of the app are using this shared implementaion that gets synced contacts from the sever, but Android and iOS have their own implementations.
            <br />
        </div>

        <div class="section-card-txt">
            Sample code:
        </div>

        src/Client/Boilerplate.Client.Core/Services/Contracts
        <CodeBox>public class ContactData
{
    public string Name { get;set; }
}

public interface IContactsService
{
    Task&lt;List&lt;ContactData&gt;&gt; GetContactData();
}</CodeBox>

        src/Client/Boilerplate.Client.Maui/Platforms/Android/Contracts
        <CodeBox>public class AndroidContactsService : IContactsService
{
    public async Task&lt;List&lt;ContactData&gt;&gt; GetContactData()
    {
        // here you've access to all android platform features!

        var uri = ContactsContract.Contacts.ContentUri!;

        string[] projection = {
           ContactsContract.Contacts.InterfaceConsts.Id,
           ContactsContract.Contacts.InterfaceConsts.DisplayName,
           ContactsContract.Contacts.InterfaceConsts.PhotoId,
        };

        // Whenever you need android's context, just use MauiApplication.Current

        var cursor = MauiApplication.Current.ContentResolver!.Query(uri, projection, null, null, null);

        // save contacts to the server's database

        // return contacts
    }
}</CodeBox>
    </section>

    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Native UI (Xaml)</BitTypography>
        <div class="section-card-txt">
            Lastly, you might want to use Xaml Controls, like the well-known MediaElement from the Maui Community Toolkit.
            <br />
            In this case, inject <b>IPubService</b> on your razor page, publish a message, and inject IPubSubService in the constructor of the MainPage class in <b>src/Client/Boilerplate.Client.Maui/MainPage.xaml.cs</b>.
            <br />
            Then subscribe to the relevant key and display your new Xaml page using <b>App.Current.MainPage.PushAsync</b>.
        </div>
    </section>

    <section class="section-card">
        <BitTypography Variant="BitTypographyVariant.H5" Gutter>Advanced scenarios</BitTypography>
        <div class="section-card-txt">
            If needed, for using Kotlin, Swift, Objective-C, or Java libraries, you can utilize <b>.NET MAUI Binding Libraries</b>. This tool helps you have a C# Wrapper for your Kotlin, Java, Swift, Objective-C library, giving you full access.
            <br />
            For further advanced scenarios, you can integrate Blazor content with XAML controls or even display Native controls created in Kotlin or Swift.
            <br />
            There are interesting resources online. For instance, an <a href="https://medium.com/tema.denisoff/how-to-use-swiftui-components-in-maui-f43c54d2173c" target="_blank">article</a> showcases how to display SwiftUI controls in your iOS project.
            <br />
            You can also place a razor page once in the web project and once in the app project with the same route, but different C# codes. The appropriate page will be displayed at runtime!
            <br />
        </div>
    </section>

</div>

<NavigationButtons Prev="DevOps" PrevUrl="/templates/devops" Next="Settings" NextUrl="/templates/settings" />