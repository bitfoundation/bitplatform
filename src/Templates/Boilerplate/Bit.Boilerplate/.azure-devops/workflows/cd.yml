trigger:
- main

# https://bitplatform.dev/templates/devops

variables:
  WEB_APP_DEPLOYMENT_TYPE: 'Spa'
  APP_SERVICE_NAME: 'app-service-bp-test'
  AZURE_SUBSCRIPTION: 'bp-test-service-connection' # https://learn.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml#azure-resource-manager-service-connection
  ConnectionStrings.SqlServerConnectionString: $(DB_CONNECTION_STRING)
  AppSettings.IdentitySettings.IdentityCertificatePassword: $(API_IDENTITY_CERTIFICATE_PASSWORD)
  ApiServerAddress: 'https://bp.bitplatform.dev/api/'

jobs:

- job: build_blazor_api_wasm
  displayName: 'build blazor api + web assembly'

  pool:
    vmImage: 'ubuntu-22.04'

  steps:
  - task: UseDotNet@2
    displayName: 'Setup .NET'
    inputs:
      useGlobalJson: true
      workingDirectory: 'src'

  - task: NodeTool@0
    inputs:
      versionSpec: '18.x'
    displayName: 'Install Node.js'

  - task: Bash@3
    displayName: 'Switch to blazor web assembly'
    inputs:
      targetType: 'inline'
      script: sed -i 's/Microsoft.NET.Sdk.Web/Microsoft.NET.Sdk.BlazorWebAssembly/g' src/Client/Web/Boilerplate.Client.Web.csproj

  - task: Bash@3
    displayName: 'Install wasm'
    inputs:
      targetType: 'inline'
      script: |
          'cd src && dotnet workload install wasm-tools wasm-experimental'

  - task: FileTransform@1
    displayName: Update appsettings.json
    inputs:
      fileType: 'json'
      folderPath: './'
      targetFiles: 'src/Client/Core/appsettings.json'

  - task: Bash@3
    displayName: 'Generate CSS/JS files'
    inputs:
      targetType: 'inline'
      script: 'dotnet build src/Client/Core/Boilerplate.Client.Core.csproj -t:BeforeBuildTasks --no-restore'

  - task: Bash@3
    displayName: 'Publish'
    inputs:
      targetType: 'inline'
      script: 'dotnet publish src/Server/Api/Boilerplate.Server.Api.csproj -p:BlazorMode=BlazorWebAssembly -p:WebAppDeploymentType="${{ variables.WEB_APP_DEPLOYMENT_TYPE }}" -p:Configuration=Release --self-contained -r linux-x64 -o api-web'

  - task: PublishPipelineArtifact@1
    displayName: Upload api-web artifact
    inputs:
      targetPath: 'api-web'
      artifact: 'api-web-bundle'
      publishLocation: 'pipeline'

  - task: Bash@3
    displayName: 'Build migrations bundle'
    inputs:
      targetType: 'inline'
      script: 'cd src/Server/Api/ && dotnet tool restore && dotnet ef migrations bundle --self-contained -r linux-x64 --project Boilerplate.Server.Api.csproj'
  
  - task: PublishPipelineArtifact@1
    displayName: Upload ef migrations bundle
    inputs:
      targetPath: 'src/Server/Api/efbundle'
      artifact: 'migrations-bundle'
      publishLocation: 'pipeline'

- job: deploy_blazor_api_wasm
  dependsOn: build_blazor_api_wasm
  displayName: 'deploy blazor api + web assembly'

  pool:
    vmImage: 'ubuntu-22.04'

  steps:

  - task: DownloadPipelineArtifact@2
    displayName: Retrieve api-web bundle
    inputs:
      artifact: 'api-web-bundle'
      path: ./

  - task: DownloadPipelineArtifact@2
    displayName: Retrieve migrations bundle
    inputs:
      artifact: 'migrations-bundle'
      path: ./

  - task: FileTransform@1
    displayName: Update appsettings.json
    inputs:
      fileType: 'json'
      folderPath: './'
      targetFiles: 'appsettings.json'

  - task: DownloadSecureFile@1
    displayName: Download .pfx file
    name: IdentityCertificate
    inputs:
      secureFile: 'IdentityCertificate.pfx'
          
  - script: |
      rm IdentityCertificate.pfx
      cp "$(IdentityCertificate.secureFilePath)" "IdentityCertificate.pfx"
    failOnStderr: true
    displayName: Copy .pfx file

  - task: Bash@3
    displayName: 'Run migrations'
    inputs:
      targetType: 'inline'
      script: |
        chmod +x efbundle
        ./efbundle
        rm efbundle
      failOnStderr: true

  - task: AzureRmWebAppDeployment@4
    displayName: 'Deploy to App Service'
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: '$(AZURE_SUBSCRIPTION)'
      appType: 'webAppLinux'
      WebAppName: '$(APP_SERVICE_NAME)'
      packageForLinux: '.'

- job: build_blazor_hybrid_windows
  displayName: 'build blazor hybrid (windows)'

  pool:
    vmImage: 'windows-2022'

  steps:
  - task: UseDotNet@2
    displayName: 'Setup .NET'
    inputs:
      useGlobalJson: true
      workingDirectory: 'src'

  - task: NodeTool@0
    inputs:
      versionSpec: '18.x'
    displayName: 'Install Node.js'

  - task: FileTransform@1
    displayName: Update appsettings.json
    inputs:
      fileType: 'json'
      folderPath: './'
      targetFiles: 'src/Client/Core/appsettings.json'

  - task: Bash@3
    displayName: 'Install maui'
    inputs:
      targetType: 'inline'
      script: cd src && dotnet workload install maui

  - task: Bash@3
    displayName: 'Generate CSS/JS files'
    inputs:
      targetType: 'inline'
      script: 'dotnet build src/Client/Core/Boilerplate.Client.Core.csproj -t:BeforeBuildTasks --no-restore'

  - task: Bash@3
    displayName: 'Build exe'
    inputs:
      targetType: 'inline'
      script: 'dotnet build src/Client/App/Boilerplate.Client.App.csproj -p:BlazorMode=BlazorHybrid -p:Configuration=Release -p:WindowsPackageType=None -p:SelfContained=true -p:WindowsAppSDKSelfContained=true -p:GenerateAppxPackageOnBuild=false -p:RuntimeIdentifier=win10-x86 -p:UseRidGraph=true -f net8.0-windows10.0.19041.0'

  - task: PublishPipelineArtifact@1
    displayName: Upload artifact
    inputs:
      targetPath: 'src/Client/App/bin/release/net8.0-windows10.0.19041.0/win10-x86'
      artifact: 'win-exe-bundle'
      publishLocation: 'pipeline'

- job: build_blazor_hybrid_android
  displayName: 'build blazor hybrid (android)'

  pool:
    vmImage: 'ubuntu-22.04'

  steps:
  - task: UseDotNet@2
    displayName: 'Setup .NET'
    inputs:
      useGlobalJson: true
      workingDirectory: 'src'

  - task: NodeTool@0
    inputs:
      versionSpec: '18.x'
    displayName: 'Install Node.js'

  - task: Bash@3
    displayName: 'Install maui'
    inputs:
      targetType: 'inline'
      script: cd src && dotnet workload install maui-android

  - task: DownloadSecureFile@1
    displayName: Download Boilerplate keystore file
    name: AndroidKeyStore
    inputs:
      secureFile: 'Boilerplate.keystore'

  - script: |
      cp $(AndroidKeyStore.secureFilePath) src/Client/App/Boilerplate.keystore
    failOnStderr: true
    displayName: Copy keystore to app project folder

  - task: FileTransform@1
    displayName: Update appsettings.json
    inputs:
      fileType: 'json'
      folderPath: './'
      targetFiles: 'src/Client/Core/appsettings.json'
  
  - task: Bash@3
    displayName: 'Generate CSS/JS files'
    inputs:
      targetType: 'inline'
      script: 'dotnet build src/Client/Core/Boilerplate.Client.Core.csproj -t:BeforeBuildTasks --no-restore'

  - task: Bash@3
    displayName: 'Build aab'
    inputs:
      targetType: 'inline'
      script: 'dotnet build src/Client/App/Boilerplate.Client.App.csproj -p:BlazorMode=BlazorHybrid -p:Configuration=Release -p:AndroidPackageFormat=aab -p:AndroidKeyStore=true -p:AndroidSigningKeyStore="Boilerplate.keystore" -p:AndroidSigningKeyAlias=Boilerplate -p:AndroidSigningKeyPass="$(ANDROID_RELEASE_KEYSTORE_PASSWORD)" -p:AndroidSigningStorePass="$(ANDROID_RELEASE_SIGNING_PASSWORD)" -f net8.0-android'

  - task: Bash@3
    displayName: 'Build apk'
    inputs:
      targetType: 'inline'
      script: 'dotnet build src/Client/App/Boilerplate.Client.App.csproj -p:BlazorMode=BlazorHybrid -p:Configuration=Release -p:AndroidKeyStore=true -p:AndroidSigningKeyStore="Boilerplate.keystore" -p:AndroidSigningKeyAlias=Boilerplate -p:AndroidSigningKeyPass="$(ANDROID_RELEASE_KEYSTORE_PASSWORD)" -p:AndroidSigningStorePass="$(ANDROID_RELEASE_SIGNING_PASSWORD)" -f net8.0-android'

  - script: |
      mkdir drop
      cp ./src/Client/App/bin/Release/net8.0-android/*-Signed.* drop/
    failOnStderr: true
    displayName: Copy apk/aab files to drop folder

  - task: PublishPipelineArtifact@1
    displayName: Upload artifact
    inputs:
      targetPath: 'drop/'
      artifact: 'android-bundle'
      publishLocation: 'pipeline'

- job: build_blazor_hybrid_maccatalyst
  displayName: 'build blazor hybrid (maccatalyst)'

  pool:
    vmImage: 'macos-13'

  steps:
  - task: UseDotNet@2
    displayName: 'Setup .NET'
    inputs:
      useGlobalJson: true
      workingDirectory: 'src'

  - task: NodeTool@0
    inputs:
      versionSpec: '18.x'
    displayName: 'Install Node.js'

  - task: FileTransform@1
    displayName: Update appsettings.json
    inputs:
      fileType: 'json'
      folderPath: './'
      targetFiles: 'src/Client/Core/appsettings.json'

  - task: Bash@3
    displayName: 'Install maui'
    inputs:
      targetType: 'inline'
      script: cd src && dotnet workload install maui

  - task: Bash@3
    displayName: 'Generate CSS/JS files'
    inputs:
      targetType: 'inline'
      script: 'dotnet build src/Client/Core/Boilerplate.Client.Core.csproj -t:BeforeBuildTasks --no-restore'

  - task: Bash@3
    displayName: 'Build pkg'
    inputs:
      targetType: 'inline'
      script: 'dotnet build src/Client/App/Boilerplate.Client.App.csproj -p:BlazorMode=BlazorHybrid -p:Configuration=Release -p:CreatePackage=true -f net8.0-maccatalyst'

  - script: |
      mkdir drop
      cp ./src/Client/App/bin/Release/net8.0-maccatalyst/*.pkg drop/
    failOnStderr: true
    displayName: Copy pkg file to drop folder

  - task: PublishPipelineArtifact@1
    displayName: Upload artifact
    inputs:
      targetPath: 'drop/'
      artifact: 'mac-pkg-bundle'
      publishLocation: 'pipeline'