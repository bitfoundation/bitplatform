@inherits AppComponentBase

<section>
    <BitButton Float
               FloatOffset="2rem"
               OnClick="OpenPanel"
               Size="BitSize.Large"
               Class="open-panel-button"
               Color="BitColor.Secondary"
               Variant="BitVariant.Outline"
               FloatPosition="BitPosition.BottomRight"
               IconUrl="@($"_content/Boilerplate.Client.Core/images/icons/ai-icon-{currentTheme?.ToString().ToLower()}.png")" />

    <BitProPanel Modeless
                 ShowCloseButton
                 @bind-IsOpen="isOpen"
                 OnDismiss="WrapHandled(HandleOnDismissPanel)">
        <Header>
            <BitStack Horizontal Alignment="BitAlignment.Center">
                <BitText Typography="BitTypography.H5">AI chat panel</BitText>
                <BitSpacer />
                <BitButton Title="Clear"
                           IconOnly FixedColor
                           Variant="BitVariant.Text"
                           IconName="@BitIconName.Delete"
                           Color="BitColor.SecondaryBackground"
                           OnClick="WrapHandled(ClearChat)" />
            </BitStack>
        </Header>
        <Body>
            <BitStack Class="body">
                <BitStack Grows Style="overflow:auto;padding:1rem">
                    @for (int i = 0; i < chatHistory.Count; i++)
                    {
                        var chat = chatHistory[i];
                        if (chat.Role is ChatHistoryRole.User)
                        {
                            <BitCard Background="BitColorKind.Tertiary" Style="align-self:end">
                                <BitText>@chat.Message</BitText>
                            </BitCard>
                        }
                        else
                        {
                            <BitMarkdownViewer Markdown="@chat.Message" />
                        }
                    }

                    @if (isCommunicating)
                    {
                        @if (string.IsNullOrWhiteSpace(lastAssistantResponse))
                        {
                            <BitEllipsisLoading Size="BitSize.Small" />
                        }
                        else
                        {
                            <BitMarkdownViewer Markdown="@lastAssistantResponse" />
                        }
                    }
                </BitStack>

                @if (chatHistory.Count == 1)
                {
                    <BitStack Alignment=" BitAlignment.Center" Horizontal FitHeight FillContent>
                        <BitButton Variant="BitVariant.Outline" Color="BitColor.SecondaryBackground" FixedColor>Prompt 1</BitButton>
                        <BitButton Variant="BitVariant.Outline" Color="BitColor.SecondaryBackground" FixedColor>Prompt 2</BitButton>
                        <BitButton Variant="BitVariant.Outline" Color="BitColor.SecondaryBackground" FixedColor>Prompt 3</BitButton>
                    </BitStack>
                }

                <BitStack FitHeight Style="position:relative">
                    <BitTextField Rows="1"
                                  Immediate
                                  Multiline
                                  MaxLength="1024"
                                  Style="width:100%"
                                  @ref="textFieldRef"
                                  @bind-Value="@userInput"
                                  Placeholder="@(isCommunicating ? "Thinking..." : "Write a message...")"
                                  OnKeyDown="WrapHandled((KeyboardEventArgs e) => HandleOnUserInputKeyDown(e))"
                                  Styles="@(new() { FieldGroup = "padding:1rem", Input = "min-height:unset" })" />
                    <BitButton Float
                               AutoLoading
                               FloatAbsolute
                               Class="send-message-button"
                               OnClick="WrapHandled(SendMessage)"
                               Title="Send"
                               IsEnabled=@(string.IsNullOrEmpty(userInput) is false)
                               IconName="@(currentDir is BitDir.Rtl ? BitIconName.SendMirrored : BitIconName.Send)" />
                </BitStack>
            </BitStack>
        </Body>
    </BitProPanel>
</section>