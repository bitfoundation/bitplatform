@*+:cnd:noEmit*@
@inherits AppComponentBase

<section>
    <BitButton Float
               Draggable
               FloatOffset="2rem"
               Size="BitSize.Large"
               Class="open-panel-button"
               Color="BitColor.Secondary"
               Variant="BitVariant.Outline"
               OnClick="() => isOpen = true"
               FloatPosition="BitPosition.BottomRight"
               IconUrl="@($"_content/Boilerplate.Client.Core/images/icons/ai-icon-{currentTheme?.ToString().ToLower()}.png")" />

    <BitProPanel Modeless
                 ShowCloseButton
                 @bind-IsOpen="isOpen"
                 OnOpen="WrapHandled(HandleOnOpenPanel)"
                 OnDismiss="WrapHandled(HandleOnDismissPanel)">
        <Header>
            <BitStack Horizontal Alignment="BitAlignment.Center">
                <BitText Typography="BitTypography.H5">@Localizer[nameof(AppStrings.AiChatPanelTitle)]</BitText>
                @if (isLoading)
                {
                    <BitEllipsisLoading Size="BitSize.Small" />
                }
                <BitSpacer />
                <BitButton IconOnly FixedColor
                           Variant="BitVariant.Text"
                           IconName="@BitIconName.Delete"
                           Color="BitColor.SecondaryBackground"
                           OnClick="WrapHandled(ClearChat)"
                           Title="@Localizer[nameof(AppStrings.Clear)]" />
            </BitStack>
        </Header>
        <Body>
            <BitStack Class="body">
                <BitScrollablePane AutoScroll Class="scr-container">
                    <BitStack>
                        @for (int i = 0; i < chatMessages.Count; i++)
                        {
                            var message = chatMessages[i];
                            if (message.Role is AiChatMessageRole.User)
                            {
                                <BitCard Background="BitColorKind.Tertiary" Style="align-self:end;padding:0.5rem 1rem">
                                    <BitText Element="pre">@message.Content</BitText>
                                </BitCard>
                            }
                            else
                            {
                                <BitMarkdownViewer Markdown="@message.Content" />
                                @if (message.Successful is false)
                                {
                                    <BitTag Color="BitColor.Error" Size="BitSize.Small" Style="min-height:18px">
                                        @Localizer[nameof(AppStrings.Canceled)]
                                    </BitTag>
                                }
                            }
                        }

                        @if (isLoading && string.IsNullOrWhiteSpace(lastAssistantMessage.Content))
                        {
                            <BitEllipsisLoading Size="BitSize.Small" />
                        }
                    </BitStack>
                </BitScrollablePane>

                @if (chatMessages.Count == 1)
                {
                    <BitStack Alignment=" BitAlignment.Center" Horizontal FitHeight FillContent>
                        <BitButton FixedColor
                                   Variant="BitVariant.Outline"
                                   Class="default-prompt-button"
                                   Color="BitColor.SecondaryBackground"
                                   OnClick="() => SendPromptMessage(Localizer[nameof(AppStrings.AiChatPanelPromp1)])">
                            @Localizer[nameof(AppStrings.AiChatPanelPromp1)]
                        </BitButton>

                        <BitButton FixedColor
                                   Variant="BitVariant.Outline"
                                   Class="default-prompt-button"
                                   Color="BitColor.SecondaryBackground"
                                   OnClick="() => SendPromptMessage(Localizer[nameof(AppStrings.AiChatPanelPromp2)])">
                            @Localizer[nameof(AppStrings.AiChatPanelPromp2)]
                        </BitButton>

                        @*#if (signalR == true)*@
                        <BitButton FixedColor
                                   Variant="BitVariant.Outline"
                                   Class="default-prompt-button"
                                   Color="BitColor.SecondaryBackground"
                                   OnClick="() => SendPromptMessage(Localizer[nameof(AppStrings.AiChatPanelPromp3)])">
                            @Localizer[nameof(AppStrings.AiChatPanelPromp3)]
                        </BitButton>
                        @*#endif*@
                    </BitStack>
                }

                <BitStack FitHeight Style="position:relative">
                    <BitTextField Rows="1"
                                  Immediate
                                  Multiline
                                  AutoHeight
                                  PreventEnter
                                  MaxLength="1024"
                                  Style="width:100%"
                                  @ref="textFieldRef"
                                  @bind-Value="@userInput"
                                  OnEnter="WrapHandled((KeyboardEventArgs e) => HandleOnUserInputEnter(e))"
                                  Styles="@(new() { FieldGroup = "padding:1rem", Input = "min-height:unset" })"
                                  Placeholder="@(Localizer[isLoading ? nameof(AppStrings.AiChatPanelCommunicatingPlaceholder) : nameof(AppStrings.AiChatPanelPlaceholder)])" />

                    <BitButton Float
                               AutoLoading
                               FloatAbsolute
                               Class="send-message-button"
                               OnClick="WrapHandled(SendMessage)"
                               Title="@Localizer[nameof(AppStrings.Send)]"
                               IsEnabled=@(string.IsNullOrEmpty(userInput) is false)
                               IconName="@(currentDir is BitDir.Rtl ? BitIconName.SendMirrored : BitIconName.Send)" />
                </BitStack>
            </BitStack>
        </Body>
    </BitProPanel>
</section>