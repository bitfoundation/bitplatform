{
    "ConnectionStrings": {
        //#if (aspire == true)
        "Aspire__Comment": "Running Boilerplate.Server.AppHost overrides the following connection strings, but including them here provides two benefits:",
        "Aspire__Comment_1": "Most Aspire resources use Docker, but if team members run Server.Api or Server.Web directly without Docker, these connection strings ensure functionality.",
        "Aspire__Comment_2": "The Boilerplate.Tests project runs Server.Web and Server.Api directly, bypassing Aspire, to allow replacing app's registered service in tests, enhancing the test-writing experience. These connection strings are also used by the integration API and UI tests.",
        //#endif
        //#if (database == "SqlServer")
        "SqlServerConnectionString": "Data Source=(localdb)\\mssqllocaldb; Initial Catalog=BoilerplateDb;Integrated Security=true;Application Name=Boilerplate;TrustServerCertificate=True;",
        //#elif (database == "Sqlite")
        "SqliteConnectionString": "Data Source=App_Data/BoilerplateDb.db;",
        "SqliteConnectionString_Comment": "To debug inside docker, change ConnectionStrings__SqliteConnectionString's value in launchSettings.json",
        //#elif (database == "PostgreSQL")
        "PostgreSQLConnectionString": "User ID=postgres;Password=postgres;Host=localhost;Database=BoilerplateDb;",
        //#elif (database == "MySql")
        "MySqlConnectionString": "Server=localhost;Port=3306;Database=BoilerplateDb;Uid=root;Pwd=123456;",
        //#endif
        //#if (filesStorage == "AzureBlobStorage")
        "AzureBlobStorageConnectionString": "UseDevelopmentStorage=true",
        //#elif (filesStorage == "S3")
        "MinIOS3ConnectionString": "minio.s3://keyId=minioadmin;key=minioadmin;serviceUrl=http://localhost:9000;bucket=attachments",
        //#endif
        "ConnectionStrings_Comment": "The ConnectionStrings section contains database connection strings used by the application."
    },
    //#if (signalR == true)
    "Azure": {
        "SignalR": {
            "ConnectionString": null
        }
    },
    //#endif
    //#if (signalR == true || database == "PostgreSQL" || database == "SqlServer")
    "AI": {
        "OpenAI": {
            "ChatModel": "gpt-4.1-mini",
            "ChatApiKey": null,
            "ChatApiKey_Comment": "Get one at https://github.com/settings/personal-access-tokens/new More info at https://github.com/marketplace/models",
            "ChatEndpoint": "https://models.inference.ai.azure.com",
            "EmbeddingModel": "text-embedding-3-small",
            "EmbeddingApiKey": null,
            "EmbeddingApiKey_Comment": "Get one at https://github.com/settings/personal-access-tokens/new More info at https://github.com/marketplace/models",
            "EmbeddingEndpoint": "https://models.inference.ai.azure.com"
        },
        "AzureOpenAI": {
            "ChatModel": "gpt-4.1-mini",
            "ChatApiKey": null,
            "ChatApiKey_Comment": "Get one at https://portal.azure.com",
            "ChatEndpoint": "https://yourResourceName.openai.azure.com/openai/deployments/yourDeployment",
            "EmbeddingModel": "text-embedding-3-small",
            "EmbeddingApiKey": null,
            "EmbeddingApiKey_Comment": "Get one at https://portal.azure.com",
            "EmbeddingEndpoint": "https://yourResourceName.openai.azure.com/openai/deployments/yourDeployment"
        }
    },
    //#endif
    "Identity": {
        "JwtIssuerSigningKeySecret": "VeryLongJWTIssuerSiginingKeySecretThatIsMoreThan64BytesToEnsureCompatibilityWithHS512Algorithm",
        "Issuer": "Boilerplate",
        "Audience": "Boilerplate",
        "BearerTokenExpiration": "0.00:05:00",
        "BearerTokenExpiration_Comment": "BearerTokenExpiration used as JWT's expiration claim, access token's expires in and cookie's max age. Format: D.HH:mm:ss",
        "RefreshTokenExpiration": "14.00:00:00",
        "EmailTokenLifetime": "0.00:02:00",
        "PhoneNumberTokenLifetime": "0.00:02:00",
        "ResetPasswordTokenLifetime": "0.00:02:00",
        "TwoFactorTokenLifetime": "0.00:02:00",
        "OtpTokenLifetime": "0.00:02:00",
        "MaxPrivilegedSessionsCount": 3,
        "MaxPrivilegedSessionsCount_Comment": "Is the maximum number of concurrent privileged sessions a user can have.",
        "Password": {
            "RequireDigit": "false",
            "RequiredLength": "6",
            "RequireNonAlphanumeric": "false",
            "RequireUppercase": "false",
            "RequireLowercase": "false"
        },
        "SignIn": {
            "RequireConfirmedAccount": true
        }
    },
    "Email": {
        "Host": "LocalFolder",
        "Host_Comment": "Local folder means storing emails as .eml file in App_Data/sent-emails folder (Recommended for testing purposes only) instead of sending them using smtp server.",
        "Port": "587",
        "DefaultFromEmail": "info@Boilerplate.com",
        "UserName": null,
        "Password": null
    },
    "Sms": {
        "FromPhoneNumber": null,
        "TwilioAccountSid": null,
        "TwilioAutoToken": null
    },
    "UserProfileImagesDir": "attachments/profiles/",
    //#if (module == "Admin" || module == "Sales")
    "ProductImagesDir": "attachments/products/",
    //#endif
    //#if (captcha == "reCaptcha")
    "GoogleRecaptchaSecretKey": "6LdMKr4pAAAAANvngWNam_nlHzEDJ2t6SfV6L_DS",
    "GoogleRecaptchaSecretKey_Comment": "Create one at https://console.cloud.google.com/security/recaptcha/create for Web Application Type and use site key in Client.Core",
    //#endif
    //#if (notification == true)
    "AdsPushVapid_Comment": "https://github.com/adessoTurkey-dotNET/AdsPush",
    "AdsPushVapid": {
        "AdsPushVapid_Comment": "Web push's vapid. More info at https://tools.reactpwa.com/vapid",
        "Subject": "mailto:test@bitplatform.dev",
        //#if (api == "Integrated")
        "PublicKey_Comment": "Set public key in Client.Web's appsettings.json",
        //#else
        "PublicKey": "BDSNUvuIISD8NQVByQANEtZ2foKaENIcIGUxsiQs9kDz11fQik8c9WeiMwUHs3iTgNNH4nvXioNQIEsn4OAjTKc",
        //#endif
        "PrivateKey": "dMIR1ICj-lDWYZ-ZYCwXKyC2ShYayYYkEL-oOPnpq9c"
    },
    "AdsPushAPNS": {
        "P8PrivateKey": null,
        "P8PrivateKey_Comment": "p8 certificate string without -----BEGIN PRIVATE KEY----- and -----END PRIVATE KEY----- and replace new lines with space.",
        "P8PrivateKeyId": null,
        "P8PrivateKeyId_Comment": "10-digit p8 certificate id; often part of a downloadable certificate filename",
        "TeamId": null,
        "TeamId_Comment": "10-digit Apple team id shown on the Apple Developer Membership Page",
        "AppBundleIdentifier": null,
        "EnvironmentType": "Development",
        "EnvironmentType_Comment": "Apns Env one of Development or Production"
    },
    "AdsPushFirebase": {
        "AdsPushFirebase_Comment": "Filed names in service_account.json => project_id,private_key_id,private_key,client_email,client_id,client_x509_cert_url",
        "Type": "service_account",
        "AuthUri": "https://accounts.google.com/o/oauth2/auth",
        "TokenUri": "https://oauth2.googleapis.com/token",
        "AuthProviderX509CertUrl": "https://www.googleapis.com/oauth2/v1/certs",
        "ProjectId": null,
        "PrivateKeyId": null,
        "PrivateKey": null,
        "ClientEmail": null,
        "ClientId": null,
        "ClientX509CertUrl": null
    },
    "Hangfire": {
        "UseIsolatedStorage": false,
        "UseIsolatedStorage__Comment": "Useful for testing or in production when managing multiple codebases with a single database."
    },
    //#endif
    "Authentication": {
        "Google": {
            "Comment": "https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/google-logins",
            "ClientId": null,
            "ClientSecret": null
        },
        "GitHub": {
            "Comment": "https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/blob/dev/docs/github.md",
            "ClientId": null,
            "ClientSecret": null
        },
        "Twitter": {
            "Comment": "https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/twitter-logins",
            "ConsumerKey": null,
            "ConsumerSecret": null
        },
        "Apple": {
            "Comment": "https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/blob/dev/docs/sign-in-with-apple.md",
            "ClientId": null,
            "ClientId_Comment": "Your Service Id's Identifier such as com.adminpanel.bitplatform.dev",
            "KeyId": null,
            "TeamId": null
        },
        "Facebook": {
            "Comment": "https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/facebook-logins",
            "AppId": null,
            "AppSecret": null
        },
        "AzureAD": {
            "Instance": "https://login.microsoftonline.com/",
            "TenantId": null,
            "ClientId": null,
            "ClientSecret": null,
            "CallbackPath": "/signin-oidc"
        },
        "AzureAD_Comment": "Azure ADB2C/Azure Entra"
    },
    "AllowedHosts": "*",
    "TrustedOrigins": [],
    "TrustedOrigins_Comment": "Lists the permitted origins for CORS requests, return URLs following social sign-in and email confirmation, etc., along with allowed origins for Web Auth.",
    "ForwardedHeaders": {
        "ForwardedHeaders": "All",
        "ForwardedHeaders_Comment": "These values apply only if your backend is hosted behind a CDN (such as `Cloudflare`).",
        "ForwardedHostHeaderName": "X-Forwarded-Host",
        "ForwardedHostHeaderName_Comment": "For Cloudflare, use X-Host instead of X-Forwarded-Host.",
        "AllowedHosts": [ "" ]
    },
    //#if (cloudflare == true)
    "Cloudflare": {
        "ApiToken": null,
        "ZoneId": null,
        "AdditionalDomains": [],
        "AdditionalDomains_Comment": "The ResponseCacheService clears the cache for the current domain by default. If multiple Cloudflare-hosted domains point to your backend, you will need to purge the cache for each of them individually."
    },
    //#endif
    "ResponseCaching": {
        "EnableOutputCaching": false,
        "EnableCdnEdgeCaching": false
    },
    //#if (api == "Integrated")
    "WebAppRender": {
        "BlazorMode": "BlazorServer",
        "BlazorMode_Comment": "BlazorServer, BlazorWebAssembly and BlazorAuto.",
        "PrerenderEnabled": false,
        "PrerenderEnabled_Comment": "for apps with Prerender enabled, follow the instructions in the Client.Web/wwwroot/service-worker.published.js file"
    },
    "ServerSideHttpClientBaseAddress": null,
    "ServerSideHttpClientBaseAddress_Comment": "Read ServerWebSettings.ServerSideHttpClientBaseAddress comments",
    //#endif
    "SupportedAppVersions": {
        "MinimumSupportedAndroidAppVersion": "1.0.0",
        "MinimumSupportedIosAppVersion": "1.0.0",
        "MinimumSupportedMacOSAppVersion": "1.0.0",
        "MinimumSupportedWindowsAppVersion": "1.0.0",
        "MinimumSupportedWebAppVersion": "1.0.0",
        "SupportedAppVersions__Comment": "Enabling `AutoReload` (Disabled by default) ensure the latest app version is always applied in Web & Windows apps. Refer to `Client.Web/Components/AppBswupProgressBar.razor`, `Client.Web/wwwroot/index.html` and `Client.Windows/appsettings.json` for details."
    },
    "$schema": "https://json.schemastore.org/appsettings.json"
}
