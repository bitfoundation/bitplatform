<?xml version="1.0" encoding="utf-8"?>
<root>
    <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
        <xsd:element name="root" msdata:IsDataSet="true">
            <xsd:complexType>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element name="metadata">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" />
                            </xsd:sequence>
                            <xsd:attribute name="name" use="required" type="xsd:string" />
                            <xsd:attribute name="type" type="xsd:string" />
                            <xsd:attribute name="mimetype" type="xsd:string" />
                            <xsd:attribute ref="xml:space" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="assembly">
                        <xsd:complexType>
                            <xsd:attribute name="alias" type="xsd:string" />
                            <xsd:attribute name="name" type="xsd:string" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="data">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
                            <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
                            <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
                            <xsd:attribute ref="xml:space" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="resheader">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" />
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>2.0</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <!-- .NET Validation messages -->
    <data name="AllowedValuesAttribute_Invalid" xml:space="preserve">
    <value>The {0} field does not equal any of the values specified in AllowedValuesAttribute.</value>
  </data>
    <data name="AssociatedMetadataTypeTypeDescriptor_MetadataTypeContainsUnknownProperties" xml:space="preserve">
    <value>The associated metadata type for type '{0}' contains the following unknown properties or fields: {1}. Please make sure that the names of these members match the names of the properties on the main type.</value>
  </data>
    <data name="AttributeStore_Unknown_Property" xml:space="preserve">
    <value>The type '{0}' does not contain a public property named '{1}'.</value>
  </data>
    <data name="Base64StringAttribute_Invalid" xml:space="preserve">
    <value>The {0} field is not a valid Base64 encoding.</value>
  </data>
    <data name="Common_PropertyNotFound" xml:space="preserve">
    <value>The property {0}.{1} could not be found.</value>
  </data>
    <data name="CompareAttribute_ValidationError" xml:space="preserve">
    <value>'{0}' and '{1}' do not match.</value>
  </data>
    <data name="CompareAttribute_UnknownProperty" xml:space="preserve">
    <value>Could not find a property named {0}.</value>
  </data>
    <data name="CreditCardAttribute_Invalid" xml:space="preserve">
    <value>The {0} field is not a valid credit card number.</value>
  </data>
    <data name="CustomValidationAttribute_Method_Must_Return_ValidationResult" xml:space="preserve">
    <value>The CustomValidationAttribute method '{0}' in type '{1}' must return System.ComponentModel.DataAnnotations.ValidationResult.  Use System.ComponentModel.DataAnnotations.ValidationResult.Success to represent success.</value>
  </data>
    <data name="CustomValidationAttribute_Method_Not_Found" xml:space="preserve">
    <value>The CustomValidationAttribute method '{0}' does not exist in type '{1}' or is not public and static.</value>
  </data>
    <data name="CustomValidationAttribute_Method_Required" xml:space="preserve">
    <value>The CustomValidationAttribute.Method was not specified.</value>
  </data>
    <data name="CustomValidationAttribute_Method_Signature" xml:space="preserve">
    <value>The CustomValidationAttribute method '{0}' in type '{1}' must match the expected signature: public static ValidationResult {0}(object value, ValidationContext context).  The value can be strongly typed.  The ValidationContext parameter is optional.</value>
  </data>
    <data name="CustomValidationAttribute_Type_Conversion_Failed" xml:space="preserve">
    <value>Could not convert the value of type '{0}' to '{1}' as expected by method {2}.{3}.</value>
  </data>
    <data name="CustomValidationAttribute_Type_Must_Be_Public" xml:space="preserve">
    <value>The custom validation type '{0}' must be public.</value>
  </data>
    <data name="CustomValidationAttribute_ValidationError" xml:space="preserve">
    <value>{0} is not valid.</value>
  </data>
    <data name="CustomValidationAttribute_ValidatorType_Required" xml:space="preserve">
    <value>The CustomValidationAttribute.ValidatorType was not specified.</value>
  </data>
    <data name="DataTypeAttribute_EmptyDataTypeString" xml:space="preserve">
    <value>The custom DataType string cannot be null or empty.</value>
  </data>
    <data name="DeniedValuesAttribute_Invalid" xml:space="preserve">
    <value>The {0} field equals one of the values specified in DeniedValuesAttribute.</value>
  </data>
    <data name="DisplayAttribute_PropertyNotSet" xml:space="preserve">
    <value>The {0} property has not been set.  Use the {1} method to get the value.</value>
  </data>
    <data name="EmailAddressAttribute_ValidationError" xml:space="preserve">
    <value>The {0} field is not a valid e-mail address.</value>
  </data>
    <data name="EnumDataTypeAttribute_TypeCannotBeNull" xml:space="preserve">
    <value>The type provided for EnumDataTypeAttribute cannot be null.</value>
  </data>
    <data name="EnumDataTypeAttribute_TypeNeedsToBeAnEnum" xml:space="preserve">
    <value>The type '{0}' needs to represent an enumeration type.</value>
  </data>
    <data name="FileExtensionsAttribute_Invalid" xml:space="preserve">
    <value>The {0} field only accepts files with the following extensions: {1}</value>
  </data>
    <data name="LocalizableString_LocalizationFailed" xml:space="preserve">
    <value>Cannot retrieve property '{0}' because localization failed.  Type '{1}' is not public or does not contain a public static string property with the name '{2}'.</value>
  </data>
    <data name="MaxLengthAttribute_InvalidMaxLength" xml:space="preserve">
    <value>MaxLengthAttribute must have a Length value that is greater than zero. Use MaxLength() without parameters to indicate that the string or array can have the maximum allowable length.</value>
  </data>
    <data name="MaxLengthAttribute_ValidationError" xml:space="preserve">
    <value>The field {0} must be a string or array type with a maximum length of '{1}'.</value>
  </data>
    <data name="MetadataTypeAttribute_TypeCannotBeNull" xml:space="preserve">
    <value>MetadataClassType cannot be null.</value>
  </data>
    <data name="MinLengthAttribute_InvalidMinLength" xml:space="preserve">
    <value>MinLengthAttribute must have a Length value that is zero or greater.</value>
  </data>
    <data name="MinLengthAttribute_ValidationError" xml:space="preserve">
    <value>The field {0} must be a string or array type with a minimum length of '{1}'.</value>
  </data>
    <data name="LengthAttribute_InvalidMinLength" xml:space="preserve">
    <value>LengthAttribute must have a MinimumLength value that is zero or greater.</value>
  </data>
    <data name="LengthAttribute_InvalidMaxLength" xml:space="preserve">
    <value>LengthAttribute must have a MaximumLength value that is greater than or equal to MinimumLength.</value>
  </data>
    <data name="LengthAttribute_ValidationError" xml:space="preserve">
    <value>The field {0} must be a string or collection type with a minimum length of '{1}' and maximum length of '{2}'.</value>
  </data>
    <data name="LengthAttribute_InvalidValueType" xml:space="preserve">
    <value>The field of type {0} must be a string, array or ICollection type.</value>
  </data>
    <data name="PhoneAttribute_Invalid" xml:space="preserve">
    <value>The {0} field is not a valid phone number.</value>
  </data>
    <data name="RangeAttribute_ArbitraryTypeNotIComparable" xml:space="preserve">
    <value>The type {0} must implement {1}.</value>
  </data>
    <data name="RangeAttribute_MinGreaterThanMax" xml:space="preserve">
    <value>The maximum value '{0}' must be greater than or equal to the minimum value '{1}'.</value>
  </data>
    <data name="RangeAttribute_CannotUseExclusiveBoundsWhenTheyAreEqual" xml:space="preserve">
    <value>Cannot use exclusive bounds when the maximum value is equal to the minimum value.</value>
  </data>
    <data name="RangeAttribute_Must_Set_Min_And_Max" xml:space="preserve">
    <value>The minimum and maximum values must be set.</value>
  </data>
    <data name="RangeAttribute_Must_Set_Operand_Type" xml:space="preserve">
    <value>The OperandType must be set when strings are used for minimum and maximum values.</value>
  </data>
    <data name="RangeAttribute_ValidationError" xml:space="preserve">
    <value>The field {0} must be between {1} and {2}.</value>
  </data>
    <data name="RangeAttribute_ValidationError_MinExclusive" xml:space="preserve">
    <value>The field {0} must be between {1} exclusive and {2}.</value>
  </data>
    <data name="RangeAttribute_ValidationError_MaxExclusive" xml:space="preserve">
    <value>The field {0} must be between {1} and {2} exclusive.</value>
  </data>
    <data name="RangeAttribute_ValidationError_MinExclusive_MaxExclusive" xml:space="preserve">
    <value>The field {0} must be between {1} exclusive and {2} exclusive.</value>
  </data>
    <data name="RegexAttribute_ValidationError" xml:space="preserve">
    <value>The field {0} must match the regular expression '{1}'.</value>
  </data>
    <data name="RegularExpressionAttribute_Empty_Pattern" xml:space="preserve">
    <value>The pattern must be set to a valid regular expression.</value>
  </data>
    <data name="RequiredAttribute_ValidationError" xml:space="preserve">
    <value>The {0} field is required.</value>
  </data>
    <data name="StringLengthAttribute_InvalidMaxLength" xml:space="preserve">
    <value>The maximum length must be a nonnegative integer.</value>
  </data>
    <data name="StringLengthAttribute_ValidationError" xml:space="preserve">
    <value>The field {0} must be a string with a maximum length of {1}.</value>
  </data>
    <data name="StringLengthAttribute_ValidationErrorIncludingMinimum" xml:space="preserve">
    <value>The field {0} must be a string with a minimum length of {2} and a maximum length of {1}.</value>
  </data>
    <data name="UIHintImplementation_ControlParameterKeyIsNotAString" xml:space="preserve">
    <value>The key parameter at position {0} with value '{1}' is not a string. Every key control parameter must be a string.</value>
  </data>
    <data name="UIHintImplementation_ControlParameterKeyIsNull" xml:space="preserve">
    <value>The key parameter at position {0} is null. Every key control parameter must be a string.</value>
  </data>
    <data name="UIHintImplementation_ControlParameterKeyOccursMoreThanOnce" xml:space="preserve">
    <value>The key parameter at position {0} with value '{1}' occurs more than once.</value>
  </data>
    <data name="UIHintImplementation_NeedEvenNumberOfControlParameters" xml:space="preserve">
    <value>The number of control parameters must be even.</value>
  </data>
    <data name="UrlAttribute_Invalid" xml:space="preserve">
    <value>The {0} field is not a valid fully-qualified http, https, or ftp URL.</value>
  </data>
    <data name="ValidationAttribute_Cannot_Set_ErrorMessage_And_Resource" xml:space="preserve">
    <value>Either ErrorMessageString or ErrorMessageResourceName must be set, but not both.</value>
  </data>
    <data name="ValidationAttribute_IsValid_NotImplemented" xml:space="preserve">
    <value>IsValid(object value) has not been implemented by this class.  The preferred entry point is GetValidationResult() and classes should override IsValid(object value, ValidationContext context).</value>
  </data>
    <data name="ValidationAttribute_NeedBothResourceTypeAndResourceName" xml:space="preserve">
    <value>Both ErrorMessageResourceType and ErrorMessageResourceName need to be set on this attribute.</value>
  </data>
    <data name="ValidationAttribute_ResourcePropertyNotStringType" xml:space="preserve">
    <value>The property '{0}' on resource type '{1}' is not a string type.</value>
  </data>
    <data name="ValidationAttribute_ResourceTypeDoesNotHaveProperty" xml:space="preserve">
    <value>The resource type '{0}' does not have an accessible static property named '{1}'.</value>
  </data>
    <data name="ValidationAttribute_ValidationError" xml:space="preserve">
    <value>The field {0} is invalid.</value>
  </data>
    <data name="Validator_InstanceMustMatchValidationContextInstance" xml:space="preserve">
    <value>The instance provided must match the ObjectInstance on the ValidationContext supplied.</value>
  </data>
    <data name="Validator_Property_Value_Wrong_Type" xml:space="preserve">
    <value>The value for property '{0}' must be of type '{1}'.</value>
  </data>
    <!-- ASP.NET Core Identity messages -->
    <data name="ConcurrencyFailure" xml:space="preserve">
    <value>Optimistic concurrency failure, object has been modified.</value>
    <comment>Error when optimistic concurrency fails</comment>
  </data>
    <data name="DefaultError" xml:space="preserve">
    <value>An unknown failure has occurred.</value>
    <comment>Default identity result error message</comment>
  </data>
    <data name="DuplicateEmail" xml:space="preserve">
    <value>Email '{0}' is already taken.</value>
    <comment>Error for duplicate emails</comment>
  </data>
    <data name="DuplicateRoleName" xml:space="preserve">
    <value>Role name '{0}' is already taken.</value>
    <comment>Error for duplicate roles</comment>
  </data>
    <data name="DuplicateUserName" xml:space="preserve">
    <value>Username '{0}' is already taken.</value>
    <comment>Error for duplicate user names</comment>
  </data>
    <data name="InvalidEmail" xml:space="preserve">
    <value>Email '{0}' is invalid.</value>
    <comment>Invalid email</comment>
  </data>
    <data name="InvalidManagerType" xml:space="preserve">
    <value>Type {0} must derive from {1}&lt;{2}&gt;.</value>
    <comment>Error when the manager type is not derived correctly</comment>
  </data>
    <data name="InvalidPasswordHasherCompatibilityMode" xml:space="preserve">
    <value>The provided PasswordHasherCompatibilityMode is invalid.</value>
    <comment>Error when the password hasher doesn't understand the format it's being asked to produce.</comment>
  </data>
    <data name="InvalidPasswordHasherIterationCount" xml:space="preserve">
    <value>The iteration count must be a positive integer.</value>
    <comment>Error when the iteration count is &lt; 1.</comment>
  </data>
    <data name="InvalidRoleName" xml:space="preserve">
    <value>Role name '{0}' is invalid.</value>
    <comment>Error for invalid role names</comment>
  </data>
    <data name="InvalidToken" xml:space="preserve">
    <value>Invalid token.</value>
    <comment>Error when a token is not recognized</comment>
  </data>
    <data name="InvalidUserName" xml:space="preserve">
    <value>Username '{0}' is invalid, can only contain letters or digits.</value>
    <comment>User names can only contain letters or digits</comment>
  </data>
    <data name="LoginAlreadyAssociated" xml:space="preserve">
    <value>A user with this login already exists.</value>
    <comment>Error when a login already linked</comment>
  </data>
    <data name="MustCallAddIdentity" xml:space="preserve">
    <value>AddIdentity must be called on the service collection.</value>
    <comment>Error when AddIdentity is not called</comment>
  </data>
    <data name="NoTokenProvider" xml:space="preserve">
    <value>No IUserTwoFactorTokenProvider&lt;{0}&gt; named '{1}' is registered.</value>
    <comment>Error when there is no IUserTwoFactorTokenProvider</comment>
  </data>
    <data name="NullSecurityStamp" xml:space="preserve">
    <value>User security stamp cannot be null.</value>
    <comment>Error when a user's security stamp is null.</comment>
  </data>
    <data name="PasswordMismatch" xml:space="preserve">
    <value>Incorrect password.</value>
    <comment>Error when a password doesn't match</comment>
  </data>
    <data name="PasswordRequiresDigit" xml:space="preserve">
    <value>Passwords must have at least one digit ('0'-'9').</value>
    <comment>Error when passwords do not have a digit</comment>
  </data>
    <data name="PasswordRequiresLower" xml:space="preserve">
    <value>Passwords must have at least one lowercase ('a'-'z').</value>
    <comment>Error when passwords do not have a lowercase letter</comment>
  </data>
    <data name="PasswordRequiresNonAlphanumeric" xml:space="preserve">
    <value>Passwords must have at least one non alphanumeric character.</value>
    <comment>Error when password does not have enough non alphanumeric characters</comment>
  </data>
    <data name="PasswordRequiresUpper" xml:space="preserve">
    <value>Passwords must have at least one uppercase ('A'-'Z').</value>
    <comment>Error when passwords do not have an uppercase letter</comment>
  </data>
    <data name="PasswordTooShort" xml:space="preserve">
    <value>Passwords must be at least {0} characters.</value>
    <comment>Error message for passwords that are too short</comment>
  </data>
    <data name="RoleNotFound" xml:space="preserve">
    <value>Role {0} does not exist.</value>
    <comment>Error when a role does not exist</comment>
  </data>
    <data name="StoreNotIQueryableRoleStore" xml:space="preserve">
    <value>Store does not implement IQueryableRoleStore&lt;TRole&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIQueryableUserStore" xml:space="preserve">
    <value>Store does not implement IQueryableUserStore&lt;TUser&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIRoleClaimStore" xml:space="preserve">
    <value>Store does not implement IRoleClaimStore&lt;TRole&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIUserAuthenticationTokenStore" xml:space="preserve">
    <value>Store does not implement IUserAuthenticationTokenStore&lt;User&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIUserClaimStore" xml:space="preserve">
    <value>Store does not implement IUserClaimStore&lt;TUser&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIUserConfirmationStore" xml:space="preserve">
    <value>Store does not implement IUserConfirmationStore&lt;TUser&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIUserEmailStore" xml:space="preserve">
    <value>Store does not implement IUserEmailStore&lt;TUser&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIUserLockoutStore" xml:space="preserve">
    <value>Store does not implement IUserLockoutStore&lt;TUser&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIUserLoginStore" xml:space="preserve">
    <value>Store does not implement IUserLoginStore&lt;TUser&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIUserPasswordStore" xml:space="preserve">
    <value>Store does not implement IUserPasswordStore&lt;TUser&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIUserPhoneNumberStore" xml:space="preserve">
    <value>Store does not implement IUserPhoneNumberStore&lt;TUser&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIUserRoleStore" xml:space="preserve">
    <value>Store does not implement IUserRoleStore&lt;TUser&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIUserSecurityStampStore" xml:space="preserve">
    <value>Store does not implement IUserSecurityStampStore&lt;TUser&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIUserAuthenticatorKeyStore" xml:space="preserve">
    <value>Store does not implement IUserAuthenticatorKeyStore&lt;User&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="StoreNotIUserTwoFactorStore" xml:space="preserve">
    <value>Store does not implement IUserTwoFactorStore&lt;TUser&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="RecoveryCodeRedemptionFailed" xml:space="preserve">
    <value>Recovery code redemption failed.</value>
    <comment>Error when a recovery code is not redeemed.</comment>
  </data>
    <data name="UserAlreadyHasPassword" xml:space="preserve">
    <value>User already has a password set.</value>
    <comment>Error when AddPasswordAsync called when a user already has a password</comment>
  </data>
    <data name="UserAlreadyInRole" xml:space="preserve">
    <value>User already in role '{0}'.</value>
    <comment>Error when a user is already in a role</comment>
  </data>
    <data name="UserLockedOut" xml:space="preserve">
    <value>User is locked out.</value>
    <comment>Error when a user is locked out</comment>
  </data>
    <data name="UserLockoutNotEnabled" xml:space="preserve">
    <value>Lockout is not enabled for this user.</value>
    <comment>Error when lockout is not enabled</comment>
  </data>
    <data name="UserNameNotFound" xml:space="preserve">
    <value>User {0} does not exist.</value>
    <comment>Error when a user does not exist</comment>
  </data>
    <data name="UserNotInRole" xml:space="preserve">
    <value>User is not in role '{0}'.</value>
    <comment>Error when a user is not in the role</comment>
  </data>
    <data name="StoreNotIUserTwoFactorRecoveryCodeStore" xml:space="preserve">
    <value>Store does not implement IUserTwoFactorRecoveryCodeStore&lt;User&gt;.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="PasswordRequiresUniqueChars" xml:space="preserve">
    <value>Passwords must use at least {0} different characters.</value>
    <comment>Error message for passwords that are based on similar characters</comment>
  </data>
    <data name="NoRoleType" xml:space="preserve">
    <value>No RoleType was specified, try AddRoles&lt;TRole&gt;().</value>
    <comment>Error when the IdentityBuilder.RoleType was not specified</comment>
  </data>
    <data name="StoreNotIProtectedUserStore" xml:space="preserve">
    <value>Store does not implement IProtectedUserStore&lt;TUser&gt; which is required when ProtectPersonalData = true.</value>
    <comment>Error when the store does not implement this interface</comment>
  </data>
    <data name="NoPersonalDataProtector" xml:space="preserve">
    <value>No IPersonalDataProtector service was registered, this is required when ProtectPersonalData = true.</value>
    <comment>Error when there is no IPersonalDataProtector</comment>
  </data>
    <!-- Exceptions -->
    <data name="BadRequestException" xml:space="preserve">
    <value>Invalid request</value>
  </data>
    <data name="ConflicException" xml:space="preserve">
    <value>Request could not be processed because of conflict in the request</value>
  </data>
    <data name="ForbiddenException" xml:space="preserve">
    <value>Access to the requested resource is forbidden</value>
  </data>
    <data name="ResourceValidationException" xml:space="preserve">
    <value>Request data is not valid</value>
  </data>
    <data name="RestException" xml:space="preserve">
    <value>An error occurred while communicating with server</value>
  </data>
    <data name="UnauthorizedException" xml:space="preserve">
    <value>Your request lacks valid authentication credentials</value>
  </data>
    <data name="UnknownException" xml:space="preserve">
    <value>Unknown error has occurred</value>
  </data>
    <data name="UpdateConcurrencyException" xml:space="preserve">
    <value>The record was modified by another user after you got the original data. the operation was canceled.</value>
  </data>
    <data name="KnownException" xml:space="preserve">
    <value>Known error</value>
  </data>
    <data name="ResourceNotFoundException" xml:space="preserve">
    <value>Resource not found</value>
  </data>
    <data name="TooManyRequestsExceptions" xml:space="preserve">
    <value>Too many requests</value>
  </data>
    <data name="ServerConnectionException" xml:space="preserve">
    <value>Unable to connect to server.</value>
  </data>
    <!-- BlazorDual strings -->
    <data name="FileRemoveFailed" xml:space="preserve">
    <value>An error occurred while removing file</value>
  </data>
    <data name="FileUploadFailed" xml:space="preserve">
    <value>An error occurred while uploading file</value>
  </data>
    <data name="ToDoItemCouldNotBeFound" xml:space="preserve">
    <value>To Do item could not be found</value>
  </data>
    <data name="UserImageCouldNotBeFound" xml:space="preserve">
    <value>User image could not be found</value>
  </data>
    <data name="EmailNotConfirmed" xml:space="preserve">
    <value>Email '{0}' is not confirmed.</value>
    <comment>Error when a email is not confirmed by the confirmation link</comment>
  </data>
    <data name="WaitForConfirmationEmailResendDelay" xml:space="preserve">
    <value>You have already requested the confirmation email. Try again in {0}</value>
  </data>
    <data name="WaitForResetPasswordEmailResendDelay" xml:space="preserve">
    <value>You have already requested the reset password email. Try again in {0}</value>
  </data>
    <data name="EmailAlreadyConfirmed" xml:space="preserve">
    <value>Your email is already confirmed.</value>
  </data>
    <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
    <data name="Active" xml:space="preserve">
    <value>Active</value>
  </data>
    <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
    <data name="All" xml:space="preserve">
    <value>All</value>
  </data>
    <data name="Alphabetical" xml:space="preserve">
    <value>Alphabetical</value>
  </data>
    <data name="AlreadyHaveAccountMessage" xml:space="preserve">
    <value>Already have an account?</value>
  </data>
    <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
    <data name="CheckSpamMailMessage" xml:space="preserve">
    <value>Check your Spam/Junk, if you could not find it in the Inbox.</value>
  </data>
    <data name="Completed" xml:space="preserve">
    <value>Completed</value>
  </data>
    <data name="ConfirmEmailMessage" xml:space="preserve">
    <value>We have sent a confirmation link to your email address.
Please confirm your email by clicking on the link.</value>
  </data>
    <data name="ConfirmEmailTitle" xml:space="preserve">
    <value>Confirm Your Email Address</value>
  </data>
    <data name="ConfirmNewPassword" xml:space="preserve">
    <value>Confirm New Password</value>
  </data>
    <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
    <data name="DontHaveAccountMessage" xml:space="preserve">
    <value>Don’t have an account?</value>
  </data>
    <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
    <data name="EditProfileTitle" xml:space="preserve">
    <value>Edit profile</value>
  </data>
    <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
    <data name="EmailConfirmationFailedMessage" xml:space="preserve">
    <value>Email Confirmation Failed!</value>
  </data>
    <data name="EmailConfirmationTitle" xml:space="preserve">
    <value>Email Confirmation</value>
  </data>
    <data name="EmailConfirmedSuccessfullyMessage" xml:space="preserve">
    <value>Email Confirmed Successfully!</value>
  </data>
    <data name="ForgetPasswordMessage" xml:space="preserve">
    <value>Please enter the email address you have been signed up with so we can send a reset password link to your email address.</value>
  </data>
    <data name="ForgetPasswordTitle" xml:space="preserve">
    <value>Forget password</value>
  </data>
    <data name="ForgotPasswordLink" xml:space="preserve">
    <value>Forgot password?</value>
  </data>
    <data name="FullName" xml:space="preserve">
    <value>FullName</value>
  </data>
    <data name="GenderOther" xml:space="preserve">
    <value>Other</value>
  </data>
    <data name="GenderFemale" xml:space="preserve">
    <value>Female</value>
  </data>
    <data name="GenderMale" xml:space="preserve">
    <value>Male</value>
  </data>
    <data name="GitHubRepo" xml:space="preserve">
    <value>GitHub Repo</value>
  </data>
    <data name="InvalidConfirmationLinkMessage" xml:space="preserve">
    <value>Looks like the confirmation link either is invalid or has expired.</value>
  </data>
    <data name="NewPassword" xml:space="preserve">
    <value>New Password</value>
  </data>
    <data name="NoTodos" xml:space="preserve">
    <value>No todos yet</value>
  </data>
    <data name="NotReceivedConfirmationEmailMessage" xml:space="preserve">
    <value>Haven’t you received the confirmation email?</value>
  </data>
    <data name="NotReceivedConfirmationEmailMessage1" xml:space="preserve">
    <value>Haven’t you received the confirmation email?</value>
  </data>
    <data name="Or" xml:space="preserve">
    <value>OR</value>
  </data>
    <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
    <data name="PasswordChangedSuccessfullyMessage" xml:space="preserve">
    <value>Your password changed successfully.</value>
  </data>
    <data name="TermsMessage" xml:space="preserve">
    <value>I agree to the</value>
  </data>
    <data name="TermsTitle" xml:space="preserve">
    <value>Terms</value>
  </data>
    <data name="ProfileUpdatedSuccessfullyMessage" xml:space="preserve">
    <value>Profile updated successfully.</value>
  </data>
    <data name="Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
    <data name="ResendConfirmationLinkMessage" xml:space="preserve">
    <value>The confirmation link has been re-sent to your email address.</value>
  </data>
    <data name="ResendEmail" xml:space="preserve">
    <value>Resend email</value>
  </data>
    <data name="ResetPassword" xml:space="preserve">
    <value>Reset password</value>
  </data>
    <data name="ResetPasswordLinkSentMessage" xml:space="preserve">
    <value>The reset password link has been sent to your email address.</value>
  </data>
    <data name="ResetPasswordTitle" xml:space="preserve">
    <value>Reset password</value>
  </data>
    <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
    <data name="SelectBirthDate" xml:space="preserve">
    <value>Select your birth date</value>
  </data>
    <data name="SignIn" xml:space="preserve">
    <value>Sign in</value>
  </data>
    <data name="SignInTitle" xml:space="preserve">
    <value>Sign in</value>
  </data>
    <data name="SignOut" xml:space="preserve">
    <value>Sign out</value>
  </data>
    <data name="SignUp" xml:space="preserve">
    <value>Sign up</value>
  </data>
    <data name="SingUpTitle" xml:space="preserve">
    <value>Sign up</value>
  </data>
    <data name="SortBy" xml:space="preserve">
    <value>Sort by</value>
  </data>
    <data name="Submit" xml:space="preserve">
    <value>Submit</value>
  </data>
    <data name="TodoAddPlaceholder" xml:space="preserve">
    <value>Add a todo</value>
  </data>
    <data name="TodoSearchPlaceholder" xml:space="preserve">
    <value>Search some todo...</value>
  </data>
    <data name="HomeMessage" xml:space="preserve">
    <value>Create your multi-mode (WASM, Server, Hybrid, pre-rendering) Blazor app easily in the shortest time ever!</value>
  </data>
    <data name="HomeTitle" xml:space="preserve">
    <value>TodoTemplate Home</value>
  </data>
    <data name="TodoTitle" xml:space="preserve">
    <value>Todo</value>
  </data>
    <data name="UploadNewProfileImage" xml:space="preserve">
    <value>Upload a new profile image</value>
  </data>
    <data name="IsTermsAccepted" xml:space="preserve">
    <value>Do you accept terms?</value>
  </data>
    <data name="UserName" xml:space="preserve">
    <value>Username</value>
  </data>
    <data name="YouHaveToAcceptTerms" xml:space="preserve">
    <value>You must agree to our terms.</value>
  </data>
    <data name="GoToToday" xml:space="preserve">
    <value>Go to today</value>
  </data>
    <data name="Gender" xml:space="preserve">
    <value>Gender</value>
  </data>
    <data name="Terms" xml:space="preserve">
    <value>Terms</value>
  </data>
    <data name="SignOutPrompt" xml:space="preserve">
    <value>Are you sure you want to Sign out?</value>
  </data>
    <data name="BirthDate" xml:space="preserve">
    <value>Birthdate</value>
  </data>
    <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
    <data name="ProfileImage" xml:space="preserve">
    <value>Profile Image</value>
  </data>
    <data name="Title" xml:space="preserve">
    <value>Title</value>
  </data>
    <data name="YouNeedToSignIn" xml:space="preserve">
    <value>You must be signed in to continue.</value>
  </data>
    <data name="InvalidUsernameOrPassword" xml:space="preserve">
    <value>Invalid username or password</value>
  </data>
    <data name="DeleteAccount" xml:space="preserve">
    <value>Delete Account</value>
  </data>
    <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
    <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
    <data name="DeleteAccountPrompt" xml:space="preserve">
    <value>Are you sure you want to delete your account?</value>
  </data>
    <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
    <data name="AreYouSureWannaDelete" xml:space="preserve">
    <value>Are you sure you want to delete {0}</value>
  </data>
    <data name="DeleteTodoItem" xml:space="preserve">
    <value>Delete todo item</value>
  </data>
    <data name="PrivacyPolicyAgreementMessage" xml:space="preserve">
    <value>I agree to the </value>
  </data>
    <data name="PrivacyPolicyPageMessage" xml:space="preserve">
    <value>Use this page to detail your site's privacy policy.</value>
  </data>
    <data name="PrivacyPolicySectionMessage" xml:space="preserve">
    <value>Use this section to detail your site's privacy policy.</value>
  </data>
    <data name="PrivacyPolicyTitle" xml:space="preserve">
    <value>Privacy Policy</value>
  </data>
</root>