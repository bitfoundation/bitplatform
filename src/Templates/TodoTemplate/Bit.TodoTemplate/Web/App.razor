@using System.Runtime.InteropServices
<CascadingAuthenticationState>
    <PageTitle>TodoTemplate</PageTitle>
    <LayoutView Layout="@typeof(MainLayout)">
        <Router AppAssembly="@GetType().Assembly"
                AdditionalAssemblies="@lazyLoadedAssemblies"
                OnNavigateAsync="@OnNavigateAsync">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData">
                    <NotAuthorized>
                        <NotAuthorizedComponent />
                    </NotAuthorized>
                    <Authorizing>
                        <LoadingComponent Color="#FFF" />
                    </Authorizing>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <PageNotFound />
            </NotFound>
            <Navigating>
                <LoadingComponent Color="#FFF" />
            </Navigating>
        </Router>
    </LayoutView>
</CascadingAuthenticationState>

@code {
    private List<Assembly> lazyLoadedAssemblies = new();

#if BlazorWebAssembly && !Maui
    [Inject] private Microsoft.AspNetCore.Components.WebAssembly.Services.LazyAssemblyLoader AssemblyLoader { get; set; } = default!;
#endif

    [Inject] private IJSRuntime _jsRuntime { get; set; } = default!;

    // Blazor Server & Pre Rendering use created cultures in UseRequestLocalization middleware
    // Browser, android, windows and iOS have to set culture programmatically.
    private bool _shouldSetCultureInfo =
#if Maui
    true;
#else
    RuntimeInformation.ProcessArchitecture == Architecture.Wasm;
#endif

    private async Task OnNavigateAsync(NavigationContext args)
    {
        if (_shouldSetCultureInfo)
        {
            _shouldSetCultureInfo = false; // This should happen only once
            var preferredCulture = await _jsRuntime.InvokeAsync<string>("window.App.getPreferredCulture", CultureInfoManager.GetCultureData());
            CultureInfoManager.SetCurrentCulture(preferredCulture);
        }

#if BlazorWebAssembly && !Maui
    if (args.Path.Contains("some-lazy-loaded-page") && lazyLoadedAssemblies.Any(asm => asm.GetName().Name == "SomeAssembly") is false)
    {
        var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "SomeAssembly.dll" });
        lazyLoadedAssemblies.AddRange(assemblies);
    }
#endif
    }
}