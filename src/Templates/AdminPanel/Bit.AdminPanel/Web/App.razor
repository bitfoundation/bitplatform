@using System.Reflection
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.Extensions.Logging

<CascadingAuthenticationState>
    <PageTitle>Admin panel</PageTitle>
    <Router AppAssembly="@GetType().Assembly"
            AdditionalAssemblies="@lazyLoadedAssemblies"
            OnNavigateAsync="@OnNavigateAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <RedirectToSignIn />
                </NotAuthorized>
                <Authorizing>
                    <div class="lds-wrapper">
                        <div class="lds-grid"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
                    </div>
                </Authorizing>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <PageNotFound />
            </LayoutView>
        </NotFound>
        <Navigating>
            <LayoutView Layout="@typeof(MainLayout)">
                <NavigatingComponent />
            </LayoutView>
        </Navigating>
    </Router>
</CascadingAuthenticationState>

@code {
    private List<Assembly> lazyLoadedAssemblies = new();

#if BlazorWebAssembly
    [Inject] private Microsoft.AspNetCore.Components.WebAssembly.Services.LazyAssemblyLoader AssemblyLoader { get; set; }
#endif

    private async Task OnNavigateAsync(NavigationContext args)
    {
#if BlazorWebAssembly
        /* To lazy load an assembly based on the current route, follow this:
        1- Add the BlazorWebAssemblyLazyLoad tag to the Web project file like:
        <BlazorWebAssemblyLazyLoad Condition=" '$(BlazorMode)' == 'BlazorWebAssembly' " Include="Sample.dll" />
        2- Add the assembly to the lazyLoadedAssemblies as follows:
        if (args.Path.Contains("sample"))
        {
          var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "Sample.dll" });
          lazyLoadedAssemblies.AddRange(assemblies);
        }
        The rest of the work is already taken care of in the template source code.
        */
#endif
    }
}