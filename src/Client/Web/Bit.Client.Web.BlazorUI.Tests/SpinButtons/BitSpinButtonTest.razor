<CascadingValue Value="Visual">
    <BitSpinButton Min="@Min"
                   Max="@Max"
                   Step="@Step"
                   @bind-Value="@Value"
                   IsEnabled="@IsEnabled"
                   AriaDescription="@AriaDescription"
                   AriaPositionInSet="@AriaPositionInSet"
                   AriaSetSize="@AriaSetSize"
                   AriaValueNow="@AriaValueNow"
                   AriaValueText="@AriaValueText"
                   AriaLabel="@AriaLabel"
                   Suffix="@Suffix"
                   LabelPosition="@LabelPosition"
                   IconName="@IconName"
                   IconAriaLabel="@IconAriaLabel"
                   DecrementButtonIconName="@DecrementButtonIconName"
                   IncrementButtonIconName="@IncrementButtonIconName"
                   DecrementButtonAriaLabel="@DecrementButtonAriaLabel"
                   IncrementButtonAriaLabel="@IncrementButtonAriaLabel"
                   Label="@Label"
                   InputHtmlAttributes="@InputHtmlAttributes"
                   Title="@Title"
                   Precision="@Precision"
                   DefaultValue="@DefaultValue"
                   OnChange="@HandleChange"
                   OnBlur="@HandleBlur"
                   OnFocus="@HandleFocus"
                   OnIncrement="HandleIncrement"
                   OnDecrement="@HandleDecrement">
        <LabelFragment>
            @LabelFragment
        </LabelFragment>
    </BitSpinButton>
</CascadingValue>

@code{
    [Parameter] public Visual Visual { get; set; }
    [Parameter] public BitSpinButtonLabelPosition LabelPosition { get; set; } = BitSpinButtonLabelPosition.Left;
    [Parameter] public string AriaDescription { get; set; }
    [Parameter] public int? AriaPositionInSet { get; set; }
    [Parameter] public int? AriaSetSize { get; set; }
    [Parameter] public double? AriaValueNow { get; set; }
    [Parameter] public string AriaValueText { get; set; }
    [Parameter] public string AriaLabel { get; set; }
    [Parameter] public double Step { get; set; } = 1;
    [Parameter] public double? Min { get; set; }
    [Parameter] public double? Max { get; set; }
    [Parameter] public double Value { get; set; }
    [Parameter] public EventCallback<double> ValueChanged { get; set; }
    [Parameter] public string Suffix { get; set; } = string.Empty;
    [Parameter] public BitIcon? IconName { get; set; }
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public Dictionary<string, object> InputHtmlAttributes { get; set; } = null;
    [Parameter] public string Title { get; set; }
    [Parameter] public int? Precision { get; set; }
    [Parameter] public BitIcon DecrementButtonIconName { get; set; }
    [Parameter] public BitIcon IncrementButtonIconName { get; set; }
    [Parameter] public double DefaultValue { get; set; }
    [Parameter] public string IconAriaLabel { get; set; } = string.Empty;
    [Parameter] public string DecrementButtonAriaLabel { get; set; }
    [Parameter] public string IncrementButtonAriaLabel { get; set; }
    [Parameter] public bool IsEnabled { get; set; } = true;
    [Parameter] public RenderFragment LabelFragment { get; set; }

    public int OnIncrementEventCounter { get; set; } = 0;
    public int OnBlurEventCounter { get; set; } = 0;
    public int OnFocusEventCounter { get; set; } = 0;
    public int OnDecrementEventCounter { get; set; } = 20;
    public double OnChangeEventValue { get; set; } = 0;

    public void HandleChange(double value)
    {
        OnChangeEventValue = value;
    }

    public void HandleBlur(FocusEventArgs args)
    {
        OnBlurEventCounter++;
    }

    public void HandleFocus(FocusEventArgs args)
    {
        OnFocusEventCounter++;
    }

    public void HandleDecrement(BitSpinButtonChangeEventArgs args)
    {
        OnDecrementEventCounter--;
    }

    public void HandleIncrement(BitSpinButtonChangeEventArgs args)
    {
        OnIncrementEventCounter++;
    }
}