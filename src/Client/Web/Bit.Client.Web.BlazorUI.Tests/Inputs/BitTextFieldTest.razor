<CascadingValue Value="Visual">
    <BitTextField MaxLength="MaxLength"
                  IsMultiLine="IsMultiLine"
                  Type="Type"
                  Placeholder="@Placeholder"
                  IsReadonly="IsReadOnly"
                  IsRequired="IsRequired"
                  IsEnabled="IsEnabled"
                  IconName="@IconName"
                  Value="@Value"
                  CanRevealPassword="CanRevealPassword"
                  OnClick="HandleClick"
                  OnChange="HandleChange"
                  OnFocus="HandleFocus"
                  OnFocusIn="HandleFocusIn"
                  OnFocusOut="HandleFocusOut"
                  OnKeyDown="HandleKeyDown"
                  OnKeyUp="HandleKeyUp"
                  AriaLabel="@AriaLabel"
                  Label="@Label">
    </BitTextField>
</CascadingValue>

@code {
    [Parameter] public int MaxLength { get; set; } = -1;
    [Parameter] public string? IconName { get; set; }
    [Parameter] public Visual Visual { get; set; }
    [Parameter] public bool IsMultiLine { get; set; } = false;
    [Parameter] public bool IsEnabled { get; set; }
    [Parameter] public bool IsReadOnly { get; set; }
    [Parameter] public bool IsRequired { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public string Value { get; set; }
    [Parameter] public bool CanRevealPassword { get; set; }
    [Parameter] public TextFieldType Type { get; set; }
    [Parameter] public string AriaLabel { get; set; }
    [Parameter] public string Label { get; set; }

    public void HandleKeyDown(KeyboardEventArgs e)
    {
        KeyDownedValue = e.Key;
    }
    public void HandleKeyUp(KeyboardEventArgs e)
    {
        KeyUpedValue = e.Key;
    }
    public void HandleFocus(FocusEventArgs e)
    {
        FocusedValue++;
    }
    public void HandleFocusIn(FocusEventArgs e)
    {
        FocusedInValue++;
    }
    public void HandleFocusOut(FocusEventArgs e)
    {
        FocusedOutValue++;
    }
    public void HandleChange(ChangeEventArgs e)
    {
        CurrentCount++;
    }
    public void HandleClick(MouseEventArgs e)
    {
        CurrentCount++;
    }
    public int CurrentCount { get; set; }
    public int FocusedValue { get; set; }
    public int FocusedOutValue { get; set; }
    public int FocusedInValue { get; set; }
    public string KeyDownedValue { get; set; }
    public string KeyUpedValue { get; set; }
}
