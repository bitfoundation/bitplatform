@namespace Bit.Client.Web.BlazorUI
@inherits BitComponentBase

<div @ref="RootElement"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value">
    <div @ref="SaturationPickerRef"
         @onmousedown="OnSaturationPickerMouseDown">
        <div></div>
        <div style=@($"background-color: {SaturationPickerBackground.ToRGB().ToCss()}")></div>
        <div style=@($"top: {SaturationPickerThumbPosition?.Top}px; left: {SaturationPickerThumbPosition?.Left}px; background: {MainColor.ToCss(AlphaType is AlphaType.Transparency ? (100 - Alpha)/100: Alpha/100)};")>
        </div>
    </div>

    <div>
        <div>
            <div>
                <input type="range" min="0" max="360" value="@Hue" @oninput="PickMainColor">
            </div>

            <div style=@($"display: {(AlphaType is not AlphaType.None? "block" : "none")};")>
                <div style=@($"background:linear-gradient(to {(AlphaType is AlphaType.Transparency ? "right": "left")},{SaturationPickerBackground.ToRGB().ToCss()} 0%,transparent 100%)")>
                    <input type="range" min="0" max="100" value="@Alpha" @oninput="PickAlphaColor">
                </div>
            </div>
        </div>
        <div style=@($"background: {MainColor.ToCss(AlphaType is AlphaType.Transparency ? (100 - Alpha)/100: Alpha/100)}; display: {(ShowPreview ? "block" : "none")}")>
        </div>

    </div>

    <table>
        <thead>
            <tr>
                <td colspan="2">Hex</td>
                <td>Red</td>
                <td>Green</td>
                <td>Blue</td>
                @if (AlphaType is not AlphaType.None)
                {
                    <td>@AlphaType.ToString()</td>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td colspan="2">
                    <input type="text" maxlength="6" value="@MainColor.ToHex().ColorCode " @oninput="HexCHanged" />
                </td>
                <td>
                    <input type="number" min="0" max="255" value="@MainColor.Red" @oninput="(e) => RGBColorChanged(e.Value.ToString())" @onblur="() => StateHasChanged()" />
                </td>
                <td>
                    <input type="number" min="0" max="255" value="@MainColor.Green" @oninput="(e) => RGBColorChanged(null, e.Value.ToString())" />
                </td>
                <td>
                    <input type="number" min="0" max="255" value="@MainColor.Blue" @oninput="(e) => RGBColorChanged(null,null, e.Value.ToString())" />
                </td>
                @if (AlphaType is not AlphaType.None)
                {
                    <td>
                        <input type="number" min="0" max="100" @bind-value="@Alpha" @bind-value:event="oninput" />
                    </td>
                }
            </tr>
        </tbody>
    </table>
</div>