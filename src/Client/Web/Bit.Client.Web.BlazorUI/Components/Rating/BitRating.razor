@namespace Bit.Client.Web.BlazorUI
@inherits BitInputBase<double>

<div @ref="RootElement"
     @attributes="HtmlAttributes"
     aria-label="@AriaLabel"
     aria-readonly=@(IsReadOnly ? "true" : null)
     class="@ClassBuilder.Value"
     id="@($"Rating{@UniqueId}")"
     role=@(!IsReadOnly ? "radiogroup" : null)
     style="@StyleBuilder.Value">
     
    @for (int item = 1; item <= Max; item++)
    {
        var index = item;
        var percentage = GetPercentageOf(index);

        <button aria-checked="@(index == CurrentValue ? "true" : "false")"
                aria-hidden=@(IsReadOnly ? "true" : null)
                data-is-current="@(index == CurrentValue ? "true" : null)"
                disabled=@(!IsEnabled|| IsReadOnly)
                id="@($"Rating{UniqueId}-star-{index}")"
                role="radio"
                tabindex=@(IsReadOnly ? null : (index == CurrentValue ? "0" : "-1" ))
                type="button"
                @onclick="() => HandleClick(index)">

            <span id="@($"RatingLabel{UniqueId}-{index }"))">@(AriaLabelFormat.HasValue() ? string.Format(AriaLabelFormat!, index , Max) : string.Empty)</span>
            <div>
                <i aria-hidden="true"
                   class="@($" bit-icon bit-icon--{(percentage == 100 ? Icon : UnselectedIcon).GetName()} {(IsEnabled ? "ratingStar-back":"ratingStar-back--disabled"  )}")"></i>

                <i aria-hidden="true"
                   class="@($"bit-icon bit-icon--{(percentage > 0 ? Icon : UnselectedIcon).GetName()} ratingStar-front") "
                   Style=@($"width:{percentage}%;")>
                </i>
            </div>
        </button>
    }
    <input @attributes="InputHtmlAttributes" type="number" min="@(AllowZeroStars ? 0 : 1)" max="@Max" value="@CurrentValueAsString" class="bit-input-hidden" />
</div>
