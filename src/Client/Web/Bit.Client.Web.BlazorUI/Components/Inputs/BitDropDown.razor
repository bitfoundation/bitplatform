@namespace Bit.Client.Web.BlazorUI
@inherits BitComponentBase
<div @ref="RootElement"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value">
    @if (Label.HasValue())
    {
        <label class="bit-drp-lbl" id="@DropdownLabelId">@Label</label>
    }
    else if (LabelFragment != null)
    {
        <label class="bit-drp-lbl" id="@DropdownLabelId">@LabelFragment</label>
    }

    @if (isOpen)
    {
        <div class="bit-drp-overlay"
             @onclick="CloseCallout"></div>
    }

    <div class="bit-drp-wrapper"
         id="@DropDownId"
         tabindex=@(IsEnabled ? 0 : -1)
         role="combobox"
         data-is-focusable="true"
         aria-expanded=@(isOpen ? "true" : "false")
         aria-labelledby="@GetDropdownAriaLabelledby"
         aria-required="@IsRequired"
         aria-disabled="@(IsEnabled is false)"
         aria-haspopup="listbox"
         aria-controls="@(IsOpen ? $"{DropDownId}-list" : null)"
         title="@Title"
         @onclick="HandleClick">
        <span id="@DropDownOptionId"
              aria-live="polite"
              aria-atomic="true"
              aria-invalid="false">
            @if (text.HasValue())
            {
                @text
            }
            else
            {
                @Placeholder
            }
        </span>
        <span>
            <i class="bit-icon" aria-hidden="true"></i>
        </span>
    </div>
    @if (isOpen)
    {
        <div class="bit-drp-items-wrapper"
             id="@($"{DropDownId}-list")"
             tabindex="0"
             role="listbox"
             aria-labelledby="@DropdownLabelId">
            @foreach ((BitDropDownItem item, Int32 index) in Items.Select((item, index) => (item, index)))
            {
                if (item.ItemType == BitDropDownItemType.Header)
                {
                    <div class="@RootElementClass-head-@VisualClassRegistrar()"
                         id="@($"{DropDownId}{item.Text?.ToLower()}Header")">
                        @item.Text
                    </div>
                }
                else if (item.ItemType == BitDropDownItemType.Normal)
                {
                    @if (IsMultiSelect)
                    {
                        <BitCheckbox Class="@(item.IsSelected ? $"{RootElementClass}-slc-{VisualClassRegistrar()}" :"")"
                                     IsChecked="item.IsSelected"
                                     IsEnabled="item.IsEnabled"
                                     OnClick="(e) => HandleItemClick(item)"
                                     id="@($"{DropDownId}-list{index}")"
                                     type="checkbox"
                                     role="option"
                                     data-is-focusable="@(item.IsEnabled ? "true" : "false")"
                                     disabled=@(!item.IsEnabled)
                                     data-index="@index"
                                     aria-disabled="@(!item.IsEnabled)"
                                     aria-selected="@(item.IsSelected ? "true" : "false")"
                                     aria-setsize="@NormalDropDownItems.Count"
                                     aria-posinset="@GetItemPosInSet(item)"
                                     tabindex="@(item.IsEnabled ? 0 : -1)">
                            @item.Text
                        </BitCheckbox>
                    }
                    else
                    {
                        <button Class="@(item.IsSelected ? $"{RootElementClass}-slc-{VisualClassRegistrar()}" :"")"
                                id="@($"{DropDownId}-list{index}")"
                                type="button"
                                role="option"
                                data-is-focusable="@(item.IsEnabled ? "true" : "false")"
                                disabled=@(!item.IsEnabled)
                                data-index="@index"
                                aria-disabled="@(!item.IsEnabled)"
                                aria-selected="@(item.IsSelected ? "true" : "false")"
                                aria-setsize="@NormalDropDownItems.Count"
                                aria-posinset="@GetItemPosInSet(item)"
                                tabindex="@(item.IsEnabled ? 0 : -1)"
                                @onclick="()=> HandleItemClick(item)">
                            @item.Text
                        </button>
                    }
                }
                else if (item.ItemType == BitDropDownItemType.Divider)
                {
                    <div class="@RootElementClass-div-@VisualClassRegistrar()"
                         role="separator">
                    </div>
                }
            }
        </div>
    }
</div>