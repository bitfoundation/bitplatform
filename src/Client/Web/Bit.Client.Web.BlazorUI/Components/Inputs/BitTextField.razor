@namespace Bit.Client.Web.BlazorUI
@inherits BitComponentBase

<div @ref="RootElement"
     @attributes="HtmlAttributes"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value">
    <div>
        <label for="@InputId">
            @Label
        </label>
        <div>
            @if (Prefix is not null)
            {
                <div>
                    <span>@Prefix</span>
                </div>
            }
            @if (IsMultiLine && Type == TextFieldType.Text)
            {
                <textarea id="@InputId"
                          rows="3"
                          disabled=@(!IsEnabled)
                          readonly=@IsReadonly
                          required=@IsRequired
                          placeholder="@Placeholder"
                          maxlength="@MaxLength"
                          aria-label="@AriaLabel"
                          @onclick="@HandleClick"
                          @onfocusin="@HandleFocusIn"
                          @onfocusout="@HandleFocusOut"
                          @onfocus="@HandleFocus"
                          @oninput="@HandleChange"
                          @onkeydown="@HandleKeyDown"
                          @onkeyup="@HandleKeyUp">
            @Value
        </textarea>
            }
            else
            {
                <input id="@InputId"
                       disabled=@(!IsEnabled)
                       readonly=@IsReadonly
                       required=@IsRequired
                       type="@ElementType"
                       value="@Value"
                       placeholder="@Placeholder"
                       maxlength="@MaxLength"
                       aria-label="@AriaLabel"
                       @onclick="@HandleClick"
                       @onfocusin="@HandleFocusIn"
                       @onfocusout="@HandleFocusOut"
                       @onfocus="@HandleFocus"
                       @oninput="@HandleChange"
                       @onkeydown="@HandleKeyDown"
                       @onkeyup="@HandleKeyUp" />
            }

            @if (CanRevealPassword && Type == TextFieldType.Password)
            {
                <span class="clickable" @onclick="TogglePasswordRevealIcon">
                    <i class="bit-icon bit-icon--@(ElementType == TextFieldType.Text ? "Hide" : "RedEye")"></i>
                </span>
            }

            @if (IconName is not null)
            {
                <span>
                    <i class="bit-icon bit-icon--@IconName"></i>
                </span>
            }

            @if (Suffix is not null)
            {
                <div>
                    <span>@Suffix</span>
                </div>
            }

        </div>
    </div>
    <span>
        @if (Description is not null)
        {
            <span>@Description</span>
        }

        @if (ErrorMessage is not null)
        {
            <div role="alert">
                <p>
                    <span>@ErrorMessage</span>
                </p>
            </div>
        }
    </span>
</div>
