@namespace Bit.Client.Web.BlazorUI
@inherits BitComponentBase

<div @ref="RootElement"
     @attributes="HtmlAttributes"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value">
    <div>
        @if (LabelFragment != null)
        {
            <span>@LabelFragment</span>
        }
        else if (Label.HasValue())
        {
            <label for="@InputId">
                @Label
            </label>
        }

        <div>
            @if (Prefix is not null)
            {
                <div>
                    <span>@Prefix</span>
                </div>
            }

            @if (IsMultiline && Type == BitTextFieldType.Text)
            {
                <textarea id="@InputId"
                          rows="@Rows"
                          disabled=@(!IsEnabled)
                          readonly=@IsReadonly
                          required=@IsRequired
                          placeholder="@Placeholder"
                          maxlength="@MaxLength"
                          aria-label="@AriaLabel"
                          aria-labelledby="@(Label.HasValue() ? InputId : null)"
                          aria-invalid="false"
                          @onclick="@HandleClick"
                          @onfocusin="@HandleFocusIn"
                          @onfocusout="@HandleFocusOut"
                          @onfocus="@HandleFocus"
                          @oninput="@HandleChange"
                          @onchange="@HandleChange"
                          @onkeydown="@HandleKeyDown"
                          @onkeyup="@HandleKeyUp">
                    @Value
                </textarea>
            }
            else
            {
                <input id="@InputId"
                       disabled=@(!IsEnabled)
                       readonly=@IsReadonly
                       required=@IsRequired
                       type="@ElementType"
                       value="@Value"
                       placeholder="@Placeholder"
                       maxlength="@MaxLength"
                       aria-label="@AriaLabel"
                       aria-labelledby="@(Label.HasValue() ? InputId : null)"
                       aria-invalid="false"
                       @onclick="@HandleClick"
                       @onfocusin="@HandleFocusIn"
                       @onfocusout="@HandleFocusOut"
                       @onfocus="@HandleFocus"
                       @oninput="@HandleChange"
                       @onchange="@HandleChange"
                       @onkeydown="@HandleKeyDown"
                       @onkeyup="@HandleKeyUp" />
            }

            @if (CanRevealPassword && Type == BitTextFieldType.Password)
            {
                <button class="clickable" @onclick="TogglePasswordRevealIcon" aria-pressed="@(ElementType == BitTextFieldType.Text ? "true" : "false")">
                    <span>
                        <i class="bit-icon bit-icon--@(ElementType == BitTextFieldType.Text ? "Hide" : "RedEye")"></i>
                    </span>
                </button>
            }

            @if (IconName is not null)
            {
                <span>
                    <i class="bit-icon bit-icon--@IconName"></i>
                </span>
            }

            @if (Suffix is not null)
            {
                <div>
                    <span>@Suffix</span>
                </div>
            }

        </div>
    </div>
    @if (Description.HasValue() || DescriptionFragment is not null)
    {
        <span>
            @if (DescriptionFragment is not null)
            {
                @DescriptionFragment
            }
            else if (Description.HasValue())
            {
                <span>@Description</span>
            }
        </span>
    }
</div>