@namespace Bit.Client.Web.BlazorUI
@inherits BitComponentBase
<div @ref="RootElement"
     id="@UniqueId"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value">
    @if (LabelFragment is not null)
    {
        <label class="bit-drp-lbl" id="@DropdownLabelId">@LabelFragment</label>
    }
    else if (Label.HasValue())
    {
        <label class="bit-drp-lbl" id="@DropdownLabelId">@Label</label>
    }

    <div class="bit-drp-overlay"
         id="@DropDownOverlayId"
         @onclick="CloseCallout"></div>

    <div class="bit-drp-wrapper"
         id="@DropDownId"
         tabindex=@(IsEnabled ? 0 : -1)
         role="combobox"
         data-is-focusable="true"
         aria-expanded=@(isOpen ? "true" : "false")
         aria-labelledby="@GetDropdownAriaLabelledby"
         aria-required="@IsRequired"
         aria-disabled="@(IsEnabled is false)"
         aria-haspopup="listbox"
         aria-controls="@(IsOpen ? $"{DropDownId}-list" : null)"
         title="@Title"
         @onclick="HandleClick">
        <span class="bit-drp-wrapper-txt"
              id="@DropDownOptionId"
              aria-live="polite"
              aria-atomic="true"
              aria-invalid="false">
            @if (Text.HasValue())
            {
                @if (TextTemplate is not null)
                {
                    @TextTemplate(this)
                }
                else
                {
                    @Text
                }
            }
            else
            {
                @if (PlaceholderTemplate is not null)
                {
                    @PlaceholderTemplate(this)
                }
                else
                {
                    @Placeholder
                }
            }
        </span>
        <span class="bit-drp-wrapper-ic">
            @if (CaretDownFragment is not null)
            {
                @CaretDownFragment
            }
            else
            {
                <i class="bit-icon" aria-hidden="true"></i>
            }
        </span>
    </div>

    <div class="bit-drp-items-wrapper"
         id="@DropDownCalloutId"
         tabindex="0"
         role="listbox"
         aria-labelledby="@DropdownLabelId">
        @foreach ((BitDropDownItem item, Int32 index) in Items.Select((item, index) => (item, index)))
        {
            if (item.ItemType == BitDropDownItemType.Header)
            {
                <div class="@RootElementClass-head-@VisualClassRegistrar()"
             id="@($"{DropDownId}{item.Text?.ToLower()}Header")">
                    @item.Text
                </div>
            }
            else if (item.ItemType == BitDropDownItemType.Normal)
            {
                @if (IsMultiSelect)
                {
                    <BitCheckbox Class="@(item.IsSelected ? $"{RootElementClass}-slc-{VisualClassRegistrar()}" :"")"
                     Style="@(item.IsHidden ? "display: none" : "")"
                     IsChecked="item.IsSelected"
                     IsEnabled="item.IsEnabled"
                     OnClick="(e) => HandleItemClick(item)"
                     id="@($"{DropDownId}-list{index}")"
                     type="checkbox"
                     role="option"
                     data-is-focusable="@(item.IsEnabled ? "true" : "false")"
                     disabled=@(!item.IsEnabled)
                     data-index="@index"
                     aria-disabled="@(!item.IsEnabled)"
                     aria-selected="@(item.IsSelected ? "true" : "false")"
                     aria-setsize="@NormalDropDownItems.Count"
                     aria-posinset="@GetItemPosInSet(item)"
                     tabindex="@(item.IsEnabled ? 0 : -1)"
                     title="@item.Title"
                     AriaLabel="@item.AriaLabel">
                        @if (ItemTemplate is not null)
                        {
                            @ItemTemplate(item)
                        }
                        else
                        {
                            @item.Text
                        }
                    </BitCheckbox>
                }
                else
                {
                    <button class="@(item.IsSelected ? $"{RootElementClass}-slc-{VisualClassRegistrar()}" :"")"
                style="@(item.IsHidden ? "display: none" : "")"
                id="@($"{DropDownId}-list{index}")"
                type="button"
                role="option"
                data-is-focusable="@(item.IsEnabled ? "true" : "false")"
                disabled=@(!item.IsEnabled)
                data-index="@index"
                aria-disabled="@(!item.IsEnabled)"
                aria-selected="@(item.IsSelected ? "true" : "false")"
                aria-setsize="@NormalDropDownItems.Count"
                aria-posinset="@GetItemPosInSet(item)"
                tabindex="@(item.IsEnabled ? 0 : -1)"
                title="@item.Title"
                aria-label="@item.AriaLabel"
                @onclick="()=> HandleItemClick(item)">
                        @if (ItemTemplate is not null)
                        {
                            @ItemTemplate(item)
                        }
                        else
                        {
                            @item.Text
                        }
                    </button>
                }
            }
            else if (item.ItemType == BitDropDownItemType.Divider)
            {
                <div class="@RootElementClass-div-@VisualClassRegistrar()"
             role="separator">
                </div>
            }
        }
    </div>
</div>