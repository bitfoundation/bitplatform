@namespace Bit.Client.Web.BlazorUI
@inherits BitComponentBase

<nav @ref="RootElement"
     @attributes="HtmlAttributes"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value"
     role="navigation"
     aria-label="@AriaLabel">
    @if (HeaderTemplate is null)
    {
        <div class="bit-nav-grp">
            <div class="bit-nav-grp-content">
                <ul class="bit-nav-list"
                    role="list">
                    @foreach (var navLinkItem in NavLinkItems)
                        if (childTemplate is not null)
                            @childTemplate(navLinkItem)
                </ul>
            </div>
        </div>
    }
    else
    {
        @foreach (var navLink in NavLinkItems)
        {
            <div class="bit-nav-grp">
                @HeaderTemplate(navLink)

                @if (navLink.Links?.Any() ?? false)
                {
                    <div class="bit-nav-grp-content">
                        <ul class="bit-nav-list"
                            role="list">
                            @foreach (var child in navLink.Links)
                                if (childTemplate is not null)
                                    @childTemplate(child)
                        </ul>
                    </div>
                }
            </div>
        }
    }
</nav>

@code{
    public RenderFragment<BitNavLinkItem>? childTemplate { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        childTemplate = (navLinkItem) =>
        (
    @<li class="bit-nav-item"
         role="listitem"
         @key="navLinkItem.Key"
         @onclick="(()=>HandleClick(navLinkItem))">

        <div class="bit-nav-composite-link @(!navLinkItem.IsEnabled ? "bit-nav-disabled-composite-link" : "")"
             name="@navLinkItem.Name">
            @if (navLinkItem.Links?.Any() ?? false)
            {
                <button class="bit-nav-chevron-btn"
                        style="margin-left: @((navLinkItem.Depth * 14).ToString() + "px");"
                        tabindex="0"
                        aria-label="@GetExpandButtonAriaLabel(navLinkItem)"
                        aria-expanded="@(navLinkItem.IsExpanded ? "true" : "false")"
                        @onclick="(() => OnLinkExpand(navLinkItem))">
                    <i class="bit-icon bit-icon--ChevronDown @(navLinkItem.IsExpanded ? "bit-nav-expand-fluent" : "")"
                       aria-hidden="true"></i>
                </button>
            }

            @if (navLinkItem.Url.HasValue())
            {
                <a class="@GetLinkClass(navLinkItem)"
                   style="padding: 0 20px 0 @(((navLinkItem.Depth * 14) + 27).ToString() + "px");"
                   href="@(navLinkItem.IsEnabled ? navLinkItem.Url : null)"
                   target="@navLinkItem.Target"
                   title="@(navLinkItem.Title.HasValue() ? navLinkItem.Title : navLinkItem.Name)"
                   disabled="@(navLinkItem.IsEnabled is false)"
                   aria-label="@navLinkItem.AriaLabel"
                   aria-current="@(navLinkItem.Key == SelectedKey ? AriaCurrentMap[navLinkItem.AriaCurrent] : null)"
                   tabindex="-1"
                   @onclick="(()=>HandleLinkClick(navLinkItem))">

                    <span class="bit-nav-link-txt">
                        @if (navLinkItem.Icon.HasValue())
                        {
                            <i class=@($"bit-icon bit-icon--{navLinkItem.Icon}") aria-hidden="true"></i>
                        }

                        @navLinkItem.Name
                    </span>
                </a>
            }
            else
            {
                if (navLinkItem.ForceAnchor)
                {
                    <a class="@GetLinkClass(navLinkItem)"
                       style="padding: 0 20px 0 @(((navLinkItem.Depth * 14) + 27).ToString() + "px");"
                       href="@(navLinkItem.IsEnabled ? "#" : null)"
                       target="@navLinkItem.Target"
                       disabled="@(navLinkItem.IsEnabled is false)"
                       aria-label="@navLinkItem.AriaLabel"
                       aria-current="@(navLinkItem.Key == SelectedKey ? AriaCurrentMap[navLinkItem.AriaCurrent] : null)"
                       tabindex="-1"
                       title="@(navLinkItem.Title.HasValue() ? navLinkItem.Title : navLinkItem.Name)"
                       @onclick="(() => HandleLinkClick(navLinkItem))">
                        <span class="bit-nav-link-txt">
                            @navLinkItem.Name
                        </span>
                    </a>
                }
                else
                {
                    <button class="@GetLinkClass(navLinkItem)"
                            style="padding: 0 20px 0 @(((navLinkItem.Depth * 14) + 27).ToString() + "px");"
                            title="@(navLinkItem.Title.HasValue() ? navLinkItem.Title : navLinkItem.Name)"
                            disabled="@(navLinkItem.IsEnabled is false)"
                            aria-label="@navLinkItem.AriaLabel"
                            aria-current="@(navLinkItem.Key == SelectedKey ? AriaCurrentMap[navLinkItem.AriaCurrent] : null)"
                            tabindex="-1"
                            @onclick="(() => HandleLinkClick(navLinkItem))">
                        <span class="bit-nav-link-txt">
                            @navLinkItem.Name
                        </span>
                    </button>
                }

            }
        </div>
        @if (navLinkItem.Links.Any() && navLinkItem.IsExpanded)
        {
            <ul class="bit-nav-list"
                role="list">
                @foreach (var childLinkItem in navLinkItem.Links)
                {
                    childLinkItem.Depth = navLinkItem.Depth + 1;
                    if (childTemplate is not null)
                        @childTemplate(childLinkItem)
                    }
            </ul>
        }
    </li>
    );
    }
}
