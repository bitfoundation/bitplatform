@namespace Bit.Client.Web.BlazorUI
@inherits BitComponentBase

<div @ref="RootElement"
     @attributes="HtmlAttributes"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value">
    <div class="bit-txt-wrapper">
        @if (LabelFragment != null)
        {
            <label class="bit-txt-label" id="@LabelId" for="@TextFieldId">
                @LabelFragment
            </label>
        }
        else if (Label.HasValue())
        {
            <label class="bit-txt-label" id="@LabelId" for="@TextFieldId">
                @Label
            </label>
        }

        <div class="bit-txt-field-grp">
            @if (PrefixFragment is not null)
            {
                <span>@PrefixFragment</span>
            }
            else if (Prefix.HasValue())
            {
                <div class="txt-prefix">
                    <span>@Prefix</span>
                </div>
            }

            @if (IsMultiline && Type == BitTextFieldType.Text)
            {
                <textarea id="@TextFieldId"
                      class="txt-field"
                      rows="@Rows"
                      disabled=@(!IsEnabled)
                      readonly=@IsReadonly
                      required=@IsRequired
                      placeholder="@Placeholder"
                      maxlength="@MaxLength"
                      aria-label="@AriaLabel"
                      aria-labelledby="@(Label.HasValue() || LabelFragment is not null ? LabelId : null)"
                      aria-aria-describedby="@(Description.HasValue() || DescriptionFragment is not null ? DescriptionId : null)"
                      aria-invalid="false"
                      @onclick="@HandleClick"
                      @onfocusin="@HandleFocusIn"
                      @onfocusout="@HandleFocusOut"
                      @onfocus="@HandleFocus"
                      @oninput="@HandleChange"
                      @onchange="@HandleChange"
                      @onkeydown="@HandleKeyDown"
                      @onkeyup="@HandleKeyUp">
                    @Value
                                                    </textarea>
            }
            else
            {
                <input id="@TextFieldId"
                   class="txt-field"
                   disabled=@(!IsEnabled)
                   readonly=@IsReadonly
                   required=@IsRequired
                   type="@ElementType"
                   value="@Value"
                   placeholder="@Placeholder"
                   maxlength="@MaxLength"
                   aria-label="@AriaLabel"
                   aria-labelledby="@(Label.HasValue() || LabelFragment is not null ? LabelId : null)"
                   aria-aria-describedby="@(Description.HasValue() || DescriptionFragment is not null ? DescriptionId : null)"
                   aria-invalid="false"
                   @onclick="@HandleClick"
                   @onfocusin="@HandleFocusIn"
                   @onfocusout="@HandleFocusOut"
                   @onfocus="@HandleFocus"
                   @oninput="@HandleChange"
                   @onchange="@HandleChange"
                   @onkeydown="@HandleKeyDown"
                   @onkeyup="@HandleKeyUp" />
            }

            @if (CanRevealPassword && Type == BitTextFieldType.Password)
            {
                <button class="password-reveal-btn"
                    type="button"
                    aria-label="@RevealPasswordAriaLabel"
                    @onclick="TogglePasswordRevealIcon"
                    aria-pressed="@(ElementType == BitTextFieldType.Text ? "true" : "false")">
                    <span>
                        <i class="bit-icon bit-icon--@(ElementType == BitTextFieldType.Text ? "Hide" : "RedEye")"
                       aria-hidden="true"></i>
                    </span>
                </button>
            }

            @if (IconName.HasValue)
            {
                <i class="bit-icon bit-icon--@IconName.GetName()" aria-hidden="true"></i>
            }

            @if (SuffixFragment is not null)
            {
                <span>@SuffixFragment</span>
            }
            else if (Suffix.HasValue())
            {
                <div class="txt-suffix">
                    <span>@Suffix</span>
                </div>
            }

        </div>
    </div>
    @if (Description.HasValue() || DescriptionFragment is not null)
    {
        <span class="txt-desc" id="@DescriptionId">
            @if (DescriptionFragment is not null)
            {
                <span>@DescriptionFragment</span>
            }
            else if (Description.HasValue())
            {
                <span>@Description</span>
            }
        </span>
    }
</div>