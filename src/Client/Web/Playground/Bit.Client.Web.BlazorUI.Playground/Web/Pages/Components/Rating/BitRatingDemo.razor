@page "/components/rating"

@using Bit.Client.Web.BlazorUI.Playground.Web.Components

<ComponentPage ComponentName="Rating" OverviewDesc="Ratings show people’s opinions of a product, helping others make more informed purchasing decisions. People can also rate products they’ve purchased."
               ComponentParameters="componentParameters" EnumParameters="enumParameters">
    <CodeSample Title="BitRating" Description="">
        <SampleContent>
            <div class="how-to-use">
                <div>Large stars</div>
                <BitRating Size="BitRatingSize.Large" @bind-Rating="RatingLargeValue" AriaLabelFormat="Select {0} of {1} stars" />
                <div>Small stars, with 0 stars allowed</div>
                <BitRating AllowZeroStars="true" @bind-Rating="RatingSmallValue" />
                <div>10 small stars</div>
                <div>
                    <BitRating Max="10" OnChange="@(v => RatingChangedText = $"Rating value changed to {v}")" @bind-Rating="RatingBoundValue" />
                    <div class="m-t-10">
                        <span>@RatingChangedText</span>
                    </div>
                    <div>Disabled</div>
                    <BitRating IsEnabled="false" @bind-Rating="RatingReadOnlyValue" />
                    <div>Half star in readOnly mod</div>
                    <BitRating IsReadOnly="true" @bind-Rating="RatingReadOnlyValue" GetAriaLabel="@((value, max) => $"Half star in readOnly mode rating value is {value.ToString()} of {max.ToString()}")" />
                    <div>Custom icons</div>
                    <BitRating Icon="HeartFill" UnselectedIcon="Heart" AllowZeroStars="true" @bind-Rating="RatingCustomIconValue" />
                </div>
            </div>
        </SampleContent>
        <CodeSampleContent>
            <pre>
               &lt<span class="dark-green">BitRating Size</span>="<span class="neon-yellow">BitRatingSize</span>.Large" <span class="light-yellow-bg">&#64;</span><span class="dark-green">bind-Rating</span><span>="RatingLargeValue" </span><span class="dark-green">AriaLabelFormat</span><span>="Select {0} of {1} stars"</span><span>/&gt;</span>
               &lt<span class="dark-green">BitRating AllowZeroStars</span><span class="light-blue">="true" </span><span class="light-yellow-bg">&#64;</span><span class="dark-green">bind-Rating</span><span>="RatingSmallValue"</span><span>/&gt;</span>
               &lt<span class="dark-green">BitRating Max</span>="10"<span class="dark-green"> OnChange</span>="<span class="light-yellow-bg">&#64;</span>(v => RatingChangedText = $"Rating value changed to {v}")" <span class="light-yellow-bg">&#64;</span><span class="dark-green">bind-Rating</span><span>="RatingBoundValue"</span><span>/&gt;</span>
               &lt<span class="dark-green">BitRating IsEnabled</span><span class="light-blue">="false" </span><span class="light-yellow-bg">&#64;</span><span class="dark-green">bind-Rating</span><span>="RatingReadOnlyValue"</span><span>/&gt;</span>
               &lt<span class="dark-green">BitRating IsReadOnly</span><span class="light-blue">="true" </span><span class="light-yellow-bg">&#64;</span><span class="dark-green">bind-Rating</span><span>="RatingReadOnlyValue" </span><span class="dark-green">GetAriaLabel</span>="<span class="light-yellow-bg">&#64;</span><span>((value, max) => $"Half star in readOnly mode rating value is {value.ToString()} of {max.ToString()}")"</span><span>/&gt;</span>
               &lt<span class="dark-green">BitRating Icon</span>="HeartFill"<span class="dark-green"> UnselectedIcon</span>="Heart"<span class="dark-green"> AllowZeroStars</span>=<span class="light-blue">"true"</span> <span class="light-yellow-bg">&#64;</span><span class="dark-green">bind-Rating</span><span>="RatingOutsideValue"</span><span>/&gt;</span>
            </pre>
        </CodeSampleContent>
    </CodeSample>
    <CodeSample Title="Button-controlled rating" Description="BitRating component support two-way binding as well.">
        <SampleContent>
            <div class="how-to-use">
                <BitRating Icon="Emoji2" UnselectedIcon="EmojiNeutral" AllowZeroStars="true" @bind-Rating="RatingOutsideValue" />
                <div>
                    <span>RatingOutsideValue: @RatingOutsideValue</span>
                </div>
                <div>
                    <BitButton OnClick="() => RatingOutsideValue = 5">Fully satisfied</BitButton>
                    <BitButton OnClick="() => RatingOutsideValue = 0">Have no idea</BitButton>
                </div>
            </div>
        </SampleContent>
        <CodeSampleContent>
            <pre>
              &lt<span class="dark-green">BitRating Icon</span>="Emoji2"<span class="dark-green"> UnselectedIcon</span>="EmojiNeutral"<span class="dark-green"> AllowZeroStars</span>=<span class="light-blue">"true"</span> <span class="light-yellow-bg">&#64;</span><span class="dark-green">bind-Rating</span><span>="RatingOutsideValue"</span><span>/&gt;</span>
              &lt<span class="dark-green">BitButton OnClick</span>="() => RatingOutsideValue = 5">Fully satisfied<span>&lt/</span><span class="dark-green">BitButton</span><span>&gt;</span>
              &lt<span class="dark-green">BitButton OnClick</span>="() => RatingOutsideValue = 0">Have no idea<span>&lt/</span><span class="dark-green">BitButton</span><span>&gt;</span>
            </pre>
        </CodeSampleContent>
    </CodeSample>
</ComponentPage>