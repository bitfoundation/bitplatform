@page "/components/toggle"

@using Bit.Client.Web.BlazorUI.Playground.Web.Components

<ComponentDemo ComponentName="Toggle" ComponentDescription="A toggle represents a physical switch that allows someone to choose between two mutually exclusive options.  For example, “On/Off”, “Show/Hide”. Choosing an option should produce an immediate result."
               ComponentParameters="componentParameters" EnumParameters="enumParameters">
    <ComponentExampleBox Title="BitToggle" HTMLSourceCode="@example1HTMLCode" CSharpSourceCode="@example1CSharpCode" ExampleId="example1">
        <ExamplePreview>
            <div>
                <BitToggle Label="Enabled And Checked" @bind-Value="IsToggleChecked" IsEnabled="true" OnText="On" OffText="Off" />
            </div>
            <div>
                <BitToggle Label="Enabled And Unchecked" @bind-Value="IsToggleUnChecked" IsEnabled="true" OnText="On" OffText="Off" />
            </div>
            <div>
                <BitToggle Label="Disabled And Checked" Value="true" IsEnabled="false" OnText="On" OffText="Off" />
            </div>
            <div>
                <BitToggle Label="Disabled And Unchecked" Value="false" IsEnabled="false" OnText="On" OffText="Off" />
            </div>
            <div class="m-t-15">
                <BitToggle Label="With Inline Label" @bind-Value="IsToggleUnChecked" IsEnabled="true" IsInlineLabel="true" OnText="On" OffText="Off" />
            </div>
            <div class="m-t-15">
                <BitToggle Label="Disabled With Inline Label" Value="false" IsEnabled="false" IsInlineLabel="true" OnText="On" OffText="Off" />
            </div>
            <div class="m-t-15">
                <BitToggle Label="With Inline Label And Without OnText And OffText" @bind-Value="IsToggleUnChecked" IsEnabled="true" IsInlineLabel="true" />
            </div>
            <div class="m-t-15">
                <BitToggle Label="Disabled With Inline Label And Without OnText And OffText" Value="false" IsEnabled="false" IsInlineLabel="true" />
            </div>
            <div>
                <BitToggle Label="Enabled And Checked (ARIA 1.0 compatible)" @bind-Value="IsToggleChecked" IsEnabled="true" OnText="On" OffText="Off" Role="Checkbox" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Toggles With Custom Labels" HTMLSourceCode="@example2HTMLCode" CSharpSourceCode="@example1CSharpCode" ExampleId="example2">
        <ExamplePreview>
            <div class="m-t-15">
                <BitToggle @bind-Value="IsToggleUnChecked" IsEnabled="true" OnText="On" OffText="Off">
                    <LabelFragment>
                        Custom Inline Label
                    </LabelFragment>
                </BitToggle>
            </div>
            <div class="m-t-15">
                <BitToggle @bind-Value="BindedIsToggleUnChecked" IsEnabled="true" OnText="On" OffText="Off" IsInlineLabel="true">
                    <LabelFragment>
                        Custom Inline Label
                    </LabelFragment>
                </BitToggle>
                <div class="m-t-15">
                    <BitButton Class="m-t-15" OnClick="() => BindedIsToggleUnChecked = true">Make Toggle Check</BitButton>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Toggle validation" HTMLSourceCode="@example3HTMLCode" CSharpSourceCode="@example3CSharpCode" ExampleId="example3">
        <ExamplePreview>
            <div class="m-t-15">
                @if (string.IsNullOrEmpty(SuccessMessage))
                {
                    <EditForm Model="ValidationForm" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                        <DataAnnotationsValidator />

                        <div class="validation-summary">
                            <ValidationSummary />
                        </div>

                        <div>
                            <BitToggle @bind-Value="ValidationForm.TermsAgreement" DefaultText="I agree with the terms and conditions." />

                            <ValidationMessage For="@(() => ValidationForm.TermsAgreement)" />
                        </div>

                        <BitButton ButtonType="BitButtonType.Submit">
                            Submit
                        </BitButton>
                    </EditForm>
                }
                else
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        @SuccessMessage
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>