@page "/components/togglebutton"

@using Bit.Client.Web.BlazorUI.Playground.Web.Components

<ComponentPage ComponentName="Toggle Button" OverviewDesc="Buttons give people a way to trigger an action. They’re typically found in forms, dialog panels, and dialogs.
    Some buttons are specialized for particular tasks, such as navigation, repeated actions, or presenting menus."
               ComponentParameters="componentParameters" EnumParameters="enumParameters">
    <CodeSample Title="BitToggleButton" Description="BitToggleButton component represents a button as a checkbox and can use in form pages." CodeSampleContentForCopy="@toggleButtonSampleCode">
        <SampleContent>
            <div>
                <BitToggleButton @bind-IsChecked="TogglePrimaryButtonChecked"
                                 Class="tgl-btn"
                                 Label="@(TogglePrimaryButtonChecked ? "Primary Mute":"Primary Unmute")"
                                 IconName=@(TogglePrimaryButtonChecked ? BitIcon.MicOff : BitIcon.Microphone)
                                 ButtonStyle="BitButtonStyle.Primary">
                </BitToggleButton>

                <BitToggleButton @bind-IsChecked="ToggleStandardButtonChecked"
                                 Class="tgl-btn"
                                 Label="@(ToggleStandardButtonChecked ? "Standard Mute":"Standard Unmute")"
                                 IconName=@(ToggleStandardButtonChecked ? BitIcon.MicOff : BitIcon.Microphone)
                                 ButtonStyle="BitButtonStyle.Standard">
                </BitToggleButton>

                <BitToggleButton @bind-IsChecked="ToggleDisabledButtonChecked"
                                 Class="tgl-btn"
                                 IsEnabled="false"
                                 Label="@(ToggleDisabledButtonChecked ? "Disabled Mute" : "Disabled Unmute")"
                                 IconName=@(ToggleDisabledButtonChecked ? BitIcon.MicOff : BitIcon.Microphone)>
                </BitToggleButton>
            </div>
        </SampleContent>
        <CodeSampleContent>
            <pre>
                &lt<span class="soco-component-attr">BitToggleButton </span><span class="soco-code">&#64;</span><span class="soco-component-attr">bind-IsChecked</span>="TogglePrimaryButtonChecked"
                                                    <span class="soco-component-attr">Label</span>="<span class="soco-code">&#64;(</span>TogglePrimaryButtonChecked ? <span class="soco-string">"Primary Mute"</span> : <span class="soco-string">"Primary Unmute"</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">IconName</span>="<span class="soco-code">&#64;(</span>TogglePrimaryButtonChecked ? <span class="soco-string">BitIcon.MicOff</span> : <span class="soco-string">BitIcon.Microphone</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">ButtonStyle</span>="ButtonStyle.Primary">
                &lt/<span class="soco-component-attr">BitToggleButton</span>&gt;
                &lt<span class="soco-component-attr">BitToggleButton </span><span class="soco-code">&#64;</span><span class="soco-component-attr">bind-IsChecked</span>="ToggleStandardButtonChecked"
                                                    <span class="soco-component-attr">Label</span>="<span class="soco-code">&#64;(</span>ToggleStandardButtonChecked ? <span class="soco-string">"Standard Mute"</span> : <span class="soco-string">"Standard Unmute"</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">IconName</span>="<span class="soco-code">&#64;(</span>ToggleStandardButtonChecked ? <span class="soco-string">BitIcon.MicOff</span> : <span class="soco-string">BitIcon.Microphone</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">ButtonStyle</span>="ButtonStyle.Standard">
                &lt/<span class="soco-component-attr">BitToggleButton</span>&gt;
                &lt<span class="soco-component-attr">BitToggleButton </span><span class="soco-code">&#64;</span><span class="soco-component-attr">bind-IsChecked</span>="ToggleDisabledButtonChecked"
                                                    <span class="soco-component-attr">Label</span>="<span class="soco-code">&#64;(</span>ToggleDisabledButtonChecked ? <span class="soco-string">"Disabled Mute"</span> : <span class="soco-string">"Disabled Unmute"</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">IconName</span>="<span class="soco-code">&#64;(</span>ToggleDisabledButtonChecked ? <span class="soco-string">BitIcon.MicOff</span> : <span class="soco-string">BitIcon.Microphone</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">IsEnabled</span>=<span class="soco-tag-type-def">"false"</span>>
                &lt/<span class="soco-component-attr">BitToggleButton</span>&gt;
                <span class="soco-code">&#64;code {</span>
                      <span class="soco-tag-type-def">private bool</span> TogglePrimaryButtonChecked = <span class="soco-tag-type-def">false</span>;
                      <span class="soco-tag-type-def">private bool</span> ToggleStandardButtonChecked = <span class="soco-tag-type-def"> false</span>;
                      <span class="soco-tag-type-def">private bool</span> ToggleDisabledButtonChecked = <span class="soco-tag-type-def">false</span>;
                <span class="soco-code">}</span>
            </pre>
        </CodeSampleContent>
    </CodeSample>
    <CodeSample Title="Toggle Button with OnChange event" Description="" CodeSampleContentForCopy="@onChangeSampleCode">
        <SampleContent>
            <span class="checkbox-status">Check status is: <span class="soco-tag-type-def">@OnToggleButtonChanged</span></span>
            <div class="m-t-20">
                <BitToggleButton @bind-IsChecked="ToggleButtonForOnChange"
                                 Label="@(ToggleButtonForOnChange ? "Mute" : "Unmute")"
                                 IconName=@(ToggleButtonForOnChange ? BitIcon.MicOff : BitIcon.Microphone)
                                 OnChange="ToggleButtonChanged">
                </BitToggleButton>
            </div>
        </SampleContent>
        <CodeSampleContent>
            <pre>
                &lt<span class="soco-component-attr">BitToggleButton </span><span class="soco-code">&#64;</span><span class="soco-component-attr">bind-IsChecked</span>="ToggleButtonForOnChange"
                                                    <span class="soco-component-attr">Label</span>="<span class="soco-code">&#64;(</span>ToggleButtonForOnChange ? <span class="soco-string">"Mute"</span> : <span class="soco-string">"Unmute"</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">IconName</span>="<span class="soco-code">&#64;(</span>ToggleButtonForOnChange ? <span class="soco-string">BitIcon.MicOff</span> : <span class="soco-string">BitIcon.Microphone</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">OnChange</span>="ToggleButtonChanged"<span>&gt;</span>>
                &lt/<span class="soco-component-attr">BitToggleButton</span>&gt
                &lt<span class="soco-tag-type-def">span</span>><span>Check status is: <span class="soco-code">&#64;</span>OnToggleButtonChanged</span>&lt/<span class="soco-tag-type-def">span</span>>
                <span class="soco-code">&#64;code {</span>
                      <span class="soco-tag-type-def">private bool</span> ToggleButtonForOnChange = <span class="soco-tag-type-def">true;</span>
                      <span class="soco-tag-type-def">private bool</span> OnToggleButtonChanged = <span class="soco-tag-type-def">true;</span>
                <span class="soco-code">}</span>
            </pre>
        </CodeSampleContent>
    </CodeSample>
    <CodeSample Title="Toggle Button with two way binding" Description="" CodeSampleContentForCopy="@twoWayBindingSampleCode">
        <SampleContent>
            <div>
                <input type=checkbox id="BitToggleButtonTwoWayValue" @bind="ToggleButtonTwoWayValue">
                <label class="checkbox-status" for="BitToggleButtonTwoWayValue">Checked Toggle Button</label>
                <div class="m-t-10">
                    <BitToggleButton @bind-IsChecked="ToggleButtonTwoWayValue"
                                     Label="@(ToggleButtonTwoWayValue ? "Mute" : "Unmute")"
                                     IconName=@(ToggleButtonTwoWayValue ? BitIcon.MicOff : BitIcon.Microphone)>
                    </BitToggleButton>
                </div>
            </div>
        </SampleContent>
        <CodeSampleContent>
            <pre>
                &lt<span class="soco-tag-type-def">input</span><span class="soco-var-attr"> type</span>=checkbox<span class="soco-var-attr"> id</span>="BitTogleButtonTwoWayValue" <span class="soco-code">&#64;</span><span class="soco-component-attr">bind</span>="TogleButtonTwoWayValue"/>
                &lt<span class="soco-tag-type-def">label</span><span class="soco-var-attr"> for</span>="BitTogleButtonTwoWayValue">Checked Toggle Button<span>&lt/</span><span class="soco-tag-type-def">label</span>&gt;
                &lt<span class="soco-component-attr">BitToggleButton </span><span class="soco-code">&#64;</span><span class="soco-component-attr">bind-IsChecked</span>="TogleButtonTwoWayValue"
                                                    <span class="soco-component-attr">Label</span>="<span class="soco-code">&#64;(</span>TogleButtonTwoWayValue ? <span class="soco-string">"Mute"</span> : <span class="soco-string">"Unmute"</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">IconName</span>="<span class="soco-code">&#64;(</span>TogleButtonTwoWayValue ? <span class="soco-string">BitIcon.MicOff</span> : <span class="soco-string">BitIcon.Microphone</span><span class="soco-code">)</span>">
                &lt/<span class="soco-component-attr">BitToggleButton</span>&gt;
                &lt<span class="soco-tag-type-def">span</span>>Check status is: <span class="soco-code">&#64;</span>OnToggleButtonChanged<span class="soco-tag-type-def">&lt/span</span>>
                <span class="soco-code">&#64;code {</span>
                      <span class="soco-tag-type-def">private bool</span> ToggleButtonTwoWayValue = <span class="soco-tag-type-def">true</span>;
                <span class="soco-code">}</span>
            </pre>
        </CodeSampleContent>
    </CodeSample>
    <CodeSample Title="Arias for Screen Reader" Description="Aria attribues can also set for a BitToggleButton." CodeSampleContentForCopy="@ariasSampleCode">
        <SampleContent>
            <div>
                <BitToggleButton @bind-IsChecked="ToggleButtonChecked"
                                 Label="@(ToggleButtonChecked ? "Aria Description Mute" : "Aria Description Unmute")"
                                 IconName=@(ToggleButtonChecked ? BitIcon.MicOff : BitIcon.Microphone)
                                 AriaDescription="Detailed description used for screen reader">
                </BitToggleButton>
                <BitToggleButton @bind-IsChecked="ToggleButtonChecked"
                                 Class="aria-hidden-tgl-btn"
                                 Label="@(ToggleButtonChecked ? "Aria Hidden Mute" : "Aria Hidden Unmute")"
                                 IconName=@(ToggleButtonChecked ? BitIcon.MicOff : BitIcon.Microphone)
                                 AriaHidden="true">
                </BitToggleButton>
            </div>
        </SampleContent>
        <CodeSampleContent>
            <pre>
                &lt<span class="soco-component-attr">BitToggleButton </span><span class="soco-code">&#64;</span><span class="soco-component-attr">bind-IsChecked</span>="ToggleButtonChecked"
                                                    <span class="soco-component-attr">Label</span>="<span class="soco-code">&#64;(</span>ToggleButtonChecked ? <span class="soco-string">"Aria Description Mute"</span> : <span class="soco-string">"Aria Description Unmute"</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">IconName</span>="<span class="soco-code">&#64;(</span>ToggleButtonChecked ? <span class="soco-string">BitIcon.MicOff</span> : <span class="soco-string">BitIcon.Microphone</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">AriaDescription</span>="Detailed description used for screen reader"&gt;
                &lt/<span class="soco-component-attr">BitToggleButton</span>&gt;
                &lt<span class="soco-component-attr">BitToggleButton </span><span class="soco-code">&#64;</span><span class="soco-component-attr">bind-IsChecked</span>="ToggleButtonChecked"
                                                    <span class="soco-component-attr">Label</span>="<span class="soco-code">&#64;(</span>ToggleButtonChecked ? <span class="soco-string">"Aria Hidden Mute"</span> : <span class="soco-string">"Aria Hidden Unmute"</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">IconName</span>="<span class="soco-code">&#64;(</span>ToggleButtonChecked ? <span class="soco-string">BitIcon.MicOff</span> : <span class="soco-string">BitIcon.Microphone</span><span class="soco-code">)</span>"
                                                    <span class="soco-component-attr">AriaHidden</span>="<span class="soco-tag-type-def">true</span>"&gt;
                &lt/<span class="soco-component-attr">BitToggleButton</span>&gt;
                <span class="soco-code">&#64;code {</span>
                      <span class="soco-tag-type-def">private bool</span> ToggleButtonChecked = <span class="soco-tag-type-def">false</span>;
                <span class="soco-code">}</span>
            </pre>
        </CodeSampleContent>
    </CodeSample>
</ComponentPage>