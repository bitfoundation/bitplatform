
<section class="page-section getting-started-step-section">

    <section class="getting-started-side-rail-section" @ref="GettingStartedElement">
        <a class="side-rail-item @(CurrentUrl == "#getting-started"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#getting-started" target="_parent">Getting started</a>
        <a class="side-rail-item @(CurrentUrl == "#development-prerequisites"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#development-prerequisites" target="_parent">Development prerequisites</a>
        <a class="side-rail-item @(CurrentUrl == "#environments"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#environments" target="_parent">Environment setup</a>
        <a class="side-rail-item @(CurrentUrl == "#create-project"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#create-project" target="_parent">Create project</a>
        <a class="side-rail-item @(CurrentUrl == "#prepare-project"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#prepare-project" target="_parent">Prepare The Project</a>
        <a class="side-rail-item @(CurrentUrl == "#run"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#run" target="_parent">Run</a>
        <a class="side-rail-item @(CurrentUrl == "#blazor-modes"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#blazor-modes" target="_parent">Blazor Mode (hosting models)</a>
        <a class="side-rail-item @(CurrentUrl == "#deployment-types"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#deployment-types" target="_parent">WebApp Deployment Type</a>
        <a class="side-rail-item @(CurrentUrl == "#settings"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#settings" target="_parent">Settings</a>
        <a class="side-rail-item @(CurrentUrl == "#project-structure"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#project-structure" target="_parent">TodoTemplate Project structure</a>
        <a class="side-rail-item @(CurrentUrl == "#exception-handling"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#exception-handling" target="_parent">Exception handling</a>
        <a class="side-rail-item @(CurrentUrl == "#cache-mechanism"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#cache-mechanism" target="_parent">Cache mechanism</a>
        <a class="side-rail-item @(CurrentUrl == "#contribute"? "selected-side-rail-item" : "" )" href="@Urls.TodoTemplate#contribute" target="_parent">Contribute</a>
    </section>


    <div class="step-body-card">
        <h4 id="project-structure">
            <a class="anchor" href="@Urls.TodoTemplate#project-structure" target="_parent"><i class="anchor-icon bit-icon bit-icon--Link12"> </i></a>
            TodoTemplate Project structure
        </h4>
        <div class="card-container">
            <div class="description">
                The <strong>TodoTemplate</strong> solution prepared with Bit has 5 Projects.
            </div>
            <div class="image-container">
                <img class="image" alt="TodoTemplate solution" width="398" height="317" src="/images/demo/todo-template-solution.webp" />
            </div>
            <ul class="first-step-ul">
                <li>
                    <strong>TodoTemplate.Api</strong>:
                    This project contains server-side codes including Controllers, Data access layer (EntityFramework ORM), Identity, etc.
                </li>
                <li>
                    <strong>TodoTemplate.App</strong>:
                    This project contains code related to building an app, although much of the code is common to the web project and refers to it.
                </li>
                <li>
                    <strong>TodoTemplate.Iac</strong>:
                    Infrastructure as Code (IaC) is the managing and provisioning of infrastructure through code instead of through manual processes. This project contains the necessary code to provide this feature.
                    You don't have to use either Pulumi or even Azure, Host it wherever you want.
                </li>
                <li>
                    <strong>TodoTemplate.Shared</strong>: This project is shared on both the server (Api project) and client(Web, App projects) sides, and can share code. The bit puts the code it wants to reuse; Like resources, Dtos, shared contracts, services, etc.
                </li>
                <li>
                    <strong>TodoTemplate.Web</strong>: This project contains the necessary code to build the project UI, whether it is a web output or an application. And includes components and pages made with the help of Razor and Style sheet
                </li>
            </ul>
        </div>
    </div>

    <div class="step-body-card">
        <h4 id="exception-handling">
            <a class="anchor" href="@Urls.TodoTemplate#exception-handling" target="_parent"><i class="anchor-icon bit-icon bit-icon--Link12"> </i></a>
            Exception handling
        </h4>
        <div class="card-container">
            <div class="description">
                Bit performs some features to manage exceptions that occurred in runtime.
            </div>
            <h3>Server-Side exception handling</h3>
            <ul class="first-step-ul">
                <li>
                    <strong>known and unknown exception</strong>: In development When an error occurred if this error is known or unknown, details of the error returned, but in test and production for unknown error details of the error not returned from server.
                    <ul dir="auto">
                        <li>known exception inhrites <span class="high-light">KnownException</span> class</li>
                        <li>Unknown exception inhrites <span class="high-light">UnknownException</span> class</li>
                    </ul>
                </li>
                <li><strong>RestException</strong>: It's a class that has an HTTP Response <span class="high-light">StatusCode</span> that you to perform a response with status code.</li>
            </ul>

            <h3>Client-Side exception handling</h3>
            <div class="description">When an error is raised in App(android, IOS) maybe cause crash app. for avoiding app crash; Bit provides some mechanism for error handling.</div>
            <ul class="first-step-ul">
                <li>inheriting <span class="high-light">AppComponentBase</span> in razor pages.</li>
                <li>Instead of initializing your components in the <span class="high-light">OnInitializedAsync</span> method, override the <span class="high-light">OnInitAsync</span> method of the <span class="high-light">AppComponentBase</span> class.</li>
                <li>Use <span class="high-light">WrapHandle</span> method instead of direct calling events such as <span class="high-light">OnClick</span> in the Razor components.</li>
                <li>Use <span class="high-light">try-catch</span> block in <span class="high-light">asyn-avoid</span> method and call <span class="high-light">StatehasChanged</span> method to handle unexpected errors.</li>
            </ul>
        </div>
    </div>

    <div class="step-body-card">
        <h4 id="cache-mechanism">
            <a class="anchor" href="@Urls.TodoTemplate#cache-mechanism" target="_parent"><i class="anchor-icon bit-icon bit-icon--Link12"> </i></a>
            Cache mechanism
        </h4>
        <div class="card-container">
            <div class="description">
                In <strong>PWA</strong>, a manifest is generated and all files will be downloaded by PWA with the help of this manifest. In this case, the PWA app can work in offline mode, and for example, we can leverage ef-core and SqlLite in the browser, which will work offline, and after going online, it can synchronize the generated data with the server if necessary.
                If a file is changed (such as font, photo, etc.), the latest changes will be automatically downloaded.
            </div>
            <div class="description">
                <strong>Note</strong>: that if you do not need a file, be sure to delete it so that it is no longer downloaded by PWA.
            </div>
            <div class="description">
                In <strong>SPA</strong> if the .js, .css, and .dll files are changed, the new version will be automatically downloaded (by the asp-append-version in _Layout. cshtml). But for other file types such as font, image, etc, the file name must also be changed to ensure that the client is updated.
            </div>
        </div>
    </div>

    <div class="step-body-card">
        <h4 id="contribute">
            <a class="anchor" href="@Urls.TodoTemplate#contribute" target="_parent"><i class="anchor-icon bit-icon bit-icon--Link12"> </i></a>
            Contribute
        </h4>
        <div class="card-container">
            <div class="description">
                There are many ways to contribute
            </div>

            <ul class="first-step-ul">
                <li>Give us a try and use bit platform nuget packages in your apps!</li>
                <li><a target="_blank" href="https://github.com/bitfoundation/bitplatform/pulls">Code review</a></li>
                <li>Fork / Star this project! (":</li>
                <li>Submit <a href="https://github.com/bitfoundation/bitplatform/issues/new?template=bug_report.yml">bugs</a> &amp; <a href="https://github.com/bitfoundation/bitplatform/issues/new?template=feature_request.yml">feature requests</a></li>
                <li>Engage with other developers on <a target="_blank" href="https://stackoverflow.com/questions/tagged/bitplatform">Stack Overflow</a></li>
            </ul>
        </div>
    </div>
</section>