@page "/theming"

<PageTitle>Bit BlazorUI - Theming</PageTitle>

<div class="page-container">
    <BitTypography Variant="BitTypographyVariant.H3" Gutter>Theming</BitTypography>
    <section class="page-section">
        <BitTypography Variant="BitTypographyVariant.Body1">
            In Bit BlazorUI, color, typography, spacing, and other style properties are defined in CSS and SCSS variables, for allowing easy customization and flexibility, these variables are part of Microsoft Fluent design system and contains both dark and light mode colors that you can theme your app in anyway you like.
        </BitTypography>
        <p>For colors you can find the SCSS files for the BitTheme on the official GitHub repository:</p>
        <ul>
            <li><a href="https://github.com/bitfoundation/bitplatform/blob/develop/src/BlazorUI/Bit.BlazorUI/Styles/Fluent/colors.fluent-dark.scss" target="_blank">Dark Fluent SCSS file</a></li>
            <li><a href="https://github.com/bitfoundation/bitplatform/blob/develop/src/BlazorUI/Bit.BlazorUI/Styles/Fluent/colors.fluent-light.scss" target="_blank">Light Fluent SCSS file</a></li>
        </ul>
    </section>
    <section class="page-section">
        <BitTypography Variant="BitTypographyVariant.H4" Gutter>Initialization</BitTypography>
        <p>To initialize the BitThemeManager, you can use the <code>OnAfterRender</code> method in your <code>App</code> component (usually found in the <code>App.razor.cs</code> file). Here's an example:</p>
        <pre><code>public partial class App
{
    [Inject] private IJSRuntime _jsRuntime = default!;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            BitThemeManager.Init(_jsRuntime);
        }

        base.OnAfterRender(firstRender);
    }
}       </code></pre>
    </section>
    <section class="page-section">
        <BitTypography Variant="BitTypographyVariant.H4" Gutter>Applying BitTheme</BitTypography>
        <p>To apply the BitTheme styles to your web application, you can use the <code>Apply</code> method provided by the BitThemeManager. The <code>Apply</code> method accepts two parameters: the custom theme and the target <code>Element Refrence</code>.</p>
        <p>Here's an example of how to apply the BitTheme to the entire body:</p>
        <div class="code-box">BitThemeManager.Apply(myTheme)</div>
        <p>You can also apply the BitTheme to specific elements by passing it's Element Refrence as the target:</p>
        <div class="code-box">BitThemeManager.Apply(myTheme, _myElementRef)</div>
    </section>
    <section class="page-section">
        <BitTypography Variant="BitTypographyVariant.H4" Gutter>Full Code Example</BitTypography>
        <p>Here's an full example of how you can use the BitTheme class to customize the theme of your web application:</p>
        <pre><code>&lt;div @@ref="_myElementRef">Content...&lt;/div>

@@code {
    private ElementReference _myElementRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Customize the theme properties
            var newTheme = new BitTheme();
            newTheme.Color.Primary.Main = "gold";
            newTheme.Color.Action.Hover.Primary = "red";
            newTheme.Color.Action.Active.Primary = "blue";

            // Apply the customized theme
            await BitThemeManager.ApplyBitTheme(newTheme, _myElementRef);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
        </code></pre>
    </section>
</div>
