@page "/components/toggle"

@using Bit.BlazorUI.Demo.Client.Shared.Components

<ComponentDemo ComponentName="Toggle"
               ComponentDescription="A toggle represents a physical switch that allows someone to choose between two mutually exclusive options.  For example, “On/Off”, “Show/Hide”. Choosing an option should produce an immediate result."
               ComponentParameters="componentParameters">
    <ComponentExampleBox Title="Basic" HTMLSourceCode="@example1HTMLCode" CSharpSourceCode="@example1CSharpCode" ExampleId="example1">
        <ExamplePreview>
            <div class="example-box">
                <BitToggle Label="Basic" @bind-Value="BasicValue" />
                <BitToggle Label="Disabled" @bind-Value="DisabledValue" IsEnabled="false" />
                <BitToggle Label="OnText And OffText" @bind-Value="OnTextValue" OnText="On" OffText="Off" />
                <BitToggle Label="Inline Label" @bind-Value="InLineLabelValue" IsInlineLabel="true" />
                <BitToggle @bind-Value="DefaultTextValue" DefaultText="Default Text" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitToggle with Custom Label" HTMLSourceCode="@example2HTMLCode" CSharpSourceCode="@example2CSharpCode" ExampleId="example2">
        <ExamplePreview>
            <div class="example-box">
                <BitToggle @bind-Value="LabelTemplateValue">
                    <LabelTemplate>
                        <span style="color: green;">This is custom Label</span>
                        <BitIcon IconName="BitIconName.Filter" />
                    </LabelTemplate>
                </BitToggle>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitToggle Binding" HTMLSourceCode="@example3HTMLCode" CSharpSourceCode="@example3CSharpCode" ExampleId="example3">
        <ExamplePreview>
            <div class="example-box">
                <div>
                    <BitToggle Value="OneWayValue" Label="One-way" OnText="Off" OffText="On" />
                    <BitToggleButton @bind-IsChecked="OneWayValue" Label="@(OneWayValue ? "Off" : "On")" />
                </div>
                <div>
                    <BitToggle @bind-Value="TwoWayValue" Label="Two-way" OnText="Off" OffText="On" />
                    <BitToggleButton @bind-IsChecked="TwoWayValue" Label="@(TwoWayValue ? "Off" : "On")" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitToggle validation" HTMLSourceCode="@example4HTMLCode" CSharpSourceCode="@example4CSharpCode" ExampleId="example4">
        <ExamplePreview>
            @if (string.IsNullOrEmpty(SuccessMessage))
            {
                <EditForm Model="ValidationForm" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                    <DataAnnotationsValidator />

                    <div class="validation-summary">
                        <ValidationSummary />
                    </div>

                    <div>
                        <BitToggle @bind-Value="ValidationForm.TermsAgreement" DefaultText="I agree with the terms and conditions." />
                        <ValidationMessage For="@(() => ValidationForm.TermsAgreement)" />
                    </div>

                    <BitButton Style="margin-top: 10px;" ButtonType="BitButtonType.Submit">
                        Submit
                    </BitButton>
                </EditForm>
            }
            else
            {
                <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                    @SuccessMessage
                </BitMessageBar>
            }
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>