@page "/components/basic-list"
@inject HttpClient HttpClient
@inject NavigationManager NavManager

@using Bit.BlazorUI.Demo.Shared.Dtos.DataGridDemo;

<ComponentDemo ComponentName="BasicList"
               ComponentDescription="BitBasicList provides a base component for rendering large sets of items. It’s agnostic of layout, the tile component used, and selection management."
               ComponentParameters="componentParameters">
    <ComponentExampleBox Title="BitBasicList" HTMLSourceCode="@example1HTMLCode" CSharpSourceCode="@example1CSharpCode" ExampleId="example1">
        <ExamplePreview>
            <BitBasicList Items="People1" EnableVirtualization="true" Style="border: 1px #a19f9d solid; border-radius: 3px; ">
                <RowTemplate Context="person">
                    <div @key="person.item.Id" style="border-bottom: 1px #8a8886 solid; padding: 5px 20px; margin: 10px;">
                        <img src="https://picsum.photos/100/100?random=@(person.item.Id)">
                        <div style="margin-left:3%; display: inline-block;">
                            <p>Id: <strong>@person.item.Id</strong></p>
                            <p>Full Name: <strong>@person.item.FirstName @person.item.LastName</strong></p>
                            <p>Job: <strong>@person.item.Job</strong></p>
                        </div>
                    </div>
                </RowTemplate>
            </BitBasicList>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Basic List without virtualization" HTMLSourceCode="@example2HTMLCode" CSharpSourceCode="@example2CSharpCode" ExampleId="example2">
        <ExamplePreview>
            <BitBasicList Items="People2" EnableVirtualization="false" Style="border: 1px #a19f9d solid; border-radius: 3px; ">
                <RowTemplate Context="person">
                    <div style="border-bottom: 1px #8a8886 solid; padding: 5px 20px; margin: 10px;">
                        <img src="https://picsum.photos/100/100?random=@(person.item.Id)">
                        <p>Id: <strong>@person.item.Id</strong></p>
                        <p>Full Name: <strong>@person.item.FirstName @person.item.LastName</strong></p>
                        <p>Job: <strong>@person.item.Job</strong></p>
                    </div>
                </RowTemplate>
            </BitBasicList>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Basic List with custom role and class" HTMLSourceCode="@example3HTMLCode" CSharpSourceCode="@example3CSharpCode" ExampleId="example3">
        <ExamplePreview>
            <BitBasicList Items="People1" EnableVirtualization="true" Role="list" Style="border: 1px #a19f9d solid; border-radius: 3px;">
                <RowTemplate Context="person">
                    <div class="list-item">
                        <span>Id: <strong>@person.item.Id</strong></span>
                        <span>Full Name: <strong>@person.item.FirstName</strong></span>
                        <span>Job: <strong>@person.item.Job</strong></span>
                    </div>
                </RowTemplate>
            </BitBasicList>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Basic List with overscan count" HTMLSourceCode="@example4HTMLCode" CSharpSourceCode="@example4CSharpCode" ExampleId="example4">
        <ExamplePreview>
            <BitBasicList Items="People1" EnableVirtualization="true" OverscanCount="5" ItemSize="300" Style="border: 1px #a19f9d solid; border-radius: 3px; ">
                <RowTemplate Context="person">
                    <div style="border-bottom: 1px #8a8886 solid; padding: 5px 20px; margin: 10px;">
                        <p>Id: <strong>@person.item.Id</strong></p>
                        <p>Full Name: <strong>@person.item.FirstName @person.item.LastName</strong></p>
                        <p>Job: <strong>@person.item.Job</strong></p>
                    </div>
                </RowTemplate>
            </BitBasicList>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Basic List with items provider" HTMLSourceCode="@example5HTMLCode" CSharpSourceCode="@example5CSharpCode" ExampleId="example5">
        <ExamplePreview>
            <BitBasicList EnableVirtualization=true TItem="ProductDto" ItemsProvider="@productProvider" ItemSize="83" Style="border: 1px #a19f9d solid; border-radius: 3px; ">
                <RowTemplate Context="context">
                    <div style="border-bottom: 1px #8a8886 solid; padding: 5px 20px;">
                        <div>Id: <strong>@context.item.Id</strong></div>
                        <div>Name: <strong>@context.item.Name</strong></div>
                        <div>Price: <strong>@context.item.Price</strong></div>
                    </div>
                </RowTemplate>
                <VirtualizePlaceholder>
                    <div style="border-bottom: 1px #8a8886 solid; padding: 5px 20px;">
                        <div>Id: <strong>...</strong></div>
                        <div>Name: <strong>...</strong></div>
                        <div>Price: <strong>...</strong></div>
                    </div>
                </VirtualizePlaceholder>
            </BitBasicList>
        </ExamplePreview>
    </ComponentExampleBox>
                    </div>
                </VirtualizePlaceholder>
            </BitBasicList>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code {

    private List<Person> People1 = new();
    private List<Person> People2 = new();

    private BitBasicListItemsProvider<ProductDto> productProvider;

    protected override void OnInitialized()
    {
        People1 = GetPeople(8000);
        People2 = GetPeople(100);

        productProvider = async req =>
       {
           try
           {
               var query = new Dictionary<string, object>()
                                {
                    { "$top", req.Count},
                    { "$skip", req.StartIndex }
                                };

               var url = NavManager.GetUriWithQueryParameters("Products/GetProducts", query);

               var data = await HttpClient.GetFromJsonAsync(url, AppJsonContext.Default.PagedResultProductDto);

               return BitBasicListItemsProviderResult.From(data!.Items, (int)data!.TotalCount);
           }
           catch
           {
               return BitBasicListItemsProviderResult.From<ProductDto>(new List<ProductDto> { }, 0);
           }
       };

        {
            try
            {
                var query = new Dictionary<string, object?>
                                {
                    { "skip", req.StartIndex },
                    { "limit", req.Count }
                                };

                var url = NavManager.GetUriWithQueryParameters("https://api.fda.gov/food/enforcement.json", query);

                var data = await HttpClient.GetFromJsonAsync(url, AppJsonContext.Default.FoodRecallQueryResult, req.CancellationToken);

                return BitBasicListItemsProviderResult.From(data!.Results, data!.Meta.Results.Total);
            }
            catch
            {
                return BitBasicListItemsProviderResult.From<FoodRecall>(new List<FoodRecall> { }, 0);
            }
        };

        base.OnInitialized();
    }

    private static List<Person> GetPeople(int itemCount)
    {
        List<Person> people = new();

        for (int i = 0; i < itemCount; i++)
        {
            people.Add(new Person
                {
                    Id = i + 1,
                    FirstName = $"Person {i + 1}",
                    LastName = $"Person Family {i + 1}",
                    Job = $"Programmer {i + 1}"
                });
        }

        return people;
    }
}
