@page "/components/snackbar"

<PageOutlet Url="components/snackbar"
            Title="Snackbar"
            Description="snackbar component of the bit BlazorUI components" />

<ComponentDemo ComponentName="SnackBar"
               ComponentDescription="SnackBars provide brief notifications. The component is also known as a toast."
               ComponentParameters="componentParameters"
               ComponentSubEnums="componentSubEnums"
               ComponentSubClasses="componentSubClasses">
    <ComponentExampleBox Title="Type & Position" RazorCode="@example1RazorCode" CsharpCode="@example1CsharpCode" Id="example1">
        <ExamplePreview>
            <div class="example-box">
                <BitSnackBar @ref="basicSnackBarRef"
                             Dir="direction"
                             Position="@basicSnackBarPosition"
                             AutoDismiss="@basicSnackBarAutoDismiss"
                             AutoDismissTime="TimeSpan.FromSeconds(basicSnackBarDismissSeconds)" />

                <BitChoiceGroup @bind-Value="basicSnackBarType" Label="Type" TItem="BitChoiceGroupOption<BitSnackBarType>" TValue="BitSnackBarType">
                    <BitChoiceGroupOption Text="Info" Value="BitSnackBarType.Info" />
                    <BitChoiceGroupOption Text="Success" Value="BitSnackBarType.Success" />
                    <BitChoiceGroupOption Text="Warning" Value="BitSnackBarType.Warning" />
                    <BitChoiceGroupOption Text="SevereWarning" Value="BitSnackBarType.SevereWarning" />
                    <BitChoiceGroupOption Text="Error" Value="BitSnackBarType.Error" />
                </BitChoiceGroup>

                <BitChoiceGroup @bind-Value="basicSnackBarPosition" Label="Position" TItem="BitChoiceGroupOption<BitSnackBarPosition>" TValue="BitSnackBarPosition">
                    <BitChoiceGroupOption Text="TopLeft" Value="BitSnackBarPosition.TopLeft" />
                    <BitChoiceGroupOption Text="TopCenter" Value="BitSnackBarPosition.TopCenter" />
                    <BitChoiceGroupOption Text="TopRight" Value="BitSnackBarPosition.TopRight" />
                    <BitChoiceGroupOption Text="BottomLeft" Value="BitSnackBarPosition.BottomLeft" />
                    <BitChoiceGroupOption Text="BottomCenter" Value="BitSnackBarPosition.BottomCenter" />
                    <BitChoiceGroupOption Text="BottomRight" Value="BitSnackBarPosition.BottomRight" />
                </BitChoiceGroup>

                <BitChoiceGroup @bind-Value="direction" Label="Direction" TItem="BitChoiceGroupOption<BitDir>" TValue="BitDir">
                    <BitChoiceGroupOption Text="LTR" Value="BitDir.Ltr" />
                    <BitChoiceGroupOption Text="RTL" Value="BitDir.Rtl" />
                    <BitChoiceGroupOption Text="Auto" Value="BitDir.Auto" />
                </BitChoiceGroup>

                <div>
                    <BitTextField @bind-Value="basicSnackBarTitle" Label="Title" DefaultValue="Title" />
                    <BitTextField @bind-Value="basicSnackBarBody" Label="Body" IsMultiline="true" Rows="6" DefaultValue="This is a body!" />
                </div>

                <div>
                    <BitToggle @bind-Value="basicSnackBarAutoDismiss" Label="Auto Dismiss" />
                    <BitNumberField @bind-Value="basicSnackBarDismissSeconds" Step="1" Min="1" Label="Dismiss Time (based on second)" />
                </div>
            </div>
            <BitButton Style="margin-top: 20px;" OnClick="OpenBasicSnackBar">Show</BitButton>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Templates" RazorCode="@example2RazorCode" CsharpCode="@example2CsharpCode" Id="example2">
        <ExamplePreview>
            <div class="example-box">
                <div>
                    <BitSnackBar @ref="dismissIconNameRef" DismissIconName="@BitIconName.Go" />
                    <BitButton OnClick="OpenDismissIconName">Dismiss Icon Name</BitButton>
                </div>

                <div>
                    <BitSnackBar @ref="titleTemplateRef" AutoDismiss="false">
                        <TitleTemplate Context="title">
                            <div style="display: flex; flex-direction: row; gap: 10px;">
                                <span>@title</span>
                                <BitProgress Thickness="20" Style="width: 40px;" Indeterminate />
                            </div>
                        </TitleTemplate>
                    </BitSnackBar>
                    <BitButton OnClick="OpenTitleTemplate">Title Template</BitButton>
                </div>

                <div>
                    <BitSnackBar @ref="bodyTemplateRef" AutoDismiss="false">
                        <BodyTemplate Context="body">
                            <div style="display: flex; flex-flow: column nowrap; gap: 5px;">
                                <span style="font-size: 12px; margin-bottom: 5px;">@body</span>
                                <div style="display: flex; gap: 10px;">
                                    <BitButton OnClick="@(() => bodyTemplateAnswer = "Yes")">Yes</BitButton>
                                    <BitButton OnClick="@(() => bodyTemplateAnswer = "No")">No</BitButton>
                                </div>
                                <span>Answer: @bodyTemplateAnswer</span>
                            </div>
                        </BodyTemplate>
                    </BitSnackBar>
                    <BitButton OnClick="OpenBodyTemplate">Body Template</BitButton>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Style & Class" RazorCode="@example3RazorCode" CsharpCode="@example3CsharpCode" Id="example3">
        <ExamplePreview>
            <div class="example-box column">
                <div>
                    <BitLabel>Item's Style & Class:</BitLabel>
                    <div>
                        <BitSnackBar @ref="snackBarStyleRef" />
                        <BitButton OnClick="OpenSnackBarStyle">Custom style</BitButton>
                    </div>
                    <br />
                    <div>
                        <BitSnackBar @ref="snackBarClassRef" />
                        <BitButton OnClick="OpenSnackBarClass">Custom style</BitButton>
                    </div>
                </div>
                <br />
                <div>
                    <BitLabel>Styles & Classes:</BitLabel>
                    <div>
                        <BitSnackBar @ref="snackBarStylesRef"
                                     Styles="@(new() { Container = "width: 16rem; background-color: purple;",
                                                       Header = "background-color: rebeccapurple; padding: 0.2rem;" })" />
                        <BitButton OnClick="OpenSnackBarStyles">Custom styles</BitButton>
                    </div>
                    <br />
                    <div>
                        <BitSnackBar @ref="snackBarClassesRef" 
                                     Classes="@(new() { Container = "custom-container",
                                                        ProgressBar = "custom-progress" })" />
                        <BitButton OnClick="OpenSnackBarClasses">Custom classes</BitButton>
                    </div>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code {
    private BitSnackBar basicSnackBarRef = new();
    private BitDir direction;
    private BitSnackBarType basicSnackBarType = BitSnackBarType.Info;
    private BitSnackBarPosition basicSnackBarPosition = BitSnackBarPosition.BottomRight;
    private string basicSnackBarTitle = string.Empty;
    private string basicSnackBarBody = string.Empty;
    private bool basicSnackBarAutoDismiss = true;
    private int basicSnackBarDismissSeconds = 3;

    private async Task OpenBasicSnackBar()
    {
        await basicSnackBarRef.Show(basicSnackBarTitle, basicSnackBarBody, basicSnackBarType);
    }


    private BitSnackBar dismissIconNameRef = new();
    private BitSnackBar titleTemplateRef = new();
    private BitSnackBar bodyTemplateRef = new();

    private string? bodyTemplateAnswer;

    private async Task OpenDismissIconName()
    {
        await dismissIconNameRef.Success("This is title", "This is body");
    }

    private async Task OpenTitleTemplate()
    {
        await titleTemplateRef.Warning("This is title", "This is body");
    }

    private async Task OpenBodyTemplate()
    {
        await bodyTemplateRef.Error("This is title", "This is body");
    }


    private BitSnackBar snackBarStyleRef = new();
    private BitSnackBar snackBarClassRef = new();
    private BitSnackBar snackBarStylesRef = new();
    private BitSnackBar snackBarClassesRef = new();

    private async Task OpenSnackBarStyle()
    {
        await snackBarClassRef.Show("This is title", "This is body", cssStyle: "background-color: dodgerblue; border-radius: 0.5rem;");
    }

    private async Task OpenSnackBarClass()
    {
        await snackBarStyleRef.Show("This is title", "This is body", cssClass: "custom-class");
    }

    private async Task OpenSnackBarStyles()
    {
        await snackBarStylesRef.Show("This is title", "This is body");
    }

    private async Task OpenSnackBarClasses()
    {
        await snackBarClassesRef.Show("This is title", "This is body");
    }
}