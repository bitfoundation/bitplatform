@page "/components/fileupload"
@page "/components/file-upload"

<PageOutlet Url="components/fileupload"
            Title="FileUpload"
            Description="fileupload component of the bit BlazorUI components" />

<ComponentDemo ComponentName="FileUpload"
               ComponentDescription="BitFileUpload component wraps the HTML file input element(s) and uploads them to a given URL. The files can be removed by specifying the URL they have been uploaded. Moreover, it provides several other options including single or multiple or automatic file uploading. By automatic, it means the files can be automatically uploaded after being selected. It is possible to specify a maximum size for each file if need be. Additionally, by specifying file extensions, the files can be restricted to certain types."
               ComponentParameters="componentParameters"
               ComponentSubClasses="componentSubClasses"
               ComponentSubEnums="componentSubEnums">

    <ComponentExampleBox Title="Basic" RazorCode="@example1RazorCode" CsharpCode="@example1CsharpCode" Id="example1">
        <ExamplePreview>
            <div>Files can be uploaded automatically after selecting them.</div><br />
            <BitFileUpload Label="Select or drag and drop files" UploadUrl="@UploadUrl" />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Auto & Multiple" RazorCode="@example2RazorCode" CsharpCode="@example2CsharpCode" Id="example2">
        <ExamplePreview>
            <div>Multiple files can be selected to upload automatically.</div><br />
            <BitFileUpload Label="Select or drag and drop files"
                           AutoUpload
                           MultiSelect
                           UploadUrl="@UploadUrl" />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="MaxSize" RazorCode="@example3RazorCode" CsharpCode="@example3CsharpCode" Id="example3">
        <ExamplePreview>
            <div>Multiple files can be selected to upload automatically with limited size.</div><br />
            <BitFileUpload Label="Select or drag and drop files"
                           AutoUpload
                           MultiSelect
                           UploadUrl="@UploadUrl"
                           MaxSize="1024 * 1024 * 1" />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="AllowedExtensions" RazorCode="@example4RazorCode" CsharpCode="@example4CsharpCode" Id="example4">
        <ExamplePreview>
            <div>Single or multiple file uploading limited only by file extensions, which in this case the allowed file extensions include gif, jpg and mp4.</div><br />
            <BitFileUpload Label="Select or drag and drop files"
                           MultiSelect
                           UploadUrl="@UploadUrl"
                           AllowedExtensions="@(new List<string> { ".gif",".jpg",".mp4" })" />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Removable" RazorCode="@example5RazorCode" CsharpCode="@example5CsharpCode" Id="example5">
        <ExamplePreview>
            <div>Single or multiple file uploading with remove functionality enabled.</div><br />
            <BitFileUpload Label="Select or drag and drop files"
                           MultiSelect
                           ShowRemoveButton
                           UploadUrl="@UploadUrl"
                           RemoveUrl="@RemoveUrl" />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Events" RazorCode="@example6RazorCode" CsharpCode="@example6CsharpCode" Id="example6">
        <ExamplePreview>
            <div>Multiple files can be selected to upload automatically with calling all upload complete event.</div><br />
            <BitFileUpload Label="Select or drag and drop files"
                           AutoUpload
                           MultiSelect
                           UploadUrl="@UploadUrl"
                           OnAllUploadsComplete="@(() => onAllUploadsCompleteText = "All File Uploaded")"
                           OnUploading="@(info => info.HttpHeaders = new Dictionary<string, string> { {"key1", "value1"} })" />
            <div>@onAllUploadsCompleteText</div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Configuring http request" RazorCode="@example7RazorCode" CsharpCode="@example7CsharpCode" Id="example7">
        <ExamplePreview>
            <div>Multiple files can be selected to upload and remove with custom http headers and query strings.</div><br />
            <BitFileUpload Label="Select or drag and drop files"
                           MultiSelect
                           UploadUrl="@UploadUrl"
                           RemoveUrl="@RemoveUrl"
                           UploadRequestQueryStrings="@(new Dictionary<string, string>{ {"qs1", "qsValue1" } })"
                           UploadRequestHttpHeaders="@(new Dictionary<string, string>{ {"header1", "value1" } })"
                           RemoveRequestQueryStrings="@(new Dictionary<string, string>{ {"qs2", "qsValue2" } })"
                           RemoveRequestHttpHeaders="@(new Dictionary<string, string>{ {"header2", "value2" } })" />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Chunked" RazorCode="@example8RazorCode" CsharpCode="@example8CsharpCode" Id="example8">
        <ExamplePreview>
            <div>Files can be uploaded in chunks.</div><br />
            <BitFileUpload Label="Select or drag and drop files"
                           ChunkedUpload
                           UploadUrl="@ChunkedUploadUrl" />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Templates" RazorCode="@example9RazorCode" CsharpCode="@example9CsharpCode" Id="example9">
        <ExamplePreview>
            <div>Use custom template for file upload.</div><br />
            <BitFileUpload @ref="bitFileUpload"
                           Label=""
                           UploadUrl="@UploadUrl"
                           RemoveUrl="@RemoveUrl"
                           MaxSize="1024 * 1024 * 2"
                           SuccessfulUploadMessage="File upload succeeded"
                           NotAllowedExtensionErrorMessage="File type not supported"
                           AllowedExtensions="@(new List<string> { ".jpeg", ".jpg", ".png", ".bpm" })">
                <LabelTemplate>
                    @if (FileUploadIsEmpty())
                    {
                        <div class="browse-file">
                            <div class="browse-file-header">
                                <i class="bit-icon bit-icon--CloudUpload" />
                                <div>
                                    Drag and drop or
                                </div>
                                <div>
                                    <strong>
                                        Browse file
                                    </strong>
                                </div>
                            </div>

                            <div class="browse-file-footer">
                                <div>
                                    Max file size: 2 MB
                                </div>
                                <div>
                                    Supported file types: jpg, jpeg, png, bpm
                                </div>
                            </div>
                        </div>
                    }
                </LabelTemplate>
                <FileViewTemplate Context="file">
                    @if (file.Status != BitFileUploadStatus.Removed)
                    {
                        <div class="file-list">
                            <div class="file-info">
                                <div class="file-info-ico">
                                    <i class="bit-icon bit-icon--FileImage" />
                                </div>
                                <div class="file-info-data">
                                    <div class="file-info-title">
                                        <div class="file-info-name">@file.Name</div>
                                        <div class="file-info-btns">
                                            <label for="@bitFileUpload.InputId"><i class="bit-icon bit-icon--CloudUpload upload-ico" /></label>
                                            <i class="bit-icon bit-icon--ChromeClose remove-ico" @onclick="HandleRemoveOnClick" />
                                        </div>
                                    </div>
                                    @if (file.Status is BitFileUploadStatus.InProgress or BitFileUploadStatus.Pending)
                                    {
                                        var fileUploadPercent = GetFileUploadPercent(file);
                                        <div class="file-info-subtitle">@GetFileUploadSize(file) - @fileUploadPercent%</div>
                                        <div class="file-info-progressbar-container">
                                            <div class="file-info-progressbar" role="progressbar" style="width:@fileUploadPercent%;" aria-valuemin="0" aria-valuemax="100" aria-valuenow="@fileUploadPercent"></div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="@(file.Status == BitFileUploadStatus.Completed ? "file-info-s-msg" : "file-info-e-msg")">@GetUploadMessageStr(file)</div>
                                    }
                                </div>
                            </div>

                            <div class="file-list-footer">
                                <div>
                                    Max file size: 2 MB
                                </div>
                                <div>
                                    Supported file types: jpg, jpeg, png, bpm
                                </div>
                            </div>
                        </div>
                    }
                </FileViewTemplate>
            </BitFileUpload>
            <br />
            <BitButton OnClick="HandleUploadOnClick">Upload</BitButton>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Public API" RazorCode="@example10RazorCode" CsharpCode="@example10CsharpCode" Id="example10">
        <ExamplePreview>
            <div>Use a custom method for the open file selection dialog.</div><br />
            <BitFileUpload @ref="bitFileUploadWithBrowseFile"
                           Label=""
                           UploadUrl="@UploadUrl"
                           RemoveUrl="@RemoveUrl" />
            <br />
            <BitButton OnClick="HandleBrowseFileOnClick">Browse file</BitButton>
        </ExamplePreview>
    </ComponentExampleBox>

</ComponentDemo>