<DemoExample Title="Basic" RazorCode="@example1RazorCode" CsharpCode="@example1CsharpCode" Id="example1">
    <div class="example-content">
        <BitChoiceGroup Label="Basic Customs"
                        Items="basicCustoms"
                        DefaultValue="basicCustoms[1].ItemValue"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />

        <BitChoiceGroup Label="NoCircle"
                        NoCircle
                        Items="basicCustoms"
                        DefaultValue="basicCustoms[1].ItemValue"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
    </div>
</DemoExample>

<DemoExample Title="Disabled" RazorCode="@example2RazorCode" CsharpCode="@example2CsharpCode" Id="example2">
    <div>Illustrates how to disable the entire BitChoiceGroup and individual items.</div>
    <br />
    <div class="example-content">
        <BitChoiceGroup Label="Disabled ChoiceGroup"
                        IsEnabled="false"
                        Items="basicCustoms"
                        DefaultValue="@("A")"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />

        <BitChoiceGroup Label="ChoiceGroup with Disabled Custom"
                        Items="disabledCustoms"
                        DefaultValue="@("A")"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     Value = { Selector = i => i.ItemValue },
                                                     IsEnabled = { Selector = i => i.IsDisabled is false } })" />
    </div>
</DemoExample>

<DemoExample Title="Images and Icons" RazorCode="@example3RazorCode" CsharpCode="@example3CsharpCode" Id="example3">
    <div>Showcases BitChoiceGroup with image and icon items.</div>
    <br /><br />
    <div class="example-content">
        <BitChoiceGroup Label="Image Customs"
                        Items="imageCustoms"
                        DefaultValue="@("Bar")"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) },
                                                     Value = { Name = nameof(Order.ItemValue) },
                                                     ImageSrc = { Name = nameof(Order.ImageAddress) },
                                                     ImageAlt = { Name = nameof(Order.ImageDescription) },
                                                     ImageSize = { Name = nameof(Order.ImageSize) },
                                                     SelectedImageSrc = { Name = nameof(Order.SelectedImageAddress) }})" />

        <BitChoiceGroup Label="Icon Customs"
                        Items="iconCustoms"
                        DefaultValue="@("Day")"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     Value = { Selector = i => i.ItemValue },
                                                     IconName = { Selector = i => i.IconName },
                                                     IsEnabled = { Selector = i => i.IsDisabled is false } })" />
    </div>
    <br /><br /><br /><br />
    <div>Inline:</div><br />
    <div class="example-content">
        <BitChoiceGroup Label="Image Customs"
                        Inline
                        Items="inlineImageCustoms"
                        DefaultValue="@("Bar")"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) },
                                                     Value = { Name = nameof(Order.ItemValue) },
                                                     ImageSrc = { Name = nameof(Order.ImageAddress) },
                                                     ImageAlt = { Name = nameof(Order.ImageDescription) },
                                                     ImageSize = { Name = nameof(Order.ImageSize) },
                                                     SelectedImageSrc = { Name = nameof(Order.SelectedImageAddress) }})" />

        <BitChoiceGroup Label="Icon Customs"
                        Inline
                        Items="iconCustoms"
                        DefaultValue="@("Day")"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     Value = { Selector = i => i.ItemValue },
                                                     IconName = { Selector = i => i.IconName },
                                                     IsEnabled = { Selector = i => i.IsDisabled is false } })" />
    </div>
</DemoExample>

<DemoExample Title="Horizontal" RazorCode="@example4RazorCode" CsharpCode="@example4CsharpCode" Id="example4">
    <div>Displays the BitChoiceGroup component in a horizontal layout, demonstrating various configurations.</div>
    <br />
    <div class="example-content column">
        <BitChoiceGroup Label="Basic"
                        Horizontal
                        DefaultValue="@("A")"
                        Items="basicCustoms"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />

        <BitChoiceGroup Label="Disabled"
                        Horizontal
                        IsEnabled="false"
                        DefaultValue="@("A")"
                        Items="basicCustoms"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name }, Value = { Selector = i => i.ItemValue } })" />

        <BitChoiceGroup Label="Image"
                        Horizontal
                        DefaultValue="@("Bar")"
                        Items="imageCustoms"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) },
                                                     Value = { Name = nameof(Order.ItemValue) },
                                                     ImageSrc = { Name = nameof(Order.ImageAddress) },
                                                     ImageAlt = { Name = nameof(Order.ImageDescription) },
                                                     ImageSize = { Name = nameof(Order.ImageSize) },
                                                     SelectedImageSrc = { Name = nameof(Order.SelectedImageAddress) }})" />

        <BitChoiceGroup Label="Icon"
                        Horizontal
                        DefaultValue="@("Day")"
                        Items="iconCustoms"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     Value = { Selector = i => i.ItemValue },
                                                     IconName = { Selector = i => i.IconName },
                                                     IsEnabled = { Selector = i => i.IsDisabled is false } })" />
    </div>
</DemoExample>

<DemoExample Title="LabelTemplate" RazorCode="@example5RazorCode" CsharpCode="@example5CsharpCode" Id="example5">
    <div>Demonstrates how to customize the label of the BitChoiceGroup using a template.</div>
    <br />
    <BitChoiceGroup Items="basicCustoms"
                    DefaultValue="@("A")"
                    NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })">
        <LabelTemplate>
            <div class="custom-label">
                Custom label <BitIcon IconName="@BitIconName.Filter" />
            </div>
        </LabelTemplate>
    </BitChoiceGroup>
</DemoExample>

<DemoExample Title="Item templates" RazorCode="@example6RazorCode" CsharpCode="@example6CsharpCode" Id="example6">
    <div>Illustrates how to customize the appearance of BitChoiceGroup options using item templates.</div>
    <br />
    <div class="example-content">
        <BitChoiceGroup Label="ItemPrefixTemplate" Items="basicCustoms" DefaultValue="@string.Empty"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name},
                                                     Value = { Selector = i => i.ItemValue },
                                                     Index = nameof(Order.Idx) })">
            <ItemPrefixTemplate Context="item">
                @(item.Idx + 1).&nbsp;
            </ItemPrefixTemplate>
        </BitChoiceGroup>

        <BitChoiceGroup Label="ItemLabelTemplate" @bind-Value="itemLabelTemplateValue"
                        Items="itemTemplateCustoms"
                        NameSelectors="@(new() { Value = { Selector = i => i.ItemValue } })">
            <ItemLabelTemplate Context="custom">
                <div class="custom-container @(itemLabelTemplateValue == custom.ItemValue ? "selected" : string.Empty)">
                    <BitIcon IconName="@custom.IconName" />
                    <span>@custom.Name</span>
                </div>
            </ItemLabelTemplate>
        </BitChoiceGroup>
    </div>
    <br /><br /><br />
    <div class="example-content">
        <BitChoiceGroup Label="ItemTemplate" @bind-Value="itemTemplateValue"
                        Items="itemTemplateCustoms"
                        NameSelectors="@(new() { Value = { Name = nameof(Order.ItemValue) } })">
            <ItemTemplate Context="custom">
                <div class="custom-container @(itemTemplateValue == custom.ItemValue ? "selected" : string.Empty)">
                    <div class="custom-circle"></div>
                    <span>@custom.Name</span>
                </div>
            </ItemTemplate>
        </BitChoiceGroup>

        <BitChoiceGroup Label="Item's Template" Items="itemTemplateCustoms2" @bind-Value="itemTemplateValue2"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) },
                                                     Value = { Name = nameof(Order.ItemValue) },
                                                     Template = { Name = nameof(Order.Fragment) } })" />
    </div>
</DemoExample>

<DemoExample Title="Binding" RazorCode="@example7RazorCode" CsharpCode="@example7CsharpCode" Id="example7">
    <div>Shows how to use one-way and two-way data binding with BitChoiceGroup.</div>
    <br />
    <div class="example-content">
        <div>
            <BitChoiceGroup Label="One-way" Value="@oneWayValue"
                            Items="basicCustoms"
                            NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
            <br />
            <BitTextField @bind-Value="oneWayValue" />
        </div>
        <div>
            <BitChoiceGroup Label="Two-way" @bind-Value="twoWayValue"
                            Items="basicCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name }, Value = { Selector = i => i.ItemValue } })" />
            <br />
            <BitTextField @bind-Value="twoWayValue" />
        </div>
    </div>
</DemoExample>

<DemoExample Title="Validation" RazorCode="@example8RazorCode" CsharpCode="@example8CsharpCode" Id="example8">
    <div>Shows how to use data annotations for validating the selected value in BitChoiceGroup.</div>
    <br />
    @if (string.IsNullOrEmpty(successMessage))
    {
        <EditForm Model="@validationModel" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
            <DataAnnotationsValidator />

            <BitChoiceGroup @bind-Value="validationModel.Value"
                            Items="basicCustoms"
                            NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
            <ValidationMessage For="@(() => validationModel.Value)" />

            <br />

            <BitButton ButtonType="BitButtonType.Submit">Submit</BitButton>
        </EditForm>
    }
    else
    {
        <BitMessage Color="BitColor.Success">@successMessage</BitMessage>
    }
    <br />
    <BitButton Variant="BitVariant.Outline" OnClick="() => { validationModel = new(); successMessage=string.Empty; }">Reset</BitButton>
</DemoExample>

<DemoExample Title="Size" RazorCode="@example9RazorCode" CsharpCode="@example9CsharpCode" Id="example9">
    <div>Varying sizes for BitChoiceGroup tailored to meet diverse design needs, ensuring flexibility and visual hierarchy within your interface.</div>
    <br /><br />
    <div class="example-content column">
        <BitChoiceGroup Size="BitSize.Small"
                        Label="Small"
                        Items="basicCustoms"
                        DefaultValue="basicCustoms[1].ItemValue"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" Horizontal />

        <BitChoiceGroup Size="BitSize.Medium"
                        Label="Medium"
                        Items="basicCustoms"
                        DefaultValue="basicCustoms[1].ItemValue"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" Horizontal />

        <BitChoiceGroup Size="BitSize.Large"
                        Label="Large"
                        Items="basicCustoms"
                        DefaultValue="basicCustoms[1].ItemValue"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" Horizontal />
    </div>
    <br /><br />
    <div class="example-content column">
        <BitChoiceGroup Size="BitSize.Small"
                        Label="Small"
                        Items="iconCustoms"
                        DefaultValue="@("Day")"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                 Value = { Selector = i => i.ItemValue },
                                                 IconName = { Selector = i => i.IconName },
                                                 IsEnabled = { Selector = i => i.IsDisabled is false } })" Horizontal Inline />

        <BitChoiceGroup Size="BitSize.Medium"
                        Label="Medium"
                        Items="iconCustoms"
                        DefaultValue="@("Day")"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                 Value = { Selector = i => i.ItemValue },
                                                 IconName = { Selector = i => i.IconName },
                                                 IsEnabled = { Selector = i => i.IsDisabled is false } })" Horizontal Inline />

        <BitChoiceGroup Size="BitSize.Large"
                        Label="Large"
                        Items="iconCustoms"
                        DefaultValue="@("Day")"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                 Value = { Selector = i => i.ItemValue },
                                                 IconName = { Selector = i => i.IconName },
                                                 IsEnabled = { Selector = i => i.IsDisabled is false } })" Horizontal Inline />
    </div>
    <br /><br />
    <div class="example-content column">
        <BitChoiceGroup Size="BitSize.Small"
                        Label="Small"
                        Items="iconCustoms"
                        DefaultValue="@("Day")"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                 Value = { Selector = i => i.ItemValue },
                                                 IconName = { Selector = i => i.IconName },
                                                 IsEnabled = { Selector = i => i.IsDisabled is false } })" Horizontal />

        <BitChoiceGroup Size="BitSize.Medium"
                        Label="Medium"
                        Items="iconCustoms"
                        DefaultValue="@("Day")"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                 Value = { Selector = i => i.ItemValue },
                                                 IconName = { Selector = i => i.IconName },
                                                 IsEnabled = { Selector = i => i.IsDisabled is false } })" Horizontal />

        <BitChoiceGroup Size="BitSize.Large"
                        Label="Large"
                        Items="iconCustoms"
                        DefaultValue="@("Day")"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                 Value = { Selector = i => i.ItemValue },
                                                 IconName = { Selector = i => i.IconName },
                                                 IsEnabled = { Selector = i => i.IsDisabled is false } })" Horizontal />
    </div>
</DemoExample>

<DemoExample Title="Color" RazorCode="@example10RazorCode" CsharpCode="@example10CsharpCode" Id="example10">
        <div>Offering a range of specialized color variants with Primary being the default, providing visual cues for specific actions or states within your application.</div>
        <br />
        <div>
            <div class="example-box">
                <BitChoiceGroup Color="BitColor.Primary" 
                                Label="Primary" 
                                Horizontal
                                Items="basicCustoms"
                                DefaultValue="basicCustoms[1].ItemValue"
                                NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
            </div>
            <br />
            <div class="example-box">
                <BitChoiceGroup Color="BitColor.Secondary" 
                                Label="Secondary" 
                                Horizontal
                                Items="basicCustoms"
                                DefaultValue="basicCustoms[1].ItemValue"
                                NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
            </div>
            <br />
            <div class="example-box">
                <BitChoiceGroup Color="BitColor.Tertiary" 
                                Label="Tertiary" 
                                Horizontal
                                Items="basicCustoms"
                                DefaultValue="basicCustoms[1].ItemValue"
                                NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
            </div>
            <br />
            <div class="example-box">
                <BitChoiceGroup Color="BitColor.Info" 
                                Label="Info" 
                                Horizontal
                                Items="basicCustoms"
                                DefaultValue="basicCustoms[1].ItemValue"
                                NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
            </div>
            <br />
            <div class="example-box">
                <BitChoiceGroup Color="BitColor.Success" 
                                Label="Success" 
                                Horizontal
                                Items="basicCustoms"
                                DefaultValue="basicCustoms[1].ItemValue"
                                NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
            </div>
            <br />
            <div class="example-box">
                <BitChoiceGroup Color="BitColor.Warning" 
                                Label="Warning" 
                                Horizontal
                                Items="basicCustoms"
                                DefaultValue="basicCustoms[1].ItemValue"
                                NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
            </div>
            <br />
            <div class="example-box">
                <BitChoiceGroup Color="BitColor.SevereWarning" 
                                Label="SevereWarning" 
                                Horizontal
                                Items="basicCustoms"
                                DefaultValue="basicCustoms[1].ItemValue"
                                NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
            </div>
            <br />
            <div class="example-box">
                <BitChoiceGroup Color="BitColor.Error" 
                                Label="Error" 
                                Horizontal
                                Items="basicCustoms"
                                DefaultValue="basicCustoms[1].ItemValue"
                                NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
            </div>
            <br /><br />
            <div style="background:var(--bit-clr-fg-sec);color:var(--bit-clr-bg-sec);padding:1rem">
                <div class="example-box">
                    <BitChoiceGroup Color="BitColor.PrimaryBackground" 
                                    Label="PrimaryBackground" 
                                    Horizontal
                                    Items="basicCustoms"
                                    DefaultValue="basicCustoms[1].ItemValue"
                                    NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
                </div>
                <br />
                <div class="example-box">
                    <BitChoiceGroup Color="BitColor.SecondaryBackground" 
                                    Label="SecondaryBackground" 
                                    Horizontal
                                    Items="basicCustoms"
                                    DefaultValue="basicCustoms[1].ItemValue"
                                    NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
                </div>
                <br />
                <div class="example-box">
                    <BitChoiceGroup Color="BitColor.TertiaryBackground" 
                                    Label="TertiaryBackground" 
                                    Horizontal
                                    Items="basicCustoms"
                                    DefaultValue="basicCustoms[1].ItemValue"
                                    NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
                </div>
            </div>
            <br />
            <div style="padding:1rem">
                <div class="example-box">
                    <BitChoiceGroup Color="BitColor.PrimaryForeground" 
                                    Label="PrimaryForeground" 
                                    Horizontal
                                    Items="basicCustoms"
                                    DefaultValue="basicCustoms[1].ItemValue"
                                    NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
                </div>
                <br />
                <div class="example-box">
                    <BitChoiceGroup Color="BitColor.SecondaryForeground" 
                                    Label="SecondaryForeground" 
                                    Horizontal
                                    Items="basicCustoms"
                                    DefaultValue="basicCustoms[1].ItemValue"
                                    NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
                </div>
                <br />
                <div class="example-box">
                    <BitChoiceGroup Color="BitColor.TertiaryForeground" 
                                    Label="TertiaryForeground" 
                                    Horizontal
                                    Items="basicCustoms"
                                    DefaultValue="basicCustoms[1].ItemValue"
                                    NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
                </div>
            </div>
            <br />
            <div style="padding:1rem">
                <div class="example-box">
                    <BitChoiceGroup Color="BitColor.PrimaryBorder" 
                                    Label="PrimaryBorder" 
                                    Horizontal
                                    Items="basicCustoms"
                                    DefaultValue="basicCustoms[1].ItemValue"
                                    NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
                </div>
                <br />
                <div class="example-box">
                    <BitChoiceGroup Color="BitColor.SecondaryBorder" 
                                    Label="SecondaryBorder" 
                                    Horizontal
                                    Items="basicCustoms"
                                    DefaultValue="basicCustoms[1].ItemValue"
                                    NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
                </div>
                <br />
                <div class="example-box">
                    <BitChoiceGroup Color="BitColor.TertiaryBorder" 
                                    Label="TertiaryBorder" 
                                    Horizontal
                                    Items="basicCustoms"
                                    DefaultValue="basicCustoms[1].ItemValue"
                                    NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />
                </div>
            </div>
        </div>
    </DemoExample>

<DemoExample Title="Style & Class" RazorCode="@example11RazorCode" CsharpCode="@example11CsharpCode" Id="example11">
    <div>Explores styling and class customization for BitChoiceGroup, including component styles, custom classes, and detailed style items.</div>
    <br /><br />
    <div>Component's Style & Class:</div>
    <br />
    <div class="example-content column">
        <BitChoiceGroup Label="Styled ChoiceGroup"
                        Items="basicCustoms"
                        DefaultValue="basicCustoms[1].ItemValue"
                        Style="margin-inline: 16px; text-shadow: red 0 0 8px;"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />

        <BitChoiceGroup Label="Classed ChoiceGroup"
                        Items="basicCustoms"
                        DefaultValue="basicCustoms[1].ItemValue"
                        Class="custom-class"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name }, Value = { Selector = i => i.ItemValue } })" />
    </div>
    <br /><br /><br /><br />
    <div>Item's Style & Class:</div>
    <br />
    <div class="example-content column">
        <BitChoiceGroup Items="itemStyleClassCustoms"
                        DefaultValue="itemStyleClassCustoms[1].ItemValue"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) },
                                                     Value = { Name = nameof(Order.ItemValue) },
                                                     Class = { Name = nameof(Order.Class) },
                                                     Style = { Name = nameof(Order.Style) } })" />
    </div>
    <br /><br /><br /><br />
    <div><b>Styles</b> & <b>Classes</b>:</div>
    <br />
    <div class="example-content column">
        <BitChoiceGroup Label="Styles"
                        Items="basicCustoms"
                        DefaultValue="basicCustoms[1].ItemValue"
                        Styles="@(new() { Root = "margin-inline: 16px; --item-background: #d3d3d347; --item-border: 1px solid gray;",
                                              ItemLabel = "width: 100%; cursor: pointer;",
                                              ItemChecked = "--item-background: #87cefa24; --item-border: 1px solid dodgerblue;",
                                              ItemContainer = "padding: 8px; border-radius: 2px; background-color: var(--item-background); border: var(--item-border);" })"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />

        <BitChoiceGroup Label="Classes"
                        Items="basicCustoms"
                        DefaultValue="basicCustoms[1].ItemValue"
                        Classes="@(new() { Root = "custom-root",
                                               ItemText = "custom-text",
                                               ItemChecked = "custom-checked",
                                               ItemLabelWrapper = "custom-label-wrapper" })"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name }, Value = { Selector = i => i.ItemValue } })" />
    </div>
</DemoExample>

<DemoExample Title="RTL" RazorCode="@example12RazorCode" CsharpCode="@example12CsharpCode" Id="example12">
    <div>Use BitChoiceGroup in right-to-left (RTL).</div>
    <br />
    <div dir="rtl" class="example-content">
        <BitChoiceGroup Label="ساده"
                        Dir="BitDir.Rtl"
                        DefaultValue="@("A")"
                        Items="rtlCustoms"
                        NameSelectors="@(new() { Text = { Name = nameof(Order.Name) }, Value = { Name = nameof(Order.ItemValue) } })" />

        <BitChoiceGroup Label="غیرفعال"
                        Dir="BitDir.Rtl"
                        IsEnabled="false"
                        DefaultValue="@("A")"
                        Items="rtlCustoms"
                        NameSelectors="@(new() { Text = { Selector = i => i.Name }, Value = { Selector = i => i.ItemValue } })" />
    </div>
</DemoExample>

@code {
    private List<Order> itemTemplateCustoms2 = default!;

    protected override void OnInitialized()
    {
        itemTemplateCustoms2 = new()
        {
            new()
            {
                Name = "Day",
                ItemValue = "Day",
                Fragment = (item => @<div class="custom-container @(itemTemplateValue2 == item.ItemValue ? "selected" : "")">
        <div class="custom-circle" />
        <span style="color:red">@item.Name</span>
    </div>)
            },
            new()
            {
                Name = "Week",
                ItemValue = "Week",
                Fragment = (item => @<div class="custom-container @(itemTemplateValue2 == item.ItemValue ? "selected" : "")">
        <div class="custom-circle" />
        <span style="color:green">@item.Name</span>
    </div>)
            },
            new()
            {
                Name = "Month",
                ItemValue = "Month",
                Fragment = (item => @<div class="custom-container @(itemTemplateValue2 == item.ItemValue ? "selected" : "")">
        <div class="custom-circle" />
        <span style="color:blue">@item.Name</span>
    </div>)
            }
        };
    }
}