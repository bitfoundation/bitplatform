<ComponentExampleBox Title="Basic" RazorCode="@example1RazorCode" CsharpCode="@example1CsharpCode" Id="example1">
    <ExamplePreview>
        <div class="example-content">
            <BitMenuButton Text="MenuButton" Items="basicItems" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Variant" RazorCode="@example2RazorCode" CsharpCode="@example2CsharpCode" Id="example2">
    <ExamplePreview>
        <div>The MenuButton offers three variants: Fill (default), Outline, and Text.</div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="Fill"
                           Items="basicItems"
                           Variant="BitVariant.Fill" />

            <BitMenuButton Text="Outline"
                           Items="basicItems"
                           Variant="BitVariant.Outline" />

            <BitMenuButton Text="Text"
                           Items="basicItems"
                           Variant="BitVariant.Text" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Fill button" RazorCode="@example3RazorCode" CsharpCode="@example3CsharpCode" Id="example3">
    <ExamplePreview>
        <div>
            Fill menu buttons are attention-grabbing, featuring a filled appearance. They're designed for essential actions at the core of your application.
        </div>
        <br />
        <div class="example-content">
            <div>
                <BitLabel>Default</BitLabel>
                <BitMenuButton Text="Items" Items="basicItems" />
            </div>
            <div>
                <BitLabel>Disabled</BitLabel>
                <BitMenuButton Text="Items" IsEnabled="false" Items="basicItems" />
            </div>
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Outline button" RazorCode="@example4RazorCode" CsharpCode="@example4CsharpCode" Id="example4">
    <ExamplePreview>
        <div>
            Outline menu buttons offer a moderate level of emphasis, suitable for important actions that aren't central to the application. They serve as a middle ground between Text menu buttons and the more prominent Fill menu buttons, providing flexibility in emphasis.
        </div>
        <br />
        <div class="example-content">
            <div>
                <BitLabel>Default</BitLabel>
                <BitMenuButton Text="Items"
                               Items="basicItems"
                               Variant="BitVariant.Outline" />
            </div>
            <div>
                <BitLabel>Disabled</BitLabel>
                <BitMenuButton Text="Items"
                               IsEnabled="false"
                               Items="basicItems"
                               Variant="BitVariant.Outline" />
            </div>
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Text button" RazorCode="@example5RazorCode" CsharpCode="@example5CsharpCode" Id="example5">
    <ExamplePreview>
        <div>
            Text menu buttons are best suited for understated actions, serving as a less prominent choice in various interface elements.
        </div>
        <br />
        <div class="example-content">
            <div>
                <BitLabel>Default</BitLabel>
                <BitMenuButton Text="Items"
                               Items="basicItems"
                               Variant="BitVariant.Text" />
            </div>
            <div>
                <BitLabel>Disabled</BitLabel>
                <BitMenuButton Text="Items"
                               IsEnabled="false"
                               Items="basicItems"
                               Variant="BitVariant.Text" />
            </div>
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Split" RazorCode="@example6RazorCode" CsharpCode="@example6CsharpCode" Id="example6">
    <ExamplePreview>
        <div>
            Explore the Split behavior of BitMenuButton, demonstrating buttons divided into two sections. One section triggers an action on click, while the other section opens a callout to reveal additional options.
        </div>
        <br />
        <div class="example-content">
            <BitMenuButton Split
                           Text="Fill"
                           Items="basicItems" />
            <BitMenuButton Split
                           Text="Outline"
                           Items="basicItems"
                           Variant="BitVariant.Outline" />
            <BitMenuButton Split
                           Text="Text"
                           Items="basicItems"
                           Variant="BitVariant.Text" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Sticky" RazorCode="@example7RazorCode" CsharpCode="@example7CsharpCode" Id="example7">
    <ExamplePreview>
        <div>
            Experience the Sticky functionality of BitMenuButton, showcasing a button that remains sticky after an item selection. The button displays the selected item and retains its state for continuous user interaction.
        </div>
        <br />
        <div class="example-content">
            <div>
                <BitLabel>Default</BitLabel>
                <BitMenuButton Sticky Items="basicItems" />
            </div>
            <div>
                <BitLabel>Split</BitLabel>
                <BitMenuButton Split Sticky
                               Items="basicItems"
                               Variant="BitVariant.Outline" />
            </div>
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Icons" RazorCode="@example8RazorCode" CsharpCode="@example8CsharpCode" Id="example8">
    <ExamplePreview>
        <div>
            Present BitMenuButton instances with customized icons, enriching the visual options for representing menu buttons.
        </div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="IconName"
                           Items="basicItemsIcon"
                           IconName="@BitIconName.Edit" />

            <BitMenuButton Split
                           Text="ChevronDownIcon"
                           Items="basicItemsIcon"
                           IconName="@BitIconName.Add"
                           Variant="BitVariant.Outline"
                           ChevronDownIcon="@BitIconName.DoubleChevronDown" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Events" RazorCode="@example9RazorCode" CsharpCode="@example9CsharpCode" Id="example9">
    <ExamplePreview>
        <div>
            Demonstrate BitMenuButton instances highlighting item click events, offering versatile interactions within the menu buttons.
        </div>
        <br />
        <div>
            <BitLabel>Non-Sticky</BitLabel>
            <div class="example-content">
                <BitMenuButton Text="Items"
                               Items="itemDisabledItems"
                               OnClick="(BitMenuButtonItem item) => exampleSelectedItem = item?.Key" />

                <BitMenuButton Split
                               Text="Items"
                               Items="basicItemsOnClick"
                               Variant="BitVariant.Outline"
                               OnClick="@((BitMenuButtonItem item) => exampleSelectedItem = "Main button clicked")" />
            </div>

            <BitLabel>Sticky</BitLabel>
            <div class="example-content">
                <BitMenuButton Sticky
                               Items="basicItemsOnClick"
                               OnClick="(BitMenuButtonItem item) => exampleSelectedItem = item?.Key" />

                <BitMenuButton Split Sticky
                               Items="itemDisabledItems"
                               Variant="BitVariant.Outline"
                               OnClick="(BitMenuButtonItem item) => exampleSelectedItem = item?.Key" />
            </div>
        </div>
        <div class="clicked-item">Clicked item: @exampleSelectedItem</div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Customization" RazorCode="@example10RazorCode" CsharpCode="@example10CsharpCode" Id="example10">
    <ExamplePreview>
        <div>
            Explore BitMenuButton's customization capabilities.
            <br />
            Note that if <strong>Sticky</strong> set to true, HeaderTemplate and Text will be ignored.
        </div>
        <br />
        <div class="example-content">
            <div>
                <BitLabel>HeaderTemplate</BitLabel>
                <BitMenuButton Items="basicItems">
                    <HeaderTemplate>
                        <div style="font-weight: bold; color: #d13438;">
                            Custom Header!
                        </div>
                    </HeaderTemplate>
                </BitMenuButton>
            </div>

            <div>
                <BitLabel>ItemTemplate</BitLabel>
                <BitMenuButton Split
                               Text="Items"
                               Items="itemTemplateItems"
                               Variant="BitVariant.Outline">
                    <ItemTemplate Context="item">
                        <div class="item-template-box">
                            <span style="color: @(item.Key == "add-key" ? "green" : item.Key == "edit-key" ? "yellow" : "red");">
                                @item.Text (@item.Key)
                            </span>
                        </div>
                    </ItemTemplate>
                </BitMenuButton>
            </div>

            <div>
                <BitLabel>Item's template</BitLabel>
                <BitMenuButton Text="Items" Items="itemTemplateItems2" />
            </div>
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Style & Class" RazorCode="@example11RazorCode" CsharpCode="@example11CsharpCode" Id="example11">
    <ExamplePreview>
        <div>
            Empower customization by overriding default styles and classes, allowing tailored design modifications to suit specific UI requirements.
        </div>
        <br />
        <div>Component's Style & Class:</div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="Styled Button"
                           Items="basicItems"
                           Style="width: 200px; height: 40px;" />

            <BitMenuButton Text="Classed Button"
                           Items="basicItems"
                           Class="custom-class" />
        </div>
        <br /><br /><br /><br />
        <div>Item's Style & Class:</div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="Item Styled & Classed Button" Items="itemStyleClassItems" />
        </div>
        <br /><br /><br /><br />
        <div><b>Styles</b> & <b>Classes</b>:</div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="Styles"
                           Items="basicItems"
                           IconName="@BitIconName.ExpandMenu"
                           Styles="@(new() { Icon = "color: red;",
                                             Text = "color: aqua;",
                                             ItemText = "color: dodgerblue; font-size: 11px;",
                                             Overlay = "background-color: var(--bit-clr-bg-overlay);" })" />

            <BitMenuButton Text="Classes"
                           Items="basicItems"
                           IconName="@BitIconName.ExpandMenu"
                           Variant="BitVariant.Outline"
                           Classes="@(new() { Icon = "custom-icon", Text = "custom-text" })" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Binding" RazorCode="@example12RazorCode" CsharpCode="@example12CsharpCode" Id="example12">
    <ExamplePreview>
        <div>
            This example demonstrates different ways to handle item selection and changes within the component.
        </div>
        <br />
        <div class="example-content">
            <div>
                <BitLabel>Default SelectedItem</BitLabel>
                <BitMenuButton Split Sticky
                               Items="basicItems"
                               DefaultSelectedItem="basicItems[1]" />
            </div>
        </div>
        <br /><br />
        <div class="example-content">
            <div>
                <BitLabel>Two-way SelectedItem</BitLabel>
                <BitMenuButton Sticky
                               Items="basicItems"
                               @bind-SelectedItem="twoWaySelectedItem"
                               Variant="BitVariant.Outline" />
                <br />
                <div>Selected item: <b>@twoWaySelectedItem.Text</b></div>
            </div>
        </div>
        <br /><br />
        <div class="example-content">
            <div>
                <BitLabel>OnChange</BitLabel>
                <BitMenuButton Split Sticky
                               Items="basicItems"
                               OnChange="(BitMenuButtonItem item) => changedSelectedItem = item" />
                <br />
                <div>Changed item: <b>@changedSelectedItem?.Text</b></div>
            </div>
        </div>
        <br /><br />
        <div class="example-content">
            <div>
                <BitLabel>IsSelected</BitLabel>
                <BitMenuButton Sticky
                               Items="isSelectedItems"
                               Variant="BitVariant.Outline" />
            </div>
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="RTL" RazorCode="@example13RazorCode" CsharpCode="@example13CsharpCode" Id="example13">
    <ExamplePreview>
        <div class="example-content" style="direction:rtl">
            <BitMenuButton Text="گزینه ها"
                           Dir="BitDir.Rtl"
                           Items="rtlItemsIcon"
                           IconName="@BitIconName.Edit" />

            <BitMenuButton Split
                           Text="گزینه ها"
                           Dir="BitDir.Rtl"
                           Items="rtlItemsIcon"
                           IconName="@BitIconName.Add"
                           Variant="BitVariant.Outline"
                           ChevronDownIcon="@BitIconName.DoubleChevronDown" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

@code {
    private List<BitMenuButtonItem> itemTemplateItems2 = new()
    {
        new()
        {
            Text = "Add",
            Key = "add-key",
            IconName = BitIconName.Add,
            Template = (item => @<div class="item-template-box" style="color:green">@item.Text (@item.Key)</div>)
        },
        new ()
        {
            Text = "Edit",
            Key = "edit-key",
            IconName = BitIconName.Edit,
            Template = (item => @<div class="item-template-box" style="color:yellow">@item.Text (@item.Key)</div>)
        },
        new()
        {
            Text = "Delete",
            Key = "delete-key",
            IconName = BitIconName.Delete,
            Template = (item => @<div class="item-template-box" style="color:red">@item.Text (@item.Key)</div>)
        }
    };
}