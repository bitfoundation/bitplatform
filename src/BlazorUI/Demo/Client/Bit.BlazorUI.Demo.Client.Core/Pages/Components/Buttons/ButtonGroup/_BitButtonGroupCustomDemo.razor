<ComponentExampleBox Title="Basic" RazorCode="@example1RazorCode" CsharpCode="@example1CsharpCode" Id="example1">
    <ExamplePreview>
        <div>The buttons can be grouped by putting them in a ButtonGroup component.</div>
        <br />
        <BitButtonGroup Items="basicCustoms" NameSelectors="nameSelector" />
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Variant" RazorCode="@example2RazorCode" CsharpCode="@example2CsharpCode" Id="example2">
    <ExamplePreview>
        <div>The ButtonGroup has three variants: Fill (default), Outline, and Text.</div>
        <br /><br />
        <div class="example-content">
            <div>Fill (default)</div>
            <BitButtonGroup Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Variant="BitVariant.Fill" Items="disabledCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" IsEnabled="false" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Outline</div>
            <BitButtonGroup Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Variant="BitVariant.Outline" Items="disabledCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" IsEnabled="false" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Text</div>
            <BitButtonGroup Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Variant="BitVariant.Text" Items="disabledCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" IsEnabled="false" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Color" RazorCode="@example3RazorCode" CsharpCode="@example3CsharpCode" Id="example3">
    <ExamplePreview>
        <div>Offering a range of specialized colors, providing visual cues for specific states within your application.</div>
        <br /><br />
        <div class="example-content">
            <div>Primary</div>
            <BitButtonGroup Color="BitColor.Primary" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Primary" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Primary" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Secondary</div>
            <BitButtonGroup Color="BitColor.Secondary" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Secondary" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Secondary" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Tertiary</div>
            <BitButtonGroup Color="BitColor.Tertiary" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Tertiary" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Tertiary" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Info</div>
            <BitButtonGroup Color="BitColor.Info" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Info" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Info" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Success</div>
            <BitButtonGroup Color="BitColor.Success" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Success" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Success" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Warning</div>
            <BitButtonGroup Color="BitColor.Warning" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Warning" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Warning" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>SevereWarning</div>
            <BitButtonGroup Color="BitColor.SevereWarning" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.SevereWarning" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.SevereWarning" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Error</div>
            <BitButtonGroup Color="BitColor.Error" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Error" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.Error" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div style="background:var(--bit-clr-fg-sec);padding:1rem">
            <div class="example-content">
                <div style="color:var(--bit-clr-bg-pri)">PrimaryBackground</div>
                <BitButtonGroup Color="BitColor.PrimaryBackground" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
                <BitButtonGroup Color="BitColor.PrimaryBackground" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
                <BitButtonGroup Color="BitColor.PrimaryBackground" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
            </div>
            <br /><br />
            <div class="example-content">
                <div style="color:var(--bit-clr-bg-pri)">SecondaryBackground</div>
                <BitButtonGroup Color="BitColor.SecondaryBackground" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
                <BitButtonGroup Color="BitColor.SecondaryBackground" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
                <BitButtonGroup Color="BitColor.SecondaryBackground" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
            </div>
            <br /><br />
            <div class="example-content">
                <div style="color:var(--bit-clr-bg-pri)">TertiaryBackground</div>
                <BitButtonGroup Color="BitColor.TertiaryBackground" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
                <BitButtonGroup Color="BitColor.TertiaryBackground" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
                <BitButtonGroup Color="BitColor.TertiaryBackground" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
            </div>
        </div>
        <br /><br />
        <div class="example-content">
            <div>PrimaryForeground</div>
            <BitButtonGroup Color="BitColor.PrimaryForeground" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.PrimaryForeground" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.PrimaryForeground" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>SecondaryForeground</div>
            <BitButtonGroup Color="BitColor.SecondaryForeground" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.SecondaryForeground" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.SecondaryForeground" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>TertiaryForeground</div>
            <BitButtonGroup Color="BitColor.TertiaryForeground" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.TertiaryForeground" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.TertiaryForeground" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>PrimaryBorder</div>
            <BitButtonGroup Color="BitColor.PrimaryBorder" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.PrimaryBorder" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.PrimaryBorder" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>SecondaryBorder</div>
            <BitButtonGroup Color="BitColor.SecondaryBorder" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.SecondaryBorder" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.SecondaryBorder" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>TertiaryBorder</div>
            <BitButtonGroup Color="BitColor.TertiaryBorder" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.TertiaryBorder" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Color="BitColor.TertiaryBorder" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Icon" RazorCode="@example4RazorCode" CsharpCode="@example4CsharpCode" Id="example4">
    <ExamplePreview>
        <div>Each item in the ButtonGroup can have an icon.</div>
        <br /><br />
        <div class="example-content">
            <div>Fill (default)</div>
            <BitButtonGroup Variant="BitVariant.Fill" Items="iconCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Outline</div>
            <BitButtonGroup Variant="BitVariant.Outline" Items="iconCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Text</div>
            <BitButtonGroup Variant="BitVariant.Text" Items="iconCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="IconOnly" RazorCode="@example5RazorCode" CsharpCode="@example5CsharpCode" Id="example5">
    <ExamplePreview>
        <div>The IconOnly allows buttons to display only icons without any text, ideal for minimalistic designs or limited space.</div>
        <br /><br />
        <div class="example-content">
            <div>Fill (default)</div>
            <BitButtonGroup Variant="BitVariant.Fill" Items="iconCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" IconOnly />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Outline</div>
            <BitButtonGroup Variant="BitVariant.Outline" Items="iconCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" IconOnly />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Text</div>
            <BitButtonGroup Variant="BitVariant.Text" Items="iconCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" IconOnly />
        </div>
        <br /><br />
        <div>Alternatively, each button can be set to IconOnly by simply leaving the text field empty.</div>
        <br /><br />
        <div class="example-content">
            <div>Fill (default)</div>
            <BitButtonGroup Variant="BitVariant.Fill" Items="onlyIconCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Outline</div>
            <BitButtonGroup Variant="BitVariant.Outline" Items="onlyIconCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Text</div>
            <BitButtonGroup Variant="BitVariant.Text" Items="onlyIconCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="ReversedIcon" RazorCode="@example6RazorCode" CsharpCode="@example6CsharpCode" Id="example6">
    <ExamplePreview>
        <div>Reverses the positions of the icon and the main content of the button.</div>
        <br /><br />
        <div class="example-content">
            <div>Fill (default)</div>
            <BitButtonGroup Variant="BitVariant.Fill" Items="reversedIconCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon },
                                                     ReversedIcon = { Selector = i => i.ReversedIcon } })" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Outline</div>
            <BitButtonGroup Variant="BitVariant.Outline" Items="reversedIconCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon },
                                                     ReversedIcon = { Selector = i => i.ReversedIcon } })" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Text</div>
            <BitButtonGroup Variant="BitVariant.Text" Items="reversedIconCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon },
                                                     ReversedIcon = { Selector = i => i.ReversedIcon } })" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Toggled" RazorCode="@example7RazorCode" CsharpCode="@example7CsharpCode" Id="example7">
    <ExamplePreview>
        <div>The Toggled in BitButtonGroup allows you to control the active or inactive state of each button, providing clear visual feedback to users about which buttons are selected or currently in use.</div>
        <br /><br />
        <div class="example-content">
            <div>Fill (default)</div>
            <BitButtonGroup Variant="BitVariant.Fill" Items="toggledCustoms"
                            NameSelectors="@(new() { OnText = { Selector = i => i.OnName },
                                                     OffText = { Selector = i => i.OffName },
                                                     OnTitle = { Selector = i => i.OnTitle },
                                                     OffTitle = { Selector = i => i.OffTitle },
                                                     OnIconName = { Selector = i => i.OnIcon },
                                                     OffIconName = { Selector = i => i.OffIcon },
                                                     ReversedIcon = { Selector = i => i.ReversedIcon } })" Toggled />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Outline</div>
            <BitButtonGroup Variant="BitVariant.Outline" Items="toggledCustoms"
                            NameSelectors="@(new() { OnText = { Selector = i => i.OnName },
                                                     OffText = { Selector = i => i.OffName },
                                                     OnTitle = { Selector = i => i.OnTitle },
                                                     OffTitle = { Selector = i => i.OffTitle },
                                                     OnIconName = { Selector = i => i.OnIcon },
                                                     OffIconName = { Selector = i => i.OffIcon },
                                                     ReversedIcon = { Selector = i => i.ReversedIcon } })" Toggled />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Text</div>
            <BitButtonGroup Variant="BitVariant.Text" Items="toggledCustoms"
                            NameSelectors="@(new() { OnText = { Selector = i => i.OnName },
                                                     OffText = { Selector = i => i.OffName },
                                                     OnTitle = { Selector = i => i.OnTitle },
                                                     OffTitle = { Selector = i => i.OffTitle },
                                                     OnIconName = { Selector = i => i.OnIcon },
                                                     OffIconName = { Selector = i => i.OffIcon },
                                                     ReversedIcon = { Selector = i => i.ReversedIcon } })" Toggled />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Vertical" RazorCode="@example8RazorCode" CsharpCode="@example8CsharpCode" Id="example8">
    <ExamplePreview>
        <div>By default the BitButtonGroup component is horizontal, but can be turned vertical by adding the <strong>Vertical</strong> property.</div>
        <br /><br />
        <div class="buttons-container">
            <div class="example-content">
                <div>Fill (default)</div>
                <BitButtonGroup Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" Vertical />
            </div>
            <br /><br />
            <div class="example-content">
                <div>Outline</div>
                <BitButtonGroup Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" Vertical />
            </div>
            <br /><br />
            <div class="example-content">
                <div>Text</div>
                <BitButtonGroup Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" Vertical />
            </div>
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Size" RazorCode="@example9RazorCode" CsharpCode="@example9CsharpCode" Id="example9">
    <ExamplePreview>
        <div>Different sizes for buttons to meet design needs, ensuring flexibility within your application.</div>
        <br /><br />
        <div class="example-content">
            <div>Small</div>
            <BitButtonGroup Size="BitSize.Small" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Size="BitSize.Small" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Size="BitSize.Small" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Medium</div>
            <BitButtonGroup Size="BitSize.Medium" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Size="BitSize.Medium" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Size="BitSize.Medium" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Large</div>
            <BitButtonGroup Size="BitSize.Large" Variant="BitVariant.Fill" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Size="BitSize.Large" Variant="BitVariant.Outline" Items="basicCustoms" NameSelectors="nameSelector" />
            <BitButtonGroup Size="BitSize.Large" Variant="BitVariant.Text" Items="basicCustoms" NameSelectors="nameSelector" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Style & Class" RazorCode="@example10RazorCode" CsharpCode="@example10CsharpCode" Id="example10">
    <ExamplePreview>
        <div>Empower customization by overriding default styles and classes, allowing tailored design modifications to suit specific UI requirements.</div>
        <br /><br />
        <div class="example-content">
            <div>Component's style & class:</div>
            <BitButtonGroup Items="basicCustoms" Style="border-radius: 1rem; margin: 1rem; box-shadow: tomato 0 0 1rem;" NameSelectors="nameSelector" />
            <BitButtonGroup Items="basicCustoms" Class="custom-class" Variant="BitVariant.Outline" NameSelectors="nameSelector" />
        </div>
        <br /><br />
        <div class="example-content">
            <div>Item's style & class:</div>
            <BitButtonGroup Items="styleClassCustoms"
                            Variant="BitVariant.Text"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Events" RazorCode="@example11RazorCode" CsharpCode="@example11CsharpCode" Id="example11">
    <ExamplePreview>
        <div>Managing button click events.</div>
        <br /><br />
        <div class="example-content">
            <div>Component's ItemClick event:</div>
            <BitButtonGroup Items="basicCustoms"
                            NameSelectors="nameSelector"
                            OnItemClick="(Operation item) => clickedCustom = item.Name" />
            <div>Clicked item: <b>@clickedCustom</b></div>
        </div>
        <br /><br />
        <div class="example-content">
            <div>Item's Click event:</div>
            <BitButtonGroup Items="eventsCustoms"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon },
                                                     OnClick = { Selector = i => i.Clicked } })" />
            <div>Click count: <b>@clickCounter</b></div>
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="RTL" RazorCode="@example12RazorCode" CsharpCode="@example12CsharpCode" Id="example12">
    <ExamplePreview>
        <div>Use BitButtonGroup in right-to-left (RTL).</div>
        <br />
        <div dir="rtl">
            <BitButtonGroup Dir="BitDir.Rtl"
                            Items="rtlCustoms"
                            Variant="BitVariant.Fill"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" />
            <br /><br />
            <BitButtonGroup Dir="BitDir.Rtl"
                            Items="rtlCustoms"
                            Variant="BitVariant.Outline"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" />
            <br /><br />
            <BitButtonGroup Dir="BitDir.Rtl"
                            Items="rtlCustoms"
                            Variant="BitVariant.Text"
                            NameSelectors="@(new() { Text = { Selector = i => i.Name },
                                                     IconName = { Selector = i => i.Icon } })" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>
