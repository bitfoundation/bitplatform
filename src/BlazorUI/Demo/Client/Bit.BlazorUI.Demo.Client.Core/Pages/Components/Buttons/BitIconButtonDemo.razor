@page "/components/iconbutton"
@page "/components/icon-button"

<PageOutlet Url="components/iconbutton"
            Title="IconButton"
            Description="IconButton component of the bit BlazorUI components" />

<ComponentDemo ComponentName="IconButton"
               ComponentDescription="IconButton is a type of button with only an icon describing its action."
               ComponentParameters="componentParameters"
               ComponentSubClasses="componentSubClasses"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Basic" RazorCode="@example1RazorCode" Id="example1">
        <ExamplePreview>
            <div>
                <BitIconButton IconName="@BitIconName.Emoji" />
                <BitIconButton IconName="@BitIconName.EmojiDisappointed" IsEnabled="false" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Style & Class" RazorCode="@example2RazorCode" Id="example2">
        <ExamplePreview>
            <div>
                <BitIconButton IconName="@BitIconName.Home" Style="border-radius: 5px; padding: 23px; border: #555 solid 2px;" />
                <BitIconButton IconName="@BitIconName.FileImage" Class="custom-icon-button" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Visibility" RazorCode="@example3RazorCode" Id="example3">
        <ExamplePreview>
            <div class="buttons-container-grid">
                <div>Visible: [ <BitIconButton IconName="@BitIconName.List" Visibility="BitVisibility.Visible" /> ]</div>
                <div>Hidden: [ <BitIconButton Visibility="BitVisibility.Hidden" /> ]</div>
                <div>Collapsed: [ <BitIconButton Visibility="BitVisibility.Collapsed" /> ]</div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="ARIA" RazorCode="@example4RazorCode" Id="example4">
        <ExamplePreview>
            <div>
                <BitIconButton IconName="@BitIconName.Library" AriaDescription="Detailed description used for screen reader." Title="Button with AriaDescription" />
                <BitIconButton IconName="@BitIconName.Library" AriaHidden="true" Title="Button with AriaHidden" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Link button" RazorCode="@example5RazorCode" Id="example5">
        <ExamplePreview>
            <div>
                <BitIconButton IconName="@BitIconName.Website" Target="_blank" Href="https://github.com/bitfoundation/bitplatform" Title="Open bit platform In New Tab" />
                <BitIconButton IconName="@BitIconName.Website" Href="https://github.com/bitfoundation/bitplatform" Title="Go To bit platform" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Size" RazorCode="@example6RazorCode" Id="example6">
        <ExamplePreview>
            <div>
                Varying sizes for buttons tailored to meet diverse design needs, ensuring flexibility and visual hierarchy within your interface.
            </div>
            <br />
            <div class="buttons-container-grid">
                <div>
                    <BitIconButton IconName="@BitIconName.People" Size="BitSize.Small" Title="Small" />
                    <BitIconButton IconName="@BitIconName.People" Size="BitSize.Medium" Title="Medium" />
                    <BitIconButton IconName="@BitIconName.People" Size="BitSize.Large" Title="Large" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Button Type" RazorCode="@example7RazorCode" CsharpCode="@example7CsharpCode" Id="example7">
        <ExamplePreview>
            <div class="form-container">
                @if (formIsValidSubmit is false)
                {
                    <EditForm Model="buttonValidationModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" novalidate>
                        <DataAnnotationsValidator />

                        <BitTextField Label="Required" IsRequired="true" @bind-Value="buttonValidationModel.RequiredText" />
                        <ValidationMessage For="() => buttonValidationModel.RequiredText" />
                        <br />
                        <BitTextField Label="Non Required" @bind-Value="buttonValidationModel.NonRequiredText" />
                        <ValidationMessage For="() => buttonValidationModel.NonRequiredText" />
                        <br />
                        <div class="buttons-container">
                            <BitIconButton IconName="@BitIconName.SendMirrored" ButtonType="BitButtonType.Submit" Title="Submit" />
                            <BitIconButton IconName="@BitIconName.Reset" ButtonType="BitButtonType.Reset" Title="Reset" />
                            <BitIconButton IconName="@BitIconName.ButtonControl" ButtonType="BitButtonType.Button" Title="Button" />
                        </div>
                    </EditForm>
                }
                else
                {
                    <BitMessage Severity="BitSeverity.Success">
                        The form submitted successfully.
                    </BitMessage>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code {
    private bool formIsValidSubmit;
    private ButtonValidationModel buttonValidationModel = new();

    private async Task HandleValidSubmit()
    {
        formIsValidSubmit = true;

        await Task.Delay(2000);

        buttonValidationModel = new();

        formIsValidSubmit = false;

        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        formIsValidSubmit = false;
    }
}