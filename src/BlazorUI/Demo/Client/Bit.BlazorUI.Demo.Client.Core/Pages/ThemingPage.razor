@page "/theming"
@inherits AppComponentBase

<PageOutlet Url="theming"
            Title="Theming"
            Description="theming of the bit blazorui components" />

<div class="page-container">
    <BitText Variant="BitTextVariant.H3" Class="title">Theming</BitText>

    <section class="page-section">
        <BitText Variant="BitTextVariant.Body1">
            In bit BlazorUI, you can customize the look and feel of your app using the theme features by specifying
            the color of the components, the darkness of the surfaces, the level of shadow, the appropriate opacity of elements, etc.
            <br />
            <br />
            Different aspects of the UI element styles are pre-defined in CSS variables that let you apply a consistent tone to your app.
            It allows you to customize all design aspects of your project to meet the specific needs of your business or brand.
            <br />
            <br />
            The default theme is based on the Microsoft Fluent design system with light and dark theme types available to choose from.
            By default, components use the light theme type.
        </BitText>
    </section>

    <section class="page-section">
        <BitText Variant="BitTextVariant.H4" Class="subtitle">Quick setup</BitText>
        <BitText Variant="BitTextVariant.Body1">
            To get started with bit BlazorUI Theme as fast as possible, you can try the system theme feature of it.
            <br />
            First you need to register the bit BlazorUI services as follows:
        </BitText>
        <br />
        <pre class="code"><code class="language-csharp">builder.Services.AddBitBlazorUIServices();</code></pre>
        <br />
        <BitText Variant="BitTextVariant.Body1">
            And then add a specific attribute named <code>use-system-theme</code> to the <code>html</code> tag:
        </BitText>
        <br />
        <pre><code class="language-cshtml">&lthtml use-system-theme&gt...&lt/html&gt</code></pre>
        <br />
        <BitText Variant="BitTextVariant.Body1">
            Now with this setup, the app will follow the system theme (dark or light) automatically.
        </BitText>
    </section>

    <section class="page-section">
        <BitText Variant="BitTextVariant.H4" Class="subtitle">CSS variables</BitText>
        <BitText Variant="BitTextVariant.Body1">
            All CSS variables defined in the Theme system of the bit BlazorUI are attached to the root element like this:
        </BitText>
        <br />
        <pre class="code"><code class="language-css">:root,
:root[bit-theme="light"],
:root[bit-theme="fluent"],
:root[bit-theme="fluent-light"] {

...

    --bit-clr-pri: #1A86D8;
    --bit-clr-pri-hover: #197FCD;
    --bit-clr-pri-active: #1779C2;
    --bit-clr-pri-dark: #096FBD;
    --bit-clr-pri-dark-hover: #0969B4;
    --bit-clr-pri-dark-active: #0864AA;
    --bit-clr-pri-light: #A3CFEF;
    --bit-clr-pri-light-hover: #8CC3EC;
    --bit-clr-pri-light-active: #76B6E8;
    --bit-clr-pri-text: #FFF;

...

}
        </code></pre>
        <br />
        <BitText Variant="BitTextVariant.Body1">
            The source code of these CSS variables is available in the
            <BitLink Href="https://github.com/bitfoundation/bitplatform/blob/main/src/BlazorUI/Bit.BlazorUI/Styles/Fluent" Target="_blank">
                bit BlazorUI GitHub repo
            </BitLink>.
            <br />
            You can simply override these values to customize the UI.
            <br />
            <br />
            <strong>Note:</strong> If you're using <code>scss</code> in your project, you can use <code>bit-css-variables.scss</code>
            file which introduces scss variables for each bit theme css variable. you can find the latest version of this file
            <BitLink Href="https://github.com/bitfoundation/bitplatform/blob/main/src/BlazorUI/Demo/Client/Bit.BlazorUI.Demo.Client.Core/Styles/abstracts/_bit-css-variables.scss" Target="_blank">
                here
            </BitLink>.
        </BitText>
    </section>

    <section class="page-section">
        <BitText Variant="BitTextVariant.H4" Class="subtitle">ThemeManager</BitText>
        <BitText Variant="BitTextVariant.Body1">
            In bit BlazorUI the <code>BitThemeManager</code> class is available to customize the Theme.
            <br />
            To start using the BitThemeManager, you first need to register bit BlazorUI services like this:
        </BitText>
        <br />
        <pre class="code"><code class="language-csharp">builder.Services.AddBitBlazorUIServices();</code></pre>
        <br />
        <BitText Variant="BitTextVariant.Body1">
            Now you can call methods of an injected instance of the <code>BitThemeManager</code>
            class to customize the UI:
            <br />
        </BitText>
        <br />
        <pre class="code"><code class="language-csharp">[Inject] private BitThemeManager _bitThemeManager { get; set; }</code></pre>
        <br />
        <BitText Variant="BitTextVariant.Body1">
            For example using <code>ApplyBitThemeAsync</code> method and an instance of the
            <code>BitTheme</code> class, which contains the desired theme values,
            you can change the current theme styles.
            <br />
            The <code>ApplyBitThemeAsync</code> method accepts two parameters: a BitTheme instace
            and an optional target element which is by default the body element.
            <br />
            Here's an example of how to apply custom theme values to the entire body:
            <br />
        </BitText>
        <br />
        <pre class="code"><code class="language-csharp">var myTheme = new BitTheme();
myTheme.Color.Foreground.Primary = "#111";
myTheme.Color.Background.Primary = "#777";
_bitThemeManager.ApplyBitThemeAsync(myTheme);</code></pre>
        <br />
        <BitText Variant="BitTextVariant.Body1">
            You can set the current theme using the <code>SetThemeAsync</code> method:
        </BitText>
        <br />
        <pre class="code"><code class="language-csharp">await _bitThemeManager.SetThemeAsync("fluent-dark");</code></pre>
        <br />
        <BitText Variant="BitTextVariant.Body1">
            You can also toggle current theme between dark/light using the
            <code>ToggleDarkLightAsync</code> method:
        </BitText>
        <br />
        <pre class="code"><code class="language-csharp">await _bitThemeManager.ToggleDarkLightAsync();</code></pre>
        <br />
        <BitText Variant="BitTextVariant.Body1">
            This method returns the name of the new toggled theme.
            <br />
            The <code>BitThemeManager</code> has a method named <code>GetCurrentThemeAsync</code>
            which returns the name of the current theme:
        </BitText>
        <br />
        <pre class="code"><code class="language-csharp">var currentTheme = await _bitThemeManager.GetCurrentThemeAsync();</code></pre>
        <br />
    </section>

    <section class="page-section">
        <BitText Variant="BitTextVariant.H4" Class="subtitle">System Theme</BitText>
        <BitText Variant="BitTextVariant.Body1">
            In bit BlazorUI you can use the system theme as the default theme when the app starts up.
            <br />
            In order to enable this feature a specific attribute named
            <code>use-system-theme</code> should be added to the <code>html</code> tag:
        </BitText>
        <br />
        <pre><code class="language-cshtml">&lthtml use-system-theme&gt...&lt/html&gt</code></pre>
    </section>

    <section class="page-section">
        <BitText Variant="BitTextVariant.H4" Class="subtitle">CSS in C#</BitText>
        <BitText Variant="BitTextVariant.Body1">
            In bit BlazorUI the <code>BitCss</code> class is available to access theme related CSS classes & variables in C#.
            <br />
            You can use different properties of this class to further customize your UI:
        </BitText>
        <br />
        <pre><code class="language-cshtml">&lthtml&gt
    &lthead&gt...&lt/head&gt
    &ltbody class="@@BitCss.Class.Color.Background.Primary @@BitCss.Class.Color.Foreground.Primary"&gt
        ...
    &lt/body&gt
&lt/html&gt</code></pre>
        <br />
        <BitText Variant="BitTextVariant.Body1">
            This class contians two main property for accessing CSS classes (<code>BitCss.Class</code>) and CSS variables (<code>BitCss.Var</code>).
        </BitText>
        <br />
        <pre><code class="language-cshtml">&ltdiv style="border-color:var(@@BitCss.Var.Color.Border.Secondary)"&gt
    hello world!
&lt/div&gt</code></pre>
    </section>

    <section class="page-section">
        <BitText Variant="BitTextVariant.H4" Class="subtitle">ThemeProvider</BitText>
        <BitText Variant="BitTextVariant.Body1">
            In bit BlazorUI the <code>BitThemeProvider</code> component is available to further customize the Theme.
            <br />
            You can wrap any elements with the <code>BitThemeProvider</code> component and assign an instance of <code>BitTheme</code> to it:
        </BitText>
        <br />
        <pre class="code"><code class="language-cshtml">&ltBitThemeProvider Theme="myTheme"&gt
    &ltBitCheckbox Label="Check me!" /&gt
&lt/BitThemeProvider&gt

@@code {
    BitTheme myTheme = new()
    {
        Color = { Primary = { Main = "red" } }
    };
}</code></pre>
        <br />
        <BitText Variant="BitTextVariant.Body1">
            The applied theme provided by the <code>BitThemeProvider</code> can be accessed directly using a CascadingParameter in the child components:
        </BitText>
        <br />
        <pre class="code"><code class="language-csharp">[CascadingParameter] public BitTheme? Theme { get; set; }</code></pre>
        <br />
        <BitText Variant="BitTextVariant.Body1">
            You can also nest <code>BitThemeProvider</code> components to achieve the desired style:
        </BitText>
        <br />
        <pre class="code"><code class="language-cshtml">&ltBitThemeProvider Theme="myTheme"&gt
    &ltBitCheckbox Label="Check me!" /&gt
    &ltBitThemeProvider Theme="myTheme2"&gt
        &ltBitCheckbox Label="Check me 2!" /&gt
    &lt/BitThemeProvider&gt
&lt/BitThemeProvider&gt

@@code {
    BitTheme myTheme = new()
    {
        Color = { Primary = { Main = "red" } }
    };

    BitTheme myTheme2 = new()
    {
        Color = { Primary = { Main = "blue" } }
    };
}</code></pre>
    </section>

    <section class="page-section">
        <BitText Variant="BitTextVariant.H4" Class="subtitle">JavaScript API</BitText>
        <BitText Variant="BitTextVariant.Body1">
            bit BlazorUI also has a JavaScript API through <code>BitTheme</code> javascript object
            to customize the UI of the app even further.
            <br />
            The differnet functions available in this object are as follows:
        </BitText>
        <br />
        <pre><code class="language-js">BitTheme.get()</code></pre>
        <BitText Variant="BitTextVariant.Body1">
            Gets the current theme.
        </BitText>
        <br />
        <br />
        <pre><code class="language-js">BitTheme.set('dark')</code></pre>
        <BitText Variant="BitTextVariant.Body1">
            Sets the current theme.
        </BitText>
        <br />
        <br />
        <pre><code class="language-js">BitTheme.toggleDarkLight()</code></pre>
        <BitText Variant="BitTextVariant.Body1">
            Toggles the current theme between dark & light.
        </BitText>
        <br />
        <br />
        <pre><code class="language-js">BitTheme.useSystem()</code></pre>
        <BitText Variant="BitTextVariant.Body1">
            Uses the current theme of the system (dark or light) as the app theme.
        </BitText>
        <br />
        <br />
        <pre><code class="language-js">BitTheme.onChange((newTheme, oldTheme) => {
    if (newTheme.includes('dark')) {
        document.body.classList.add('bit-theme-dark');
        document.body.classList.remove('bit-theme-light');
    } else {
        document.body.classList.add('bit-theme-light');
        document.body.classList.remove('bit-theme-dark');
    }
});</code></pre>
        <BitText Variant="BitTextVariant.Body1">
            An event that fires when the current theme changes.
        </BitText>
        <br />
        <br />
        <pre><code class="language-js">BitTheme.applyBitTheme({...}, el)</code></pre>
        <BitText Variant="BitTextVariant.Body1">
            Applies an instance of BitTheme to the specified or body element just like the
            <code>ApplyBitThemeAsync</code> method of the <code>BitThemeManager</code>.
        </BitText>
        <br />
        <br />
        <pre><code class="language-js">BitTheme.isSystemDark()</code></pre>
        <BitText Variant="BitTextVariant.Body1">
            Checks if the current theme of the system is dark.
        </BitText>
        <br />
        <br />
        <pre><code class="language-js">BitTheme.init({
    system: true,
    onChange: (newTheme: string, oldThem: string) => {
        if (newTheme === 'dark') {
            document.body.classList.add('bit-theme-dark');
            document.body.classList.remove('bit-theme-light');
        } else {
            document.body.classList.add('bit-theme-light');
            document.body.classList.remove('bit-theme-dark');
        }
    }
});</code></pre>
        <BitText Variant="BitTextVariant.Body1">
            Initializes the BitTheme object using the provided options.
        </BitText>
    </section>
</div>
