@page "/theming"
@inherits AppComponentBase

<PageOutlet Url="theming"
            Title="Theming"
            Description="theming of the bit blazorui components" />

<div class="page-container">
    <BitTypography Variant="BitTypographyVariant.H3" Class="title">Theming</BitTypography>
    <section class="page-section">
        <BitTypography Variant="BitTypographyVariant.Body1">
            In Bit BlazorUI, you can customize the look and feel of your app using the theme features by specifying
            the color of the components, the darkness of the surfaces, the level of shadow, the appropriate opacity of elements, etc.
            <br />
            <br />
            Different aspects of the UI element styles are pre-defined in CSS variables that let you apply a consistent tone to your app.
            It allows you to customize all design aspects of your project to meet the specific needs of your business or brand.
            <br />
            <br />
            The default theme is based on the Microsoft Fluent design system with light and dark theme types available to choose from.
            By default, components use the light theme type.
        </BitTypography>
    </section>

    <section class="page-section">
        <BitTypography Variant="BitTypographyVariant.H4" Class="subtitle">CSS variables</BitTypography>
        <BitTypography Variant="BitTypographyVariant.Body1">
            All CSS variables defined in the Theme system of the Bit BlazorUI are attached to the root element like this:
        </BitTypography>
        <br />
        <pre class="code"><code class="language-css">:root,
:root[bit-theme="light"],
:root[bit-theme="fluent"],
:root[bit-theme="fluent-light"] {

...

    --bit-clr-primary-main: #0078D4;
    --bit-clr-primary-dark: #005A9E;
    --bit-clr-primary-light: #C7E0F4;
    --bit-clr-primary-text: #FFF;

    --bit-clr-secondary-main: #FFF;
    --bit-clr-secondary-dark: #EDEBE9;
    --bit-clr-secondary-light: #FFF;
    --bit-clr-secondary-text: #000;

...

}
        </code></pre>
        <br />
        <BitTypography Variant="BitTypographyVariant.Body1">
            The source code of these CSS variables is available in the
            <BitLink Href="https://github.com/bitfoundation/bitplatform/blob/main/src/BlazorUI/Bit.BlazorUI/Styles/Fluent" Target="_blank">
                Bit BlazorUI GitHub repo
            </BitLink>.
            <br />
            You can simply override these values to customize the UI.
            <br />
            <br />
            <strong>Note:</strong> If you're using <code>scss</code> in your project, you can use <code>bit-css-variables.scss</code>
            file which introduces scss variables for each bit theme css variable. you can find the latest version of this file
            <BitLink Href="https://github.com/bitfoundation/bitplatform/blob/main/src/BlazorUI/Demo/Client/Core/Styles/bit-css-variables.scss" Target="_blank">
                here
            </BitLink>.
        </BitTypography>
    </section>

    <section class="page-section">
        <BitTypography Variant="BitTypographyVariant.H4" Class="subtitle">ThemeManager</BitTypography>
        <BitTypography Variant="BitTypographyVariant.Body1">
            In Bit BlazorUI the <code>BitThemeManager</code> class is available to customize the Theme.
            <br />
            To start using the BitThemeManager, you first need to initialize it using an instance of <code>IJSRuntime</code> like this:
        </BitTypography>
        <br />
        <pre class="code"><code class="language-csharp">public partial class App
{
    [Inject] private IJSRuntime _js;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            BitThemeManager.Init(_js);
        }
    }
}</code></pre>
        <br />
        <BitTypography Variant="BitTypographyVariant.Body1">
            Then you need to call the <code>ApplyBitTheme</code> method of the <code>BitThemeManager</code>
            using an instance of the <code>BitTheme</code>, which contains the desired theme values.
            <br />
            The <code>ApplyBitTheme</code> method accepts two parameters: a BitTheme instace and an optional target element
            which is by default the body element.
            <br />
            Here's an example of how to apply custom theme values to the entire body:
            <br />
        </BitTypography>
        <br />
        <pre class="code"><code class="language-csharp">var myTheme = new BitTheme();
myTheme.Color.Foreground.Primary = "#111";
myTheme.Color.Background.Primary = "#777";
BitThemeManager.ApplyBitTheme(myTheme);</code></pre>
        <br />
        <BitTypography Variant="BitTypographyVariant.Body1">
            You can set the current theme using the <code>SetTheme</code> method:
        </BitTypography>
        <br />
        <pre class="code"><code class="language-csharp">await BitThemeManager.SetTheme("fluent-dark");</code></pre>
        <br />
        <BitTypography Variant="BitTypographyVariant.Body1">
            You can also toggle current theme between light/dark using the <code>ToggleDarkLight</code> method:
        </BitTypography>
        <br />
        <pre class="code"><code class="language-csharp">await BitThemeManager.ToggleDarkLight();</code></pre>
        <br />
        <BitTypography Variant="BitTypographyVariant.Body1">
            This method returns the name of the new toggled theme.
            <br />
            The <code>BitThemeManager</code> has a method named <code>GetCurrentTheme</code> which returns the name of the current theme:
        </BitTypography>
        <br />
        <pre class="code"><code class="language-csharp">var currentTheme = await BitThemeManager.GetCurrentTheme();</code></pre>
        <br />
    </section>

    <section class="page-section">
        <BitTypography Variant="BitTypographyVariant.H4" Class="subtitle">JavaScript API</BitTypography>
        <BitTypography Variant="BitTypographyVariant.Body1">
            Bit BlazorUI also has a JavaScript API to customize even further the UX of the app.
            You can see an example of this API here:
        </BitTypography>
        <br />
        <pre><code class="language-js">(function () {
    BitTheme.init({
        system: true,
        onChange: (newTheme, oldThem) => {
            if (newTheme === 'dark') {
                document.body.classList.add('bit-theme-dark');
                document.body.classList.remove('bit-theme-light');
            } else {
                document.body.classList.add('bit-theme-light');
                document.body.classList.remove('bit-theme-dark');
            }
        }
    });
}());</code></pre>
    </section>

    <section class="page-section">
        <BitTypography Variant="BitTypographyVariant.H4" Class="subtitle">ThemeProvider</BitTypography>
        <BitTypography Variant="BitTypographyVariant.Body1">
            In Bit BlazorUI the <code>BitThemeProvider</code> component is available to further customize the Theme.
            <br />
            You can wrap any elements with the <code>BitThemeProvider</code> component and assign an instance of <code>BitTheme</code> to it:
        </BitTypography>
        <br />
        <pre class="code"><code class="language-cshtml">&ltBitThemeProvider Theme="myTheme"&gt
    &ltBitCheckbox Label="Check me!" /&gt
&lt/BitThemeProvider&gt

@@code {
    BitTheme myTheme = new()
    {
        Color = { Primary = { Main = "red" } }
    };
}</code></pre>
        <br />
        <BitTypography Variant="BitTypographyVariant.Body1">
            The applied theme provided by the <code>BitThemeProvider</code> can be accessed directly using a CascadingParameter in the child components:
        </BitTypography>
        <br />
        <pre class="code"><code class="language-csharp">[CascadingParameter] public BitTheme? Theme { get; set; }</code></pre>
        <br />
        <BitTypography Variant="BitTypographyVariant.Body1">
            You can also nest <code>BitThemeProvider</code> components to achieve the desired style:
        </BitTypography>
        <br />
        <pre class="code"><code class="language-cshtml">&ltBitThemeProvider Theme="myTheme"&gt
    &ltBitCheckbox Label="Check me!" /&gt
    &ltBitThemeProvider Theme="myTheme2"&gt
        &ltBitCheckbox Label="Check me 2!" /&gt
    &lt/BitThemeProvider&gt
&lt/BitThemeProvider&gt

@@code {
    BitTheme myTheme = new()
    {
        Color = { Primary = { Main = "red" } }
    };

    BitTheme myTheme2 = new()
    {
        Color = { Primary = { Main = "blue" } }
    };
}</code></pre>
        <br />
        <BitTypography Variant="BitTypographyVariant.Body1">
            <strong>Note:</strong> The <code>BitThemeProvider</code> initializes the <code>BitThemeManager</code> class itself
            and by using <code>BitThemeProvider</code> component there is no need for calling the <code>init</code> method.
        </BitTypography>
        <br />
    </section>


    <section class="page-section">
        <BitTypography Variant="BitTypographyVariant.H4" Class="subtitle">CSS in C#</BitTypography>
        <BitTypography Variant="BitTypographyVariant.Body1">
            In Bit BlazorUI the <code>BitCss</code> class is available to access theme related CSS classes & variables in C#.
            <br />
            You can use different properties of this class to further customize your UI:
        </BitTypography>
        <br />
        <pre><code class="language-cshtml">&lthtml&gt
    &lthead&gt...&lt/head&gt
    &ltbody class="@@BitCss.Class.Color.Background.Primary @@BitCss.Class.Color.Foreground.Primary"&gt
        ...
    &lt/body&gt
&lt/html&gt</code></pre>
        <br />
        <BitTypography Variant="BitTypographyVariant.Body1">
            This class contians two main property for accessing CSS classes (<code>BitCss.Class</code>) and CSS variables (<code>BitCss.Var</code>).
        </BitTypography>
        <br />
        <pre><code class="language-cshtml">&ltdiv style="border-color:var(@@BitCss.Var.Color.Border.Secondary)"&gt
    hello world!
&lt/div&gt</code></pre>
    </section>
</div>
