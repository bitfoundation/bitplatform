@page "/components/compoundbutton"
@page "/components/compound-button"

<PageOutlet Url="components/compoundbutton"
            Title="CompoundButton"
            Description="CompoundButton component of the bit BlazorUI components" />

<ComponentDemo ComponentName="CompoundButton"
               ComponentDescription="Buttons give people a way to trigger an action. They’re typically found in forms, dialog panels, and dialogs. Some buttons are specialized for particular tasks, such as navigation, repeated actions, or presenting menus."
               ComponentParameters="componentParameters"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Basic" HTMLSourceCode="@example1HTMLCode" ExampleId="example1">
        <ExamplePreview>
            <div class="buttons-container">
                <BitCompoundButton Text="Primary" SecondaryText="This Button is a compound button" />
                <BitCompoundButton Text="Standard" SecondaryText="This Button is a compound button" ButtonStyle="BitButtonStyle.Standard" />
                <BitCompoundButton IsEnabled="false" Text="Disabled" SecondaryText="This Button is a disabled compound button" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Style & Class" HTMLSourceCode="@example2HTMLCode" ExampleId="example2">
        <ExamplePreview>
            <div class="buttons-container">
                <BitCompoundButton Style="color:darkblue; font-weight:bold" Text="Styled" SecondaryText="This is styled compound button" />
                <BitCompoundButton ButtonStyle="BitButtonStyle.Standard" Class="custom-class" Text="Classed" SecondaryText="This is classed compound button" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Visibility" HTMLSourceCode="@example3HTMLCode" ExampleId="example3">
        <ExamplePreview>
            <div class="buttons-container-grid">
                <div>Visible Button: [ <BitCompoundButton Visibility="BitComponentVisibility.Visible" Text="Visible" SecondaryText="This Button is a visible compound button" /> ]</div>
                <div>Hidden Button: [ <BitCompoundButton Text="Hidden" SecondaryText="This Button is a hidden compound button" Visibility="BitComponentVisibility.Hidden" /> ]</div>
                <div>Collapsed Button: [ <BitCompoundButton Text="Collapsed" SecondaryText="This Button is a collapsed compound button" Visibility="BitComponentVisibility.Collapsed" /> ]</div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="ARIA" HTMLSourceCode="@example4HTMLCode" ExampleId="example4">
        <ExamplePreview>
            <div class="buttons-container">
                <BitCompoundButton ButtonStyle="BitButtonStyle.Standard" Text="AriaDescription" SecondaryText="This is a compound button with aria description" AriaDescription="Button with Aria Description" />
                <BitCompoundButton Text="AriaHidden" SecondaryText="This is a compound button with aria hidden" AriaHidden="true" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Link button" HTMLSourceCode="@example5HTMLCode" ExampleId="example5">
        <ExamplePreview>
            <div class="buttons-container">
                <BitCompoundButton Target="_blank" Href="https://github.com/bitfoundation/bitplatform" Text="Open the site" SecondaryText="Open Bit Platform In New Tab" />
                <BitCompoundButton Href="https://github.com/bitfoundation/bitplatform" ButtonStyle="BitButtonStyle.Standard" Text="Open the site" SecondaryText="Go To Bit Platform" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Button Type" HTMLSourceCode="@example6HTMLCode" CSharpSourceCode="@example6CSharpCode" ExampleId="example6">
        <ExamplePreview>
            <div class="form-container">
                @if (formIsValidSubmit is false)
                {
                    <EditForm Model="buttonValidationModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" novalidate>
                        <DataAnnotationsValidator />

                        <BitTextField Label="Required" IsRequired="true" @bind-Value="buttonValidationModel.RequiredText" />
                        <ValidationMessage For="() => buttonValidationModel.RequiredText" />
                        <br />
                        <BitTextField Label="Non Required" @bind-Value="buttonValidationModel.NonRequiredText" />
                        <ValidationMessage For="() => buttonValidationModel.NonRequiredText" />
                        <br />
                        <div class="buttons-container">
                            <BitCompoundButton ButtonType=BitButtonType.Submit Text="Submit" SecondaryText="This is a Submit button" />
                            <BitCompoundButton ButtonType=BitButtonType.Reset Text="Reset" SecondaryText="This is a Reset button" />
                            <BitCompoundButton ButtonType=BitButtonType.Button Text="Button" SecondaryText="This is just a button" />
                        </div>
                    </EditForm>
                }
                else
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        The form is valid to submit successfully.
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

</ComponentDemo>

@code {
    private bool formIsValidSubmit;
    private ButtonValidationModel buttonValidationModel = new();

    private async Task HandleValidSubmit()
    {
        formIsValidSubmit = true;

        await Task.Delay(2000);

        buttonValidationModel = new();

        formIsValidSubmit = false;

        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        formIsValidSubmit = false;
    }
}