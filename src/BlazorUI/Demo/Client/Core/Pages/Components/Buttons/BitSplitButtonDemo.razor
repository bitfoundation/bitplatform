@page "/components/splitbutton"
@page "/components/split-button"

<PageOutlet Url="components/splitbutton"
            Title="SplitButton"
            Description="splitbutton component of the bit BlazorUI components" />

<ComponentDemo ComponentName="SplitButton"
               ComponentDescription="Buttons give people a way to trigger an action. They’re typically found in forms, dialog panels, and dialogs. Some buttons are specialized for particular tasks, such as navigation, repeated actions, or presenting menus."
               ComponentParameters="componentParameters"
               ComponentSubClasses="componentSubClasses"
               ComponentSubEnums="componentSubEnums"
               Notes="The BitSplitButton is a Multi-API component which can accept the list of Items in 3 different ways: BitSplitButtonItem class, a custom Generic class, and BitSplitButtonOption component.">
    <BitPivot OnItemClick="OnTabClick" ClassStyles="@(new() { Header = new() { Class = "pivot-sticky-header" } })">
        <BitPivotItem HeaderText="Item">
            <ComponentExampleBox Title="Basic" HTMLSourceCode="@example1BitSplitButtonItemHTMLCode" CSharpSourceCode="@example1BitSplitButtonItemCSharpCode" ExampleId="example11">
                <ExamplePreview>
                    <div class="example-content">
                        <div>
                            <BitLabel>Primary</BitLabel>
                            <BitSplitButton Items="BasicItems" OnClick="(BitSplitButtonItem item) => basicClickedItem = item.Text" />
                        </div>
                        <div>
                            <BitLabel>Standard</BitLabel>
                            <BitSplitButton Items="BasicItems"
                                            ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(BitSplitButtonItem item) => basicClickedItem = item.Text" />
                        </div>
                        <div>
                            <BitLabel>Disabled</BitLabel>
                            <BitSplitButton Items="BasicItems" IsEnabled="false" />
                        </div>
                        <div>
                            <BitLabel>Item disabled</BitLabel>
                            <BitSplitButton Items="BasicItemsDisabled" OnClick="(BitSplitButtonItem item) => basicClickedItem = item.Text" />
                        </div>
                        <div>
                            <BitLabel>Item disabled</BitLabel>
                            <BitSplitButton Items="BasicItemsDisabled"
                                            ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(BitSplitButtonItem item) => basicClickedItem = item.Text" />
                        </div>
                    </div>
                    <div class="clicked-item">Clicked item: @basicClickedItem</div>
                </ExamplePreview>
            </ComponentExampleBox>

            <ComponentExampleBox Title="IsSticky" HTMLSourceCode="@example2BitSplitButtonItemHTMLCode" CSharpSourceCode="@example2BitSplitButtonItemCSharpCode" ExampleId="example12">
                <ExamplePreview>
                    <div class="example-content">
                        <div>
                            <BitLabel>Primary</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            Items="IsStickyItems"
                                            OnClick="(BitSplitButtonItem item) => isStickyClickedItem = item.Text" />
                        </div>
                        <div>
                            <BitLabel>Standard</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            Items="IsStickyItems"
                                            ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(BitSplitButtonItem item) => isStickyClickedItem = item.Text" />
                        </div>
                    </div>
                    <div class="clicked-item">Clicked item: @isStickyClickedItem</div>
                </ExamplePreview>
            </ComponentExampleBox>

            <ComponentExampleBox Title="ItemDisabled" HTMLSourceCode="@example3BitSplitButtonItemHTMLCode" CSharpSourceCode="@example3BitSplitButtonItemCSharpCode" ExampleId="example13">
                <ExamplePreview>
                    <div class="example-content">
                        <div>
                            <BitLabel>Sticky Primary</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            Items="DisabledItems"
                                            OnClick="(BitSplitButtonItem item) => disabledClickedItem = item.Text" />
                        </div>
                        <div>
                            <BitLabel>Basic Standard</BitLabel>
                            <BitSplitButton Items="DisabledItems"
                                            ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(BitSplitButtonItem item) => disabledClickedItem = item.Text" />
                        </div>
                    </div>
                    <div class="clicked-item">Clicked item: @disabledClickedItem</div>
                </ExamplePreview>
            </ComponentExampleBox>

            <ComponentExampleBox Title="ItemTemplate" HTMLSourceCode="@example4BitSplitButtonItemHTMLCode" CSharpSourceCode="@example4BitSplitButtonItemCSharpCode" ExampleId="example14">
                <ExamplePreview>
                    <div class="example-content">
                        <div>
                            <BitLabel>Primary</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            Items="TemplateItems"
                                            OnClick="(BitSplitButtonItem item) => templateClickedItem = item.Text">
                                <ItemTemplate Context="item">
                                    <div class="item-template-box">
                                        <span style="color: @(item.Key == "add-key" ? "green" : item.Key == "edit-key" ? "yellow" : "#600000");">
                                            @item.Text (@item.Key)
                                        </span>
                                    </div>
                                </ItemTemplate>
                            </BitSplitButton>
                        </div>
                        <div>
                            <BitLabel>Standard</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            Items="TemplateItems"
                                            ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(BitSplitButtonItem item) => templateClickedItem = item.Text">
                                <ItemTemplate Context="item">
                                    @if (item.Key == "add-key")
                                    {
                                        <div class="item-template-box">
                                            <BitIcon IconName="@BitIconName.Add" />
                                            <span style="color: green;">
                                                @item.Text (@item.Key)
                                            </span>
                                        </div>
                                    }
                                    else if (item.Key == "edit-key")
                                    {
                                        <div class="item-template-box">
                                            <BitIcon IconName="@BitIconName.Edit" />
                                            <span style="color: yellow;">
                                                @item.Text (@item.Key)
                                            </span>
                                        </div>
                                    }
                                    else if (item.Key == "delete-key")
                                    {
                                        <div class="item-template-box">
                                            <BitIcon IconName="@BitIconName.Delete" />
                                            <span style="color: red;">
                                                @item.Text (@item.Key)
                                            </span>
                                        </div>
                                    }
                                </ItemTemplate>
                            </BitSplitButton>
                        </div>
                    </div>
                    <div class="clicked-item">Clicked item: @templateClickedItem</div>
                </ExamplePreview>
            </ComponentExampleBox>
        </BitPivotItem>

        <BitPivotItem HeaderText="Custom">
            <ComponentExampleBox Title="Basic" HTMLSourceCode="@example1CustomItemHTMLCode" CSharpSourceCode="@example1CustomItemCSharpCode" ExampleId="example21">
                <ExamplePreview>
                    <div class="example-content">
                        <div>
                            <BitLabel>Primary</BitLabel>
                            <BitSplitButton Items="BasicCustomItems"
                                            OnClick="(SplitActionItem item) => basicClickedItem = item.Name"
                                            NameSelectors="@(new() { IconName = { Name = nameof(SplitActionItem.Icon) },
                                                                     Key = { Name = nameof(SplitActionItem.Id) },
                                                                     Text = { Name = nameof(SplitActionItem.Name) }})" />
                        </div>
                        <div>
                            <BitLabel>Standard</BitLabel>
                            <BitSplitButton Items="BasicCustomItems"
                                            ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(SplitActionItem item) => basicClickedItem = item.Name"
                                            NameSelectors="@(new() { IconName = { Selector = item => item.Icon },
                                                                     Key = { Selector = item => item.Id },
                                                                     Text = { Selector = item => item.Name }})" />
                        </div>
                        <div>
                            <BitLabel>Disabled</BitLabel>
                            <BitSplitButton IsEnabled="false"
                                            Items="BasicCustomItems"
                                            NameSelectors="@(new() { IconName = { Name = nameof(SplitActionItem.Icon) },
                                                                     Key = { Name = nameof(SplitActionItem.Id) },
                                                                     Text = { Name = nameof(SplitActionItem.Name) }})" />
                        </div>
                        <div>
                            <BitLabel>Item disabled</BitLabel>
                            <BitSplitButton Items="BasicCustomItemsDisabled"
                                            OnClick="(SplitActionItem item) => basicClickedItem = item.Name"
                                            NameSelectors="@(new() { IconName = { Name = nameof(SplitActionItem.Icon) },
                                                                     Key = { Name = nameof(SplitActionItem.Id) },
                                                                     Text = { Name = nameof(SplitActionItem.Name) }})" />
                        </div>
                        <div>
                            <BitLabel>Item disabled</BitLabel>
                            <BitSplitButton Items="BasicCustomItemsDisabled"
                                            ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(SplitActionItem item) => basicClickedItem = item.Name"
                                            NameSelectors="@(new() { IconName = { Name = nameof(SplitActionItem.Icon) },
                                                                     Key = { Name = nameof(SplitActionItem.Id) },
                                                                     Text = { Name = nameof(SplitActionItem.Name) }})" />
                        </div>
                    </div>
                    <div class="clicked-item">Clicked item: @basicClickedItem</div>
                </ExamplePreview>
            </ComponentExampleBox>

            <ComponentExampleBox Title="IsSticky" HTMLSourceCode="@example2CustomItemHTMLCode" CSharpSourceCode="@example2CustomItemCSharpCode" ExampleId="example22">
                <ExamplePreview>
                    <div class="example-content">
                        <div>
                            <BitLabel>Primary</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            Items="IsStickyCustomItems"
                                            OnClick="(SplitActionItem item) => isStickyClickedItem = item.Name"
                                            NameSelectors="@(new() { IconName = { Name = nameof(SplitActionItem.Icon) },
                                                                     Key = { Name = nameof(SplitActionItem.Id) },
                                                                     Text = { Name = nameof(SplitActionItem.Name) }})" />
                        </div>
                        <div>
                            <BitLabel>Standard</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            Items="IsStickyCustomItems"
                                            ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(SplitActionItem item) => isStickyClickedItem = item.Name"
                                            NameSelectors="@(new() { IconName = { Selector = item => item.Icon },
                                                                     Key = { Selector = item => item.Id },
                                                                     Text = { Selector = item => item.Name }})" />
                        </div>
                    </div>
                    <div class="clicked-item">Clicked item: @isStickyClickedItem</div>
                </ExamplePreview>
            </ComponentExampleBox>

            <ComponentExampleBox Title="ItemDisabled" HTMLSourceCode="@example3CustomItemHTMLCode" CSharpSourceCode="@example3CustomItemCSharpCode" ExampleId="example23">
                <ExamplePreview>
                    <div class="example-content">
                        <div>
                            <BitLabel>Sticky Primary</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            Items="DisabledCustomItems"
                                            OnClick="(SplitActionItem item) => disabledClickedItem = item.Name"
                                            NameSelectors="@(new() { IconName = { Name = nameof(SplitActionItem.Icon) },
                                                                     Key = { Name = nameof(SplitActionItem.Id) },
                                                                     Text = { Name = nameof(SplitActionItem.Name) }})" />
                        </div>
                        <div>
                            <BitLabel>Basic Standard</BitLabel>
                            <BitSplitButton Items="DisabledCustomItems"
                                            ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(SplitActionItem item) => disabledClickedItem = item.Name"
                                            NameSelectors="@(new() { IconName = { Selector = item => item.Icon },
                                                                     Key = { Selector = item => item.Id },
                                                                     Text = { Selector = item => item.Name }})" />
                        </div>
                    </div>
                    <div class="clicked-item">Clicked item: @disabledClickedItem</div>
                </ExamplePreview>
            </ComponentExampleBox>

            <ComponentExampleBox Title="ItemTemplate" HTMLSourceCode="@example4CustomItemHTMLCode" CSharpSourceCode="@example4CustomItemCSharpCode" ExampleId="example24">
                <ExamplePreview>
                    <div class="example-content">
                        <div>
                            <BitLabel>Primary</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            Items="TemplateCustomItems"
                                            OnClick="(SplitActionItem item) => templateClickedItem = item.Name"
                                            NameSelectors="@(new() { IconName = { Name = nameof(SplitActionItem.Icon) },
                                                                     Key = { Name = nameof(SplitActionItem.Id) },
                                                                     Text = { Name = nameof(SplitActionItem.Name) }})">
                                <ItemTemplate Context="item">
                                    <div class="item-template-box">
                                        <span style="color: @(item.Id == "add-key" ? "green" : item.Id == "edit-key" ? "yellow" : "red");">
                                            @item.Name (@item.Id)
                                        </span>
                                    </div>
                                </ItemTemplate>
                            </BitSplitButton>
                        </div>
                        <div>
                            <BitLabel>Standard</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            Items="TemplateCustomItems"
                                            ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(SplitActionItem item) => templateClickedItem = item.Name"
                                            NameSelectors="@(new() { IconName = { Selector = item => item.Icon },
                                                                     Key = { Selector = item => item.Id },
                                                                     Text = { Selector = item => item.Name }})">
                                <ItemTemplate Context="item">
                                    @if (item.Id == "add-key")
                                    {
                                        <div class="item-template-box">
                                            <BitIcon IconName="@BitIconName.Add" />
                                            <span style="color: green;">
                                                @item.Name (@item.Id)
                                            </span>
                                        </div>
                                    }
                                    else if (item.Id == "edit-key")
                                    {
                                        <div class="item-template-box">
                                            <BitIcon IconName="@BitIconName.Edit" />
                                            <span style="color: yellow;">
                                                @item.Name (@item.Id)
                                            </span>
                                        </div>
                                    }
                                    else if (item.Id == "delete-key")
                                    {
                                        <div class="item-template-box">
                                            <BitIcon IconName="@BitIconName.Delete" />
                                            <span style="color: red;">
                                                @item.Name (@item.Id)
                                            </span>
                                        </div>
                                    }
                                </ItemTemplate>
                            </BitSplitButton>
                        </div>
                    </div>
                    <div class="clicked-item">Clicked item: @templateClickedItem</div>
                </ExamplePreview>
            </ComponentExampleBox>
        </BitPivotItem>

        <BitPivotItem HeaderText="Option">
            <ComponentExampleBox Title="Basic" HTMLSourceCode="@example1BitSplitButtonOptionHTMLCode" CSharpSourceCode="@example1BitSplitButtonOptionCSharpCode" ExampleId="example31">
                <ExamplePreview>
                    <div class="example-content">
                        <div>
                            <BitLabel>Primary</BitLabel>
                            <BitSplitButton OnClick="(BitSplitButtonOption item) => basicClickedItem = item.Text">
                                <BitSplitButtonOption Text="Item A" Key="A" />
                                <BitSplitButtonOption Text="Item B" Key="B" IconName="@BitIconName.Emoji" />
                                <BitSplitButtonOption Text="Item C" Key="C" IconName="@BitIconName.Emoji2" />
                            </BitSplitButton>
                        </div>
                        <div>
                            <BitLabel>Standard</BitLabel>
                            <BitSplitButton ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(BitSplitButtonOption item) => basicClickedItem = item.Text">
                                <BitSplitButtonOption Text="Item A" Key="A" />
                                <BitSplitButtonOption Text="Item B" Key="B" IconName="@BitIconName.Emoji" />
                                <BitSplitButtonOption Text="Item C" Key="C" IconName="@BitIconName.Emoji2" />
                            </BitSplitButton>
                        </div>
                        <div>
                            <BitLabel>Disabled</BitLabel>
                            <BitSplitButton IsEnabled="false" TItem="BitSplitButtonOption">
                                <BitSplitButtonOption Text="Item A" Key="A" />
                                <BitSplitButtonOption Text="Item B" Key="B" IconName="@BitIconName.Emoji" />
                                <BitSplitButtonOption Text="Item C" Key="C" IconName="@BitIconName.Emoji2" />
                            </BitSplitButton>
                        </div>
                        <div>
                            <BitLabel>Item disabled</BitLabel>
                            <BitSplitButton OnClick="(BitSplitButtonOption item) => basicClickedItem = item.Text">
                                <BitSplitButtonOption Text="Item A" Key="A" IsEnabled="false" />
                                <BitSplitButtonOption Text="Item B" Key="B" IconName="@BitIconName.Emoji" />
                                <BitSplitButtonOption Text="Item C" Key="C" IconName="@BitIconName.Emoji2" />
                            </BitSplitButton>
                        </div>
                        <div>
                            <BitLabel>Item disabled</BitLabel>
                            <BitSplitButton ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(BitSplitButtonOption item) => basicClickedItem = item.Text">
                                <BitSplitButtonOption Text="Item A" Key="A" IsEnabled="false" />
                                <BitSplitButtonOption Text="Item B" Key="B" IconName="@BitIconName.Emoji" />
                                <BitSplitButtonOption Text="Item C" Key="C" IconName="@BitIconName.Emoji2" />
                            </BitSplitButton>
                        </div>
                    </div>
                    <div class="clicked-item">Clicked item: @basicClickedItem</div>
                </ExamplePreview>
            </ComponentExampleBox>

            <ComponentExampleBox Title="IsSticky" HTMLSourceCode="@example2BitSplitButtonOptionHTMLCode" CSharpSourceCode="@example2BitSplitButtonOptionCSharpCode" ExampleId="example32">
                <ExamplePreview>
                    <div class="example-content">
                        <div>
                            <BitLabel>Primary</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            OnClick="(BitSplitButtonOption item) => isStickyClickedItem = item.Text">
                                <BitSplitButtonOption Text="Add" Key="add-key" IconName="@BitIconName.Add" />
                                <BitSplitButtonOption Text="Edit" Key="edit-key" IconName="@BitIconName.Edit" />
                                <BitSplitButtonOption Text="Delete" Key="delete-key" IconName="@BitIconName.Delete" />
                            </BitSplitButton>
                        </div>
                        <div>
                            <BitLabel>Standard</BitLabel>
                            <BitSplitButton ButtonStyle="BitButtonStyle.Standard"
                                            IsSticky="true"
                                            OnClick="(BitSplitButtonOption item) => isStickyClickedItem = item.Text">
                                <BitSplitButtonOption Text="Add" Key="add-key" IconName="@BitIconName.Add" />
                                <BitSplitButtonOption Text="Edit" Key="edit-key" IconName="@BitIconName.Edit" />
                                <BitSplitButtonOption Text="Delete" Key="delete-key" IconName="@BitIconName.Delete" />
                            </BitSplitButton>
                        </div>
                    </div>
                    <div class="clicked-item">Clicked item: @isStickyClickedItem</div>
                </ExamplePreview>
            </ComponentExampleBox>

            <ComponentExampleBox Title="ItemDisabled" HTMLSourceCode="@example3BitSplitButtonOptionHTMLCode" CSharpSourceCode="@example3BitSplitButtonOptionCSharpCode" ExampleId="example33">
                <ExamplePreview>
                    <div class="example-content">
                        <div>
                            <BitLabel>Sticky Primary</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            OnClick="(BitSplitButtonOption item) => disabledClickedItem = item.Text">
                                <BitSplitButtonOption Text="Item A" Key="A" IconName="@BitIconName.Emoji" IsEnabled="false" />
                                <BitSplitButtonOption Text="Item B" Key="B" IconName="@BitIconName.Emoji2" />
                                <BitSplitButtonOption Text="Item C" Key="C" IconName="@BitIconName.Emoji" IsEnabled="false" />
                                <BitSplitButtonOption Text="Item D" Key="D" IconName="@BitIconName.Emoji2" />
                            </BitSplitButton>
                        </div>
                        <div>
                            <BitLabel>Basic Standard</BitLabel>
                            <BitSplitButton ButtonStyle="BitButtonStyle.Standard"
                                            OnClick="(BitSplitButtonOption item) => disabledClickedItem = item.Text">
                                <BitSplitButtonOption Text="Item A" Key="A" IconName="@BitIconName.Emoji" IsEnabled="false" />
                                <BitSplitButtonOption Text="Item B" Key="B" IconName="@BitIconName.Emoji2" />
                                <BitSplitButtonOption Text="Item C" Key="C" IconName="@BitIconName.Emoji" IsEnabled="false" />
                                <BitSplitButtonOption Text="Item D" Key="D" IconName="@BitIconName.Emoji2" />
                            </BitSplitButton>
                        </div>
                    </div>
                    <div class="clicked-item">Clicked item: @disabledClickedItem</div>
                </ExamplePreview>
            </ComponentExampleBox>

            <ComponentExampleBox Title="ItemTemplate" HTMLSourceCode="@example4BitSplitButtonOptionHTMLCode" CSharpSourceCode="@example4BitSplitButtonOptionCSharpCode" ExampleId="example34">
                <ExamplePreview>
                    <div class="example-content">
                        <div>
                            <BitLabel>Primary</BitLabel>
                            <BitSplitButton IsSticky="true"
                                            OnClick="(BitSplitButtonOption item) => templateClickedItem = item.Text">
                                <ItemTemplate Context="item">
                                    <div class="item-template-box">
                                        <span style="color: @(item.Key == "add-key" ? "green" : item.Key == "edit-key" ? "yellow" : "red");">
                                            @item.Text (@item.Key)
                                        </span>
                                    </div>
                                </ItemTemplate>
                                <ChildContent>
                                    <BitSplitButtonOption Text="Add" Key="add-key" IconName="@BitIconName.Add" />
                                    <BitSplitButtonOption Text="Edit" Key="edit-key" IconName="@BitIconName.Edit" />
                                    <BitSplitButtonOption Text="Delete" Key="delete-key" IconName="@BitIconName.Delete" />
                                </ChildContent>
                            </BitSplitButton>
                        </div>
                        <div>
                            <BitLabel>Standard</BitLabel>
                            <BitSplitButton ButtonStyle="BitButtonStyle.Standard"
                                            IsSticky="true"
                                            OnClick="(BitSplitButtonOption item) => templateClickedItem = item.Text">
                                <ItemTemplate Context="item">
                                    @if (item.Key == "add-key")
                                    {
                                        <div class="item-template-box">
                                            <BitIcon IconName="@BitIconName.Add" />
                                            <span style="color: green;">
                                                @item.Text (@item.Key)
                                            </span>
                                        </div>
                                    }
                                    else if (item.Key == "edit-key")
                                    {
                                        <div class="item-template-box">
                                            <BitIcon IconName="@BitIconName.Edit" />
                                            <span style="color: yellow;">
                                                @item.Text (@item.Key)
                                            </span>
                                        </div>
                                    }
                                    else if (item.Key == "delete-key")
                                    {
                                        <div class="item-template-box">
                                            <BitIcon IconName="@BitIconName.Delete" />
                                            <span style="color: red;">
                                                @item.Text (@item.Key)
                                            </span>
                                        </div>
                                    }
                                </ItemTemplate>
                                <ChildContent>
                                    <BitSplitButtonOption Text="Add" Key="add-key" IconName="@BitIconName.Add" />
                                    <BitSplitButtonOption Text="Edit" Key="edit-key" IconName="@BitIconName.Edit" />
                                    <BitSplitButtonOption Text="Delete" Key="delete-key" IconName="BitIconName.Delete" />
                                </ChildContent>
                            </BitSplitButton>
                        </div>
                    </div>
                    <div class="clicked-item">Clicked item: @templateClickedItem</div>
                </ExamplePreview>
            </ComponentExampleBox>
        </BitPivotItem>
    </BitPivot>
</ComponentDemo>

@code {
    private string? basicClickedItem;
    private string? isStickyClickedItem;
    private string? disabledClickedItem;
    private string? templateClickedItem;

    private List<BitSplitButtonItem> BasicItems = new()
    {
        new()
        {
            Text = "Item A",
            Key = "A",
        },
        new()
        {
            Text = "Item B",
            Key = "B",
            IconName = BitIconName.Emoji
        },
        new()
        {
            Text = "Item C",
            Key = "C",
            IconName = BitIconName.Emoji2
        }
    };
    private List<BitSplitButtonItem> BasicItemsDisabled = new()
    {
        new()
        {
            Text = "Item A",
            Key = "A",
            IsEnabled = false
        },
        new()
        {
            Text = "Item B",
            Key = "B",
            IconName = BitIconName.Emoji
        },
        new()
        {
            Text = "Item C",
            Key = "C",
            IconName = BitIconName.Emoji2
        }
    };
    private List<BitSplitButtonItem> IsStickyItems = new()
    {
        new()
        {
            Text = "Add",
            Key = "add-key",
            IconName = BitIconName.Add
        },
        new()
        {
            Text = "Edit",
            Key = "edit-key",
            IconName = BitIconName.Edit
        },
        new()
        {
            Text = "Delete",
            Key = "delete-key",
            IconName = BitIconName.Delete
        }
    };
    private List<BitSplitButtonItem> DisabledItems = new()
    {
        new()
        {
            Text = "Item A",
            Key = "A",
            IconName = BitIconName.Emoji,
            IsEnabled = false
        },
        new()
        {
            Text = "Item B",
            Key = "B",
            IconName = BitIconName.Emoji2
        },
        new()
        {
            Text = "Item C",
            Key = "C",
            IconName = BitIconName.Emoji,
            IsEnabled = false
        },
        new()
        {
            Text = "Item D",
            Key = "D",
            IconName = BitIconName.Emoji2
        }
    };
    private List<BitSplitButtonItem> TemplateItems = new()
    {
        new()
        {
            Text = "Add",
            Key = "add-key"
        },
        new()
        {
            Text = "Edit",
            Key = "edit-key"
        },
        new()
        {
            Text = "Delete",
            Key = "delete-key"
        }
    };

    private List<SplitActionItem> BasicCustomItems = new()
    {
        new()
        {
            Name = "Item A",
            Id = "A"
        },
        new()
        {
            Name = "Item B",
            Id = "B",
            Icon = BitIconName.Emoji
        },
        new()
        {
            Name = "Item C",
            Id = "C",
            Icon = BitIconName.Emoji2
        }
    };
    private List<SplitActionItem> BasicCustomItemsDisabled = new()
    {
        new()
        {
            Name = "Item A",
            Id = "A",
            IsEnabled = false
        },
        new()
        {
            Name = "Item B",
            Id = "B",
            Icon = BitIconName.Emoji
        },
        new()
        {
            Name = "Item C",
            Id = "C",
            Icon = BitIconName.Emoji2
        }
    };
    private List<SplitActionItem> IsStickyCustomItems = new()
    {
        new()
        {
            Name = "Add",
            Id = "add-key",
            Icon = BitIconName.Add
        },
        new()
        {
            Name = "Edit",
            Id = "edit-key",
            Icon = BitIconName.Edit
        },
        new()
        {
            Name = "Delete",
            Id = "delete-key",
            Icon = BitIconName.Delete
        }
    };
    private List<SplitActionItem> DisabledCustomItems = new()
    {
        new()
        {
            Name = "Item A",
            Id = "A",
            Icon = BitIconName.Emoji,
            IsEnabled = false
        },
        new()
        {
            Name = "Item B",
            Id = "B",
            Icon = BitIconName.Emoji2
        },
        new()
        {
            Name = "Item C",
            Id = "C",
            Icon = BitIconName.Emoji,
            IsEnabled = false
        },
        new()
        {
            Name = "Item D",
            Id = "D",
            Icon = BitIconName.Emoji2
        }
    };
    private List<SplitActionItem> TemplateCustomItems = new()
    {
        new()
        {
            Name = "Add",
            Id = "add-key"
        },
        new()
        {
            Name = "Edit",
            Id = "edit-key"
        },
        new()
        {
            Name = "Delete",
            Id = "delete-key"
        }
    };
}