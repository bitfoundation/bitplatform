@page "/components/iconbutton"
@page "/components/icon-button"

<PageOutlet Url="components/iconbutton"
            Title="IconButton"
            Description="IconButton component of the bit BlazorUI components" />

<ComponentDemo ComponentName="IconButton"
               ComponentDescription="Buttons give people a way to trigger an action. They’re typically found in forms, dialog panels, and dialogs. Some buttons are specialized for particular tasks, such as navigation, repeated actions, or presenting menus."
               ComponentParameters="componentParameters"
               ComponentSubClasses="componentSubClasses"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Basic" HTMLSourceCode="@example1HTMLCode" ExampleId="example1">
        <ExamplePreview>
            <div>
                <BitIconButton IconName="@BitIconName.Emoji" />
                <BitIconButton IconName="@BitIconName.EmojiDisappointed" IsEnabled="false" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Style & Class" HTMLSourceCode="@example2HTMLCode" ExampleId="example2">
        <ExamplePreview>
            <div>
                <BitIconButton IconName="@BitIconName.Home" Style="border-radius: 5px; padding: 23px; border: #555 solid 2px;" />
                <BitIconButton IconName="@BitIconName.FileImage" Class="custom-icon-button" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Visibility" HTMLSourceCode="@example3HTMLCode" ExampleId="example3">
        <ExamplePreview>
            <div class="buttons-container-grid">
                <div>Visible: [ <BitIconButton IconName="@BitIconName.List" Visibility="BitComponentVisibility.Visible" /> ]</div>
                <div>Hidden: [ <BitIconButton Visibility="BitComponentVisibility.Hidden" /> ]</div>
                <div>Collapsed: [ <BitIconButton Visibility="BitComponentVisibility.Collapsed" /> ]</div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="ARIA" HTMLSourceCode="@example4HTMLCode" ExampleId="example4">
        <ExamplePreview>
            <div>
                <BitIconButton IconName="@BitIconName.Library" AriaDescription="Detailed description used for screen reader." Title="Button with AriaDescription" />
                <BitIconButton IconName="@BitIconName.Library" AriaHidden="true" Title="Button with AriaHidden" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Link button" HTMLSourceCode="@example5HTMLCode" ExampleId="example5">
        <ExamplePreview>
            <div>
                <BitIconButton IconName="@BitIconName.Website" Target="_blank" Href="https://github.com/bitfoundation/bitplatform" Title="Open bit platform In New Tab" />
                <BitIconButton IconName="@BitIconName.Website" Href="https://github.com/bitfoundation/bitplatform" Title="Go To bit platform" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Button Type" HTMLSourceCode="@example6HTMLCode" CSharpSourceCode="@example6CSharpCode" ExampleId="example6">
        <ExamplePreview>
            <div class="form-container">
                @if (formIsValidSubmit is false)
                {
                    <EditForm Model="buttonValidationModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" novalidate>
                        <DataAnnotationsValidator />

                        <BitTextField Label="Required" IsRequired="true" @bind-Value="buttonValidationModel.RequiredText" />
                        <ValidationMessage For="() => buttonValidationModel.RequiredText" />
                        <br />
                        <BitTextField Label="Non Required" @bind-Value="buttonValidationModel.NonRequiredText" />
                        <ValidationMessage For="() => buttonValidationModel.NonRequiredText" />
                        <br />
                        <div class="buttons-container">
                            <BitIconButton IconName="@BitIconName.SendMirrored" ButtonType="BitButtonType.Submit" Title="Submit" />
                            <BitIconButton IconName="@BitIconName.Reset" ButtonType="BitButtonType.Reset" Title="Reset" />
                            <BitIconButton IconName="@BitIconName.ButtonControl" ButtonType="BitButtonType.Button" Title="Button" />
                        </div>
                    </EditForm>
                }
                else
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        The form submitted successfully.
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code {
    private bool formIsValidSubmit;
    private ButtonValidationModel buttonValidationModel = new();

    private async Task HandleValidSubmit()
    {
        formIsValidSubmit = true;

        await Task.Delay(2000);

        buttonValidationModel = new();

        formIsValidSubmit = false;

        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        formIsValidSubmit = false;
    }
}