@page "/components/button"

<PageOutlet Url="components/button"
            Title="Button"
            Description="Button component of the bit BlazorUI components" />

<ComponentDemo ComponentName="Button"
               ComponentDescription="Buttons give people a way to trigger an action. They’re typically found in forms, dialog panels, and dialogs. Some buttons are specialized for particular tasks, such as navigation, repeated actions, or presenting menus."
               ComponentParameters="componentParameters"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Basic" HtmlCode="@example1HtmlCode" CsharpCode="@example1CsharpCode" Id="example1">
        <ExamplePreview>
            <div class="buttons-container">
                <BitButton OnClick="() => primaryCounter++">Primary (@primaryCounter)</BitButton>
                <BitButton ButtonStyle="BitButtonStyle.Standard" OnClick="() => standardCounter++">
                    Standard (@standardCounter)
                </BitButton>
                <BitButton IsEnabled="false">Disabled</BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Style & Class" HtmlCode="@example2HtmlCode" Id="example2">
        <ExamplePreview>
            <div class="buttons-container">
                <BitButton Style="color:darkblue; font-weight:bold">
                    Styled Button
                </BitButton>
                <BitButton Class="custom-class" ButtonStyle="BitButtonStyle.Standard">
                    Classed Button
                </BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Visibility" HtmlCode="@example3HtmlCode" Id="example3">
        <ExamplePreview>
            <div class="buttons-container-grid">
                <div>Visible: [ <BitButton Visibility="BitVisibility.Visible">Visible Button</BitButton> ]</div>
                <div>Hidden: [ <BitButton Visibility="BitVisibility.Hidden">Hidden Button</BitButton> ]</div>
                <div>Collapsed: [ <BitButton Visibility="BitVisibility.Collapsed">Collapsed Button</BitButton> ]</div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="ARIA" HtmlCode="@example4HtmlCode" Id="example4">
        <ExamplePreview>
            <div class="buttons-container">
                <BitButton AriaDescription="Detailed description used for screen reader.">
                    Button with AriaDescription
                </BitButton>
                <BitButton ButtonStyle="BitButtonStyle.Standard" AriaHidden="true">
                    Button with AriaHidden
                </BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Link button" HtmlCode="@example5HtmlCode" Id="example5">
        <ExamplePreview>
            <div class="buttons-container">
                <BitButton Title="Primary" Target="_blank" Href="https://bitplatform.dev">
                    Open Bit Platform In New Tab
                </BitButton>
                <BitButton Title="Standard" Href="https://bitplatform.dev" ButtonStyle="BitButtonStyle.Standard">
                    Go To Bit Platform
                </BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Custom content" HtmlCode="@example6HtmlCode" Id="example6">
        <ExamplePreview>
            <div class="buttons-container">
                <BitButton Class="custom-content">
                    <BitIcon IconName="@BitIconName.Airplane" />
                    <span>A Primary custom text</span>
                    <BitRippleLoading Size="20" />
                </BitButton>

                <BitButton Class="custom-content" ButtonStyle="BitButtonStyle.Standard">
                    <BitIcon IconName="@BitIconName.Accept" />
                    <span>A Standard custom text</span>
                    <BitRollerLoading Size="20" />
                </BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Button Type" HtmlCode="@example7HtmlCode" CsharpCode="@example7CsharpCode" Id="example7">
        <ExamplePreview>
            <div class="form-container">
                @if (formIsValidSubmit is false)
                {
                    <EditForm Model="buttonValidationModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" novalidate>
                        <DataAnnotationsValidator />

                        <BitTextField Label="Required" IsRequired="true" @bind-Value="buttonValidationModel.RequiredText" />
                        <ValidationMessage For="() => buttonValidationModel.RequiredText" />
                        <br />
                        <BitTextField Label="Non Required" @bind-Value="buttonValidationModel.NonRequiredText" />
                        <ValidationMessage For="() => buttonValidationModel.NonRequiredText" />
                        <br />
                        <div>
                            <BitButton ButtonType="BitButtonType.Submit">Submit</BitButton>
                            <BitButton ButtonType="BitButtonType.Reset">Reset</BitButton>
                            <BitButton ButtonType="BitButtonType.Button">Button</BitButton>
                        </div>
                    </EditForm>
                }
                else
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        The form submitted successfully.
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

</ComponentDemo>

@code {
    private int primaryCounter;
    private int standardCounter;

    private bool formIsValidSubmit;
    private ButtonValidationModel buttonValidationModel = new();

    private async Task HandleValidSubmit()
    {
        formIsValidSubmit = true;

        await Task.Delay(2000);

        buttonValidationModel = new();

        formIsValidSubmit = false;

        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        formIsValidSubmit = false;
    }
}