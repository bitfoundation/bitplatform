@page "/components/button"

<PageOutlet Url="components/button"
            Title="Button"
            Description="button component of the bit BlazorUI components" />

<ComponentDemo ComponentName="Button"
               ComponentDescription="Buttons give people a way to trigger an action. They’re typically found in forms, dialog panels, and dialogs. Some buttons are specialized for particular tasks, such as navigation, repeated actions, or presenting menus."
               ComponentParameters="componentParameters"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Basic" HTMLSourceCode="@example1HTMLCode" CSharpSourceCode="@example1CSharpCode" ExampleId="example1">
        <ExamplePreview>
            <div class="buttons-container">
                <BitButton OnClick="() => primaryCounter++">
                    Primary (@primaryCounter)
                </BitButton>
                <BitButton ButtonStyle="BitButtonStyle.Standard" OnClick="() => ptandardCounter++">
                    Standard (@ptandardCounter)
                </BitButton>
                <BitButton IsEnabled="false" AllowDisabledFocus="false">
                    Disabled
                </BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Style & Class" HTMLSourceCode="@example2HTMLCode" ExampleId="example2">
        <ExamplePreview>
            <div class="buttons-container">
                <BitButton Style="border-radius: 1.25rem; font-weight: bold">
                    Styled Button
                </BitButton>
                <BitButton Class="custom-button">
                    Classed Button
                </BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Visibility" HTMLSourceCode="@example3HTMLCode" ExampleId="example3">
        <ExamplePreview>
            <div class="buttons-container-grid">
                <div>Visible Button: [ <BitButton Visibility="BitComponentVisibility.Visible">Visible Button</BitButton> ]</div>
                <div>Hidden Button: [ <BitButton Visibility="BitComponentVisibility.Hidden">Hidden Button</BitButton> ]</div>
                <div>Collapsed Button: [ <BitButton Visibility="BitComponentVisibility.Collapsed">Collapsed Button</BitButton> ]</div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="ARIA" HTMLSourceCode="@example4HTMLCode" ExampleId="example4">
        <ExamplePreview>
            <div class="buttons-container">
                <BitButton AriaDescription="Detailed description used for screen reader.">
                    Button with ARIA Description
                </BitButton>
                <BitButton ButtonStyle="BitButtonStyle.Standard" AriaHidden="true">
                    Button with ARIA Hidden
                </BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Link button" HTMLSourceCode="@example5HTMLCode" ExampleId="example5">
        <ExamplePreview>
            <div class="buttons-container">
                <BitButton Title="Primary" Target="_blank" Href="https://github.com/bitfoundation/bitplatform">
                    Open Bit Platform In New Tab
                </BitButton>
                <BitButton Title="Standard" Href="https://github.com/bitfoundation/bitplatform" ButtonStyle="BitButtonStyle.Standard">
                    Go To Bit Platform
                </BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Different sizes" HTMLSourceCode="@example6HTMLCode" ExampleId="example6">
        <ExamplePreview>
            <div class="buttons-container-grid">
                <div>
                    <div>Small size</div>
                    <BitButton ButtonSize="BitButtonSize.Small">Button</BitButton>
                </div>
                <div>
                    <div>Medium size</div>
                    <BitButton ButtonSize="BitButtonSize.Medium">Button</BitButton>
                </div>
                <div>
                    <div>Large size</div>
                    <BitButton ButtonSize="BitButtonSize.Large">Button</BitButton>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Custom content" HTMLSourceCode="@example7HTMLCode" ExampleId="example7">
        <ExamplePreview>
            <div class="buttons-container">
                <BitButton Class="custom-btn-ctn" IsEnabled="true">
                    <BitIcon IconName="@BitIconName.Airplane" />
                    <BitLabel>A Text from BitLabel</BitLabel>
                    <BitRippleLoading Size="30" />
                </BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Types" HTMLSourceCode="@example8HTMLCode" CSharpSourceCode="@example8CSharpCode" ExampleId="example8">
        <ExamplePreview>
            @if (formIsValidSubmit is false)
            {
                <EditForm Model="validationButtonModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                    <DataAnnotationsValidator />

                    <ValidationSummary />

                    <BitTextField Label="Required" IsRequired="true" @bind-Value="validationButtonModel.RequiredText" />
                    <ValidationMessage For="() => validationButtonModel.RequiredText" />
                    <br />
                    <BitTextField Label="Nonrequired" @bind-Value="validationButtonModel.NonrequiredText" />
                    <ValidationMessage For="() => validationButtonModel.NonrequiredText" />
                    <br />
                    <div>
                        <BitButton ButtonType="BitButtonType.Submit">
                            Submit
                        </BitButton>
                        <BitButton ButtonType="BitButtonType.Reset">
                            Reset
                        </BitButton>
                        <BitButton ButtonType="BitButtonType.Button">
                            Button
                        </BitButton>
                    </div>
                </EditForm>
            }
            else
            {
                <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                    The form is valid to submit successfully.
                </BitMessageBar>
            }
        </ExamplePreview>
    </ComponentExampleBox>

</ComponentDemo>

@code {
    private int primaryCounter;
    private int ptandardCounter;

    private bool formIsValidSubmit;
    private ValidationButtonModel validationButtonModel = new();

    private async Task HandleValidSubmit()
    {
        formIsValidSubmit = true;

        await Task.Delay(2000);

        validationButtonModel = new();

        formIsValidSubmit = false;

        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        formIsValidSubmit = false;
    }
}