<ComponentExampleBox Title="Basic" RazorCode="@example1RazorCode" CsharpCode="@example1CsharpCode" Id="example11">
    <ExamplePreview>
        <div>
            Present a variety of basic BitMenuButton instances with different button styles: Primary, Standard, Text, and Disabled. Explore customization options for various button appearances and states.
        </div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="Primary" Items="basicItems" />

            <BitMenuButton Text="Standard"
                           Items="basicItems"
                           ButtonStyle="BitButtonStyle.Standard" />

            <BitMenuButton Text="Text"
                           Items="basicItems"
                           ButtonStyle="BitButtonStyle.Text" />

            <BitMenuButton Text="Disabled" Items="basicItems" IsEnabled="false" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Events" RazorCode="@example2RazorCode" CsharpCode="@example2CsharpCode" Id="example12">
    <ExamplePreview>
        <div>
            Demonstrate BitMenuButton instances highlighting item click events, offering versatile interactions within the menu buttons.
        </div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="Item Disabled"
                           Items="itemDisabledItems"
                           OnClick="(BitMenuButtonItem item) => example2SelectedItem = item?.Key" />

            <BitMenuButton Text="Item OnClick" Items="basicItemsOnClick" ButtonStyle="BitButtonStyle.Standard" />
        </div>
        <div class="clicked-item">Clicked Item: @example2SelectedItem</div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Split" RazorCode="@example3RazorCode" CsharpCode="@example3CsharpCode" Id="example13">
    <ExamplePreview>
        <div>
            Display split BitMenuButton instances featuring both sticky and non-sticky behaviors, providing users with flexible options for interaction and selection within the menu buttons.
        </div>
        <br />
        <div class="example-content">
            <div>
                <BitLabel>Sticky</BitLabel>
                <BitMenuButton Split Sticky
                               Items="basicItemsOnClick"
                               OnClick="(BitMenuButtonItem item) => example3SelectedItem = item?.Key" />
            </div>

            <div>
                <BitLabel>Non-Sticky</BitLabel>
                <BitMenuButton Split
                               Text="Split"
                               Items="basicItemsOnClick"
                               ButtonStyle="BitButtonStyle.Standard"
                               OnClick="(BitMenuButtonItem item) => example3SelectedItem = item?.Key" />
            </div>
        </div>
        <div class="clicked-item">Clicked Item: @example3SelectedItem</div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Icons" RazorCode="@example4RazorCode" CsharpCode="@example4CsharpCode" Id="example14">
    <ExamplePreview>
        <div>
            Present BitMenuButton instances with customized icons, enriching the visual options for representing menu buttons.
        </div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="IconName"
                           Items="basicItems"
                           IconName="@BitIconName.Edit" />

            <BitMenuButton Text="ChevronDownIcon"
                           Items="basicItems"
                           IconName="@BitIconName.Add"
                           ButtonStyle="BitButtonStyle.Standard"
                           ChevronDownIcon="@BitIconName.DoubleChevronDown" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Style & Class" RazorCode="@example5RazorCode" CsharpCode="@example5CsharpCode" Id="example15">
    <ExamplePreview>
        <div>
            Empower customization by overriding default styles and classes, allowing tailored design modifications to suit specific UI requirements.
        </div>
        <br />
        <div>Component's Style & Class:</div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="Styled Button"
                           Items="basicItems"
                           Style="width: 200px; height: 40px; background-color: #888;" />

            <BitMenuButton Text="Classed Button"
                           Items="basicItems"
                           Class="custom-class" />
        </div>
        <br /><br /><br /><br />
        <div>Item's Style & Class:</div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="Item Styled & Classed Button" Items="itemStyleClassItems" />
        </div>
        <br /><br /><br /><br />
        <div><b>Styles</b> & <b>Classes</b>:</div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="Styles"
                           Items="basicItems"
                           IconName="@BitIconName.ExpandMenu"
                           Styles="@(new() { Icon = "color: red;",
                                             Text = "color: aqua;",
                                             ItemText = "color: dodgerblue; font-size: 11px;",
                                             Overlay = "background-color: var(--bit-clr-bg-overlay);" })" />

            <BitMenuButton Text="Classes"
                           Items="basicItems"
                           IconName="@BitIconName.ExpandMenu"
                           ButtonStyle="BitButtonStyle.Standard"
                           Classes="@(new() { Icon = "custom-icon", Text = "custom-text" })" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="Visibility" RazorCode="@example6RazorCode" CsharpCode="@example6CsharpCode" Id="example16">
    <ExamplePreview>
        <div>
            You can control the display of buttons with three settings, 'Visible' for full display, 'Hidden' for concealing buttons without altering layout, and 'Collapsed' to remove the button and its space.
        </div>
        <br />
        <div class="example-content column">
            <div style="display: inline-flex">
                Visible: [ <BitMenuButton Visibility="BitVisibility.Visible"
                                          Text="Visible menu button"
                                          Items="basicItems" /> ]
            </div>
            <div style="display: inline-flex">
                Hidden: [ <BitMenuButton Visibility="BitVisibility.Hidden"
                                         Text="Hidden menu button"
                                         Items="basicItems" /> ]
            </div>
            <div style="display: inline-flex">
                Collapsed: [ <BitMenuButton Visibility="BitVisibility.Collapsed"
                                            Text="Collapsed menu button"
                                            Items="basicItems" /> ]
            </div>
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="HeaderTemplate" RazorCode="@example7RazorCode" CsharpCode="@example7CsharpCode" Id="example17">
    <ExamplePreview>
        <div>
            Display BitMenuButton instances with customized header templates, allowing unique and distinct header presentations within the menu buttons.
        </div>
        <br />
        <div class="example-content">
            <BitMenuButton Items="basicItems">
                <HeaderTemplate>
                    <BitIcon IconName="@BitIconName.Warning" />
                    <div style="font-weight: 600; color: white;">
                        Custom Header!
                    </div>
                    <BitIcon IconName="@BitIconName.Warning" />
                </HeaderTemplate>
            </BitMenuButton>

            <BitMenuButton Items="basicItems" ButtonStyle="BitButtonStyle.Standard">
                <HeaderTemplate>
                    <div style="font-weight: bold; color: #d13438;">
                        Custom Header!
                    </div>
                </HeaderTemplate>
            </BitMenuButton>
        </div>
    </ExamplePreview>
</ComponentExampleBox>

<ComponentExampleBox Title="ItemTemplate" RazorCode="@example8RazorCode" CsharpCode="@example8CsharpCode" Id="example18">
    <ExamplePreview>
        <div>
            Providing unique and styled representations for each menu item using ItemTemplate.
        </div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="Primary Button"
                           Items="itemTemplateItems"
                           IconName="@BitIconName.Edit">
                <ItemTemplate Context="item">
                    <div class="item-template-box">
                        <span style="color: @(item.Key == "add-key" ? "green" : item.Key == "edit-key" ? "yellow" : "red");">
                            @item.Text (@item.Key)
                        </span>
                    </div>
                </ItemTemplate>
            </BitMenuButton>

            <BitMenuButton Text="Standard Button"
                           Items="itemTemplateItems"
                           IconName="@BitIconName.Edit"
                           ButtonStyle="BitButtonStyle.Standard">
                <ItemTemplate Context="item">
                    <div class="item-template-box">
                        <span style="color: @(item.Key == "add-key" ? "green" : item.Key == "edit-key" ? "yellow" : "red");">
                            @item.Text (@item.Key)
                        </span>
                    </div>
                </ItemTemplate>
            </BitMenuButton>
        </div>
        <br /><br /><br /><br />
        <div>Item's Template</div>
        <br />
        <div class="example-content">
            <BitMenuButton Text="Primary Button"
                           Items="itemTemplateItems2"
                           IconName="@BitIconName.Edit" />
        </div>
    </ExamplePreview>
</ComponentExampleBox>

@code {
    private List<BitMenuButtonItem> itemTemplateItems2 = new()
    {
        new()
        {
            Text = "Add",
            Key = "add-key",
            IconName = BitIconName.Add,
            Template = (item => @<div class="item-template-box" style="color:green">@item.Text (@item.Key)</div>)
        },
        new ()
        {
            Text = "Edit",
            Key = "edit-key",
            IconName = BitIconName.Edit,
            Template = (item => @<div class="item-template-box" style="color:yellow">@item.Text (@item.Key)</div>)
        },
        new()
        {
            Text = "Delete",
            Key = "delete-key",
            IconName = BitIconName.Delete,
            Template = (item => @<div class="item-template-box" style="color:red">@item.Text (@item.Key)</div>)
        }
    };
}