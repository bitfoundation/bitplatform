@page "/components/actionbutton"
@page "/components/action-button"

<PageOutlet Url="components/actionbutton"
            Title="ActionButton"
            Description="ActionButton component of the bit BlazorUI components" />

<ComponentDemo ComponentName="ActionButton"
               ComponentDescription="Buttons give people a way to trigger an action. They’re typically found in forms, dialog panels, and dialogs. Some buttons are specialized for particular tasks, such as navigation, repeated actions, or presenting menus."
               ComponentParameters="componentParameters"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Basic" HTMLSourceCode="@example1HTMLCode" ExampleId="example1">
        <ExamplePreview>
            <div class="buttons-container">
                <BitActionButton IconName="@BitIconName.AddFriend">Create account</BitActionButton>
                <BitActionButton AllowDisabledFocus="false" IsEnabled="false" IconName="@BitIconName.UserRemove">Remove user (Disabled)</BitActionButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Style & Class" HTMLSourceCode="@example2HTMLCode" ExampleId="example2">
        <ExamplePreview>
            <div class="buttons-container">
                <BitActionButton IconName="@BitIconName.ThisPC" Style="border:2px solid #777">
                    Styled Action Button
                </BitActionButton>
                <BitActionButton IconName="@BitIconName.ThisPC" Class="custom-action-button">
                    Classed Action Button
                </BitActionButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Visibility" HTMLSourceCode="@example3HTMLCode" ExampleId="example3">
        <ExamplePreview>
            <div class="buttons-container-grid">
                <div>Visible Button: [ <BitActionButton IconName="@BitIconName.AddEvent" Visibility="BitComponentVisibility.Visible">Visible Action Button</BitActionButton> ]</div>
                <div>Hidden Button: [ <BitActionButton Visibility="BitComponentVisibility.Hidden">Hidden Action Button</BitActionButton> ]</div>
                <div>Collapsed Button: [ <BitActionButton Visibility="BitComponentVisibility.Collapsed">Collapsed Action Button</BitActionButton> ]</div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="ARIA" HTMLSourceCode="@example4HTMLCode" ExampleId="example4">
        <ExamplePreview>
            <div class="buttons-container">
                <BitActionButton IconName="@BitIconName.Library" AriaDescription="Detailed description used for screen reader.">
                    Action Button with Aria Description
                </BitActionButton>
                <BitActionButton IconName="@BitIconName.Library" AriaHidden="true">
                    Action Button with Aria Hidden
                </BitActionButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Link button" HTMLSourceCode="@example5HTMLCode" ExampleId="example5">
        <ExamplePreview>
            <div class="buttons-container">
                <BitActionButton IconName="@BitIconName.Website" Target="_blank" Href="https://github.com/bitfoundation/bitplatform">
                    Open Bit Platform In New Tab
                </BitActionButton>
                <BitActionButton IconName="@BitIconName.Website" Href="https://github.com/bitfoundation/bitplatform" ButtonStyle="BitButtonStyle.Standard">
                    Go To Bit Platform
                </BitActionButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Custom content" HTMLSourceCode="@example6HTMLCode" ExampleId="example6">
        <ExamplePreview>
            <div class="buttons-container">
                <BitActionButton IconName="@BitIconName.AddFriend">
                    <div class="custom-btn-ctn">
                        <span>A Text from BitLabel</span>
                        <BitSpinnerLoading Size="20" />
                    </div>
                </BitActionButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Button Type" HTMLSourceCode="@example7HTMLCode" CSharpSourceCode="@example7CSharpCode" ExampleId="example7">
        <ExamplePreview>
            <div class="form-container">
                @if (formIsValidSubmit is false)
                {
                    <EditForm Model="buttonValidationModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" novalidate>
                        <DataAnnotationsValidator />

                        <BitTextField Label="Required" IsRequired="true" @bind-Value="buttonValidationModel.RequiredText" />
                        <ValidationMessage For="() => buttonValidationModel.RequiredText" />
                        <br />
                        <BitTextField Label="Nonrequired" @bind-Value="buttonValidationModel.NonRequiredText" />
                        <ValidationMessage For="() => buttonValidationModel.NonRequiredText" />
                        <br />
                        <div>
                            <BitActionButton IconName="@BitIconName.SendMirrored" ButtonType="BitButtonType.Submit">Submit</BitActionButton>
                            <BitActionButton IconName="@BitIconName.Reset"  ButtonType="BitButtonType.Reset">Reset</BitActionButton>
                            <BitActionButton IconName="@BitIconName.ButtonControl" ButtonType="BitButtonType.Button">Button</BitActionButton>
                        </div>
                    </EditForm>
                }
                else
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        The form submitted successfully.
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

</ComponentDemo>

@code {
    private bool formIsValidSubmit;
    private ButtonValidationModel buttonValidationModel = new();

    private async Task HandleValidSubmit()
    {
        formIsValidSubmit = true;

        await Task.Delay(2000);

        buttonValidationModel = new();

        formIsValidSubmit = false;

        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        formIsValidSubmit = false;
    }
}