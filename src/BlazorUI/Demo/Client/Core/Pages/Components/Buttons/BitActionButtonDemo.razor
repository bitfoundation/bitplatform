@page "/components/actionbutton"
@page "/components/action-button"

<PageOutlet Url="components/actionbutton"
            Title="ActionButton"
            Description="actionbutton component of the bit BlazorUI components" />

<ComponentDemo ComponentName="ActionButton"
               ComponentDescription="Buttons give people a way to trigger an action. They’re typically found in forms, dialog panels, and dialogs. Some buttons are specialized for particular tasks, such as navigation, repeated actions, or presenting menus."
               ComponentParameters="componentParameters"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Basic" HTMLSourceCode="@example1HTMLCode" ExampleId="example1">
        <ExamplePreview>
            <div>
                <BitActionButton IconName="@BitIconName.AddFriend">Create account</BitActionButton>
                <BitActionButton AllowDisabledFocus="false" IsEnabled="false" IconName="@BitIconName.UserRemove">Remove user (Disabled)</BitActionButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Style & Class" HTMLSourceCode="@example2HTMLCode" ExampleId="example2">
        <ExamplePreview>
            <div>
                <BitActionButton IconName="@BitIconName.ThisPC" Style="font-size:16px; border:2px solid #32385B; border-radius: 1rem;">
                    Styled Action Button
                </BitActionButton>
                <BitActionButton IconName="@BitIconName.ThisPC" Class="custom-action-button">
                    Classed Action Button
                </BitActionButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Visibility" HTMLSourceCode="@example3HTMLCode" ExampleId="example3">
        <ExamplePreview>
            <div class="buttons-container">
                <div>Visible Button: [ <BitActionButton IconName="@BitIconName.AddEvent" Visibility="BitComponentVisibility.Visible">Visible Action Button</BitActionButton> ]</div>
                <div>Hidden Button: [ <BitActionButton Visibility="BitComponentVisibility.Hidden">Hidden Action Button</BitActionButton> ]</div>
                <div>Collapsed Button: [ <BitActionButton Visibility="BitComponentVisibility.Collapsed">Collapsed Action Button</BitActionButton> ]</div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="ARIA" HTMLSourceCode="@example4HTMLCode" ExampleId="example4">
        <ExamplePreview>
            <div>
                <BitActionButton IconName="@BitIconName.Library" AriaDescription="Detailed description used for screen reader.">
                    Action Button with Aria Description
                </BitActionButton>
                <BitActionButton IconName="@BitIconName.Library" AriaHidden="true">
                    Action Button with Aria Hidden
                </BitActionButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Link button" HTMLSourceCode="@example5HTMLCode" ExampleId="example5">
        <ExamplePreview>
            <div>
                <BitActionButton IconName="@BitIconName.Website" Target="_blank" Href="https://github.com/bitfoundation/bitplatform">
                    Open Bit Platform In New Tab
                </BitActionButton>
                <BitActionButton IconName="@BitIconName.Website" Href="https://github.com/bitfoundation/bitplatform" ButtonStyle="BitButtonStyle.Standard">
                    Go To Bit Platform
                </BitActionButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Different sizes" HTMLSourceCode="@example6HTMLCode" ExampleId="example6">
        <ExamplePreview>
            <div class="buttons-container-grid">
                <div>
                    <BitLabel>Small size</BitLabel>
                    <BitActionButton ButtonSize=BitButtonSize.Small IconName="@BitIconName.AddFriend">Button</BitActionButton>
                </div>
                <div>
                    <BitLabel>Medium size</BitLabel>
                    <BitActionButton ButtonSize=BitButtonSize.Medium IconName="@BitIconName.AddFriend">Button</BitActionButton>
                </div>
                <div>
                    <BitLabel>Large size</BitLabel>
                    <BitActionButton ButtonSize=BitButtonSize.Large IconName="@BitIconName.AddFriend">Button</BitActionButton>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Custom content" HTMLSourceCode="@example7HTMLCode" ExampleId="example7">
        <ExamplePreview>
            <div>
                <BitActionButton IconName="@BitIconName.AddFriend">
                    <div class="custom-btn-ctn">
                        <BitLabel>A Text from BitLabel</BitLabel>
                        <BitSpinnerLoading Size="30" />
                    </div>
                </BitActionButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Types" HTMLSourceCode="@example8HTMLCode" CSharpSourceCode="@example8CSharpCode" ExampleId="example8">
        <ExamplePreview>
            <div class="form-container">
                @if (formIsValidSubmit is false)
                {
                    <EditForm Model="validationButtonModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                        <DataAnnotationsValidator />

                        <ValidationSummary />

                        <BitTextField Label="Required" IsRequired="true" @bind-Value="validationButtonModel.RequiredText" />
                        <ValidationMessage For="() => validationButtonModel.RequiredText" />
                        <br />
                        <BitTextField Label="Nonrequired" @bind-Value="validationButtonModel.NonRequiredText" />
                        <ValidationMessage For="() => validationButtonModel.NonRequiredText" />
                        <br />
                        <div>
                            <BitActionButton IconName="@BitIconName.Completed" ButtonType="BitButtonType.Submit">
                                Submit
                            </BitActionButton>
                            <BitActionButton IconName="@BitIconName.Refresh"  ButtonType="BitButtonType.Reset">
                                Reset
                            </BitActionButton>
                            <BitActionButton IconName="@BitIconName.Touch" ButtonType="BitButtonType.Button">
                                Button
                            </BitActionButton>
                        </div>
                    </EditForm>
                }
                else
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        The form is valid to submit successfully.
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

</ComponentDemo>

@code {
    private int primaryCounter;
    private int ptandardCounter;

    private bool formIsValidSubmit;
    private ButtonValidationModel validationButtonModel = new();

    private async Task HandleValidSubmit()
    {
        formIsValidSubmit = true;

        await Task.Delay(2000);

        validationButtonModel = new();

        formIsValidSubmit = false;

        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        formIsValidSubmit = false;
    }
}