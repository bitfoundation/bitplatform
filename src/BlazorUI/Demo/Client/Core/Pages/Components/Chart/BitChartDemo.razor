@page "/components/chart"

<PageOutlet Url="components/chart"
            Title="Chart"
            Description="chart component of the bit BlazorUI components" />

<ComponentDemo ComponentName="Chart"
               ComponentDescription="Simple and flexible charting component for data visualization, which supports eight chart types: bar, line, area, pie, bubble, radar, polar, and scatter."
               Notes="To use this component, you need to install the `Bit.BlazorUI.Extras` nuget package, as described in the Optional steps of the Getting started page."
               ComponentParameters="componentParameters">
    <ComponentExampleBox Title="Bar Chart" CsharpCode="@example1CSharpCode" HtmlCode="@example1HTMLCode" Id="Example1">
        <ExamplePreview>
            <div class="example-desc">
                A bar chart provides a way of showing data values represented as vertical bars. It is sometimes used to show trend data, and the comparison of multiple data sets side by side.
            </div>
            <div class="chart-wrapper">
                <div class="chart-container">
                    <BitChart Config="_barChartConfigExample" @ref="_barChartExample1" />
                </div>
            </div>
            <div>
                <BitButton Style="margin:5px" ButtonStyle="BitButtonStyle.Primary" OnClick="RandomizeBarData">Randomize Data</BitButton>
                <BitButton Style="margin:5px" ButtonStyle="BitButtonStyle.Standard" OnClick="AddBarDataset">Add Dataset</BitButton>
                <BitButton Style="margin:5px" ButtonStyle="BitButtonStyle.Standard" OnClick="RemoveBarDataset">Remove Dataset</BitButton>
                <BitButton Style="margin:5px" ButtonStyle="BitButtonStyle.Standard" OnClick="AddBarData">Add Data</BitButton>
                <BitButton Style="margin:5px" ButtonStyle="BitButtonStyle.Standard" OnClick="RemoveBarData">Remove Data</BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Horizontal Bar Chart" CsharpCode="@example2CSharpCode" HtmlCode="@example2HTMLCode" Id="Example2">
        <ExamplePreview>
            <div class="example-desc">
                A horizontal bar chart is a variation on a vertical bar chart. It is sometimes used to show trend data, and the comparison of multiple data sets side by side. To achieve this you will have to set the horizontal param in the BitChartBarConfig constructor to 'true'. The default for this property is 'false' and thus will show vertical bars.
            </div>
            <div class="chart-wrapper">
                <div class="chart-container">
                    <BitChart Config="_horizontalBarChartConfigExample" @ref="_horizontalBarChartExample" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Stacked Bar Chart" CsharpCode="@example3CSharpCode" HtmlCode="@example3HTMLCode" Id="Example3">
        <ExamplePreview>
            <div class="example-desc">
                Bar charts can be configured into stacked bar charts by changing the settings on the X and Y axes to enable stacking. Stacked bar charts can be used to show how one data series is made up of a number of smaller pieces.
            </div>
            <div class="chart-wrapper">
                <div class="chart-container">
                    <BitChart Config="_stackedBarChartConfigExample" @ref="_stackedBarChartExample" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Linear Line Chart" CsharpCode="@example4CSharpCode" HtmlCode="@example4HTMLCode" Id="Example4">
        <ExamplePreview>
            <div class="example-desc">
                A line chart is a way of plotting data points on a line. Often, it is used to show trend data, or the comparison of two data sets.
            </div>
            <div class="chart-wrapper">
                <div class="chart-container">
                    <BitChart Config="_lineChartConfigExample" @ref="_lineChartExample" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Pie Chart" CsharpCode="@example5CSharpCode" HtmlCode="@example5HTMLCode" Id="Example5">
        <ExamplePreview>
            <div class="example-desc">
                Pie and doughnut charts are probably the most commonly used charts. They are divided into segments, the arc of each segment shows the proportional value of each piece of data.They are excellent at showing the relational proportions between data.
            </div>
            <div class="chart-wrapper">
                <div class="chart-container">
                    <BitChart Config="_pieChartConfigExample" @ref="_pieChartExample" />
                </div>
            </div>
            <div>
                <BitButton Style="margin:5px" ButtonStyle="BitButtonStyle.Primary" OnClick="RandomizePieData">Randomize Data</BitButton>
                <BitButton Style="margin:5px" ButtonStyle="BitButtonStyle.Standard" OnClick="AddPieDataset">Add Dataset</BitButton>
                <BitButton Style="margin:5px" ButtonStyle="BitButtonStyle.Standard" OnClick="RemovePieDataset">Remove Dataset</BitButton>
                <BitButton Style="margin:5px" ButtonStyle="BitButtonStyle.Standard" OnClick="AddPieData">Add Data</BitButton>
                <BitButton Style="margin:5px" ButtonStyle="BitButtonStyle.Standard" OnClick="RemovePieData">Remove Data</BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Doughnut Chart" CsharpCode="@example6CSharpCode" HtmlCode="@example6HTMLCode" Id="Example6">
        <ExamplePreview>
            <div class="example-desc">
                The doughnut chart is the same as the Pie chart. To achieve this you will have to set the useDoughnutType param in the BitChartPieConfig constructor to 'true'.
            </div>
            <div class="chart-wrapper">
                <div class="chart-container">
                    <BitChart Config="_doughnutChartConfigExample" @ref="_doughnutChartExample" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code {
    private const int InitalCount = 5;

    private BitChartBarConfig _barChartConfigExample = default!;
    private BitChart _barChartExample1 = default!;

    private BitChartBarConfig _horizontalBarChartConfigExample = default!;
    private BitChart _horizontalBarChartExample = default!;

    private BitChartBarConfig _stackedBarChartConfigExample = default!;
    private BitChart _stackedBarChartExample = default!;

    private BitChartLineConfig _lineChartConfigExample = default!;
    private BitChart _lineChartExample = default!;

    private BitChartPieConfig _pieChartConfigExample = default!;
    private BitChart _pieChartExample = default!;

    private BitChartPieConfig _doughnutChartConfigExample = default!;
    private BitChart _doughnutChartExample = default!;

    protected override void OnInitialized()
    {
        InitBarChartExample();
        InitHorizontalBarChartExample();
        InitStackedBarChartExample();
        InitlineChartExample();
        InitPieChartExample();
        InitDoughnutChartExample();
    }

    private void InitBarChartExample()
    {
        _barChartConfigExample = new BitChartBarConfig
            {
                Options = new BitChartBarOptions()
                {
                    Responsive = true,
                    Title = new BitChartOptionsTitle
                    {
                        Display = true,
                        Text = "BitChart bar Chart"
                    }
                }
            };

        BitChartBarDataset<int> dataset = new BitChartBarDataset<int>(BitChartDemoUtils.RandomScalingFactor(InitalCount))
            {
                Label = "Dataset 1",
                BackgroundColor = BitChartDemoColors.All.Take(InitalCount).Select(c => BitChartColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(128, c))).ToArray()
            };
        _barChartConfigExample.Data.Labels.AddRange(BitChartDemoUtils.Months.Take(InitalCount));
        _barChartConfigExample.Data.Datasets.Add(dataset);
    }

    private void InitHorizontalBarChartExample()
    {
        _horizontalBarChartConfigExample = new BitChartBarConfig(horizontal: true)
            {
                Options = new BitChartBarOptions
                {
                    Responsive = true,
                    Legend = new BitChartLegend
                    {
                        Position = BitChartPosition.Right
                    },
                    Title = new BitChartOptionsTitle
                    {
                        Display = true,
                        Text = "BitChart Horizontal Bar Chart"
                    }
                }
            };

        IDataset<int> dataset1 = new BitChartBarDataset<int>(BitChartDemoUtils.RandomScalingFactor(InitalCount, -100), horizontal: true)
            {
                Label = "My first dataset",
                BackgroundColor = BitChartColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(128, BitChartDemoColors.Red)),
                BorderColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Red),
                BorderWidth = 1
            };

        IDataset<int> dataset2 = new BitChartBarDataset<int>(BitChartDemoUtils.RandomScalingFactor(InitalCount, -100), horizontal: true)
            {
                Label = "My second dataset",
                BackgroundColor = BitChartColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(128, BitChartDemoColors.Blue)),
                BorderColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Blue),
                BorderWidth = 1
            };

        _horizontalBarChartConfigExample.Data.Labels.AddRange(BitChartDemoUtils.Months.Take(InitalCount));
        _horizontalBarChartConfigExample.Data.Datasets.Add(dataset1);
        _horizontalBarChartConfigExample.Data.Datasets.Add(dataset2);
    }

    private void InitStackedBarChartExample()
    {
        _stackedBarChartConfigExample = new BitChartBarConfig
            {
                Options = new BitChartBarOptions()
                {
                    Responsive = true,
                    Title = new BitChartOptionsTitle
                    {
                        Display = true,
                        Text = "BitChart stacked bar Chart"
                    },
                    Tooltips = new BitChartTooltips
                    {
                        Mode = BitChartInteractionMode.Index,
                        Intersect = false
                    },
                    Scales = new BitChartBarScales
                    {
                        XAxes = new List<BitChartCartesianAxis>
                    {
                        new BitChartBarCategoryAxis
                        {
                            Stacked = true
                        }
                    },
                        YAxes = new List<BitChartCartesianAxis>
                    {
                        new BitChartBarLinearCartesianAxis
                        {
                            Stacked = true
                        }
                    }
                    }
                }
            };

        IDataset<int> dataset1 = new BitChartBarDataset<int>(BitChartDemoUtils.RandomScalingFactor(InitalCount))
            {
                Label = "Dataset 1",
                BackgroundColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Red)
            };

        IDataset<int> dataset2 = new BitChartBarDataset<int>(BitChartDemoUtils.RandomScalingFactor(InitalCount))
            {
                Label = "Dataset 2",
                BackgroundColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Blue)
            };

        IDataset<int> dataset3 = new BitChartBarDataset<int>(BitChartDemoUtils.RandomScalingFactor(InitalCount))
            {
                Label = "Dataset 3",
                BackgroundColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Green)
            };


        _stackedBarChartConfigExample.Data.Datasets.Add(dataset1);
        _stackedBarChartConfigExample.Data.Datasets.Add(dataset2);
        _stackedBarChartConfigExample.Data.Datasets.Add(dataset3);
        _stackedBarChartConfigExample.Data.Labels.AddRange(BitChartDemoUtils.Months.Take(InitalCount));
    }

    private void InitlineChartExample()
    {
        _lineChartConfigExample = new BitChartLineConfig
            {
                Options = new BitChartLineOptions
                {
                    Responsive = true,
                    Title = new BitChartOptionsTitle
                    {
                        Display = true,
                        Text = "BitChart Line Chart"
                    },
                    Tooltips = new BitChartTooltips
                    {
                        Mode = BitChartInteractionMode.Nearest,
                        Intersect = true
                    },
                    Hover = new BitChartHover
                    {
                        Mode = BitChartInteractionMode.Nearest,
                        Intersect = true
                    },
                    Scales = new BitChartScales
                    {
                        XAxes = new List<BitChartCartesianAxis>
                    {
                        new BitChartCategoryAxis
                        {
                            ScaleLabel = new BitChartScaleLabel
                            {
                                LabelString = "Month"
                            }
                        }
                    },
                        YAxes = new List<BitChartCartesianAxis>
                    {
                        new BitChartLinearCartesianAxis
                        {
                            ScaleLabel = new BitChartScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                    }
                }
            };

        IDataset<int> dataset1 = new BitChartLineDataset<int>(BitChartDemoUtils.RandomScalingFactor(InitalCount))
            {
                Label = "My first dataset",
                BackgroundColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Red),
                BorderColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Red),
                Fill = BitChartFillingMode.Disabled
            };

        IDataset<int> dataset2 = new BitChartLineDataset<int>(BitChartDemoUtils.RandomScalingFactor(InitalCount))
            {
                Label = "My second dataset",
                BackgroundColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Blue),
                BorderColor = BitChartColorUtil.FromDrawingColor(BitChartDemoColors.Blue),
                Fill = BitChartFillingMode.Disabled
            };

        _lineChartConfigExample.Data.Labels.AddRange(BitChartDemoUtils.Months.Take(InitalCount));
        _lineChartConfigExample.Data.Datasets.Add(dataset1);
        _lineChartConfigExample.Data.Datasets.Add(dataset2);
    }

    private void InitPieChartExample()
    {
        _pieChartConfigExample = new BitChartPieConfig
            {
                Options = new BitChartPieOptions
                {
                    Responsive = true,
                    Title = new BitChartOptionsTitle
                    {
                        Display = true,
                        Text = "BitChart Pie Chart"
                    }
                }
            };

        BitChartPieDataset<int> dataset = new BitChartPieDataset<int>(BitChartDemoUtils.RandomScalingFactor(InitalCount))
            {
                BackgroundColor = BitChartDemoColors.All.Take(InitalCount).Select(c => BitChartColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(220, c))).ToArray()
            };
        _pieChartConfigExample.Data.Labels.AddRange(BitChartDemoUtils.Months.Take(InitalCount));
        _pieChartConfigExample.Data.Datasets.Add(dataset);
    }

    private void InitDoughnutChartExample()
    {
        _doughnutChartConfigExample = new BitChartPieConfig(useDoughnutType: true)
            {
                Options = new BitChartPieOptions
                {
                    Responsive = true,
                    Title = new BitChartOptionsTitle
                    {
                        Display = true,
                        Text = "BitChart Doughnut Chart"
                    }
                }
            };

        BitChartPieDataset<int> dataset = new BitChartPieDataset<int>(BitChartDemoUtils.RandomScalingFactor(InitalCount))
            {
                BackgroundColor = BitChartDemoColors.All.Take(InitalCount).Select(c => BitChartColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(220, c))).ToArray()
            };
        _doughnutChartConfigExample.Data.Labels.AddRange(BitChartDemoUtils.Months.Take(InitalCount));
        _doughnutChartConfigExample.Data.Datasets.Add(dataset);
    }

    private void RandomizeBarData()
    {
        foreach (IDataset<int> dataset in _barChartConfigExample.Data.Datasets)
        {
            int count = dataset.Count;
            dataset.Clear();
            for (int i = 0; i < count; i++)
            {
                if (BitChartDemoUtils._rng.NextDouble() < 0.2)
                {
                    dataset.Add(0);
                }
                else
                {
                    dataset.Add(BitChartDemoUtils.RandomScalingFactor());
                }
            }
        }

        _barChartExample1.Update();
    }

    private void AddBarDataset()
    {
        System.Drawing.Color color = BitChartDemoColors.All[_barChartConfigExample.Data.Datasets.Count % BitChartDemoColors.All.Count];
        IDataset<int> dataset = new BitChartBarDataset<int>(BitChartDemoUtils.RandomScalingFactor(_barChartConfigExample.Data.Labels.Count))
            {
                Label = $"Dataset {_barChartConfigExample.Data.Datasets.Count + 1}",
                BackgroundColor = BitChartColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(128, color)),
                BorderColor = BitChartColorUtil.FromDrawingColor(color),
                BorderWidth = 1
            };

        _barChartConfigExample.Data.Datasets.Add(dataset);
        _barChartExample1.Update();
    }

    private void RemoveBarDataset()
    {
        IList<IBitChartDataset> datasets = _barChartConfigExample.Data.Datasets;
        if (datasets.Count == 0)
            return;

        datasets.RemoveAt(datasets.Count - 1);
        _barChartExample1.Update();
    }

    private void AddBarData()
    {
        if (_barChartConfigExample.Data.Datasets.Count == 0)
            return;

        string month = BitChartDemoUtils.Months[_barChartConfigExample.Data.Labels.Count % BitChartDemoUtils.Months.Count];
        _barChartConfigExample.Data.Labels.Add(month);

        foreach (IDataset<int> dataset in _barChartConfigExample.Data.Datasets)
        {
            dataset.Add(BitChartDemoUtils.RandomScalingFactor());
        }

        _barChartExample1.Update();
    }

    private void RemoveBarData()
    {
        if (_barChartConfigExample.Data.Datasets.Count == 0 ||
            _barChartConfigExample.Data.Labels.Count == 0)
        {
            return;
        }

        _barChartConfigExample.Data.Labels.RemoveAt(_barChartConfigExample.Data.Labels.Count - 1);

        foreach (IDataset<int> dataset in _barChartConfigExample.Data.Datasets)
        {
            dataset.RemoveAt(dataset.Count - 1);
        }

        _barChartExample1.Update();
    }

    private void RandomizePieData()
    {
        foreach (IDataset<int> dataset in _pieChartConfigExample.Data.Datasets)
        {
            int count = dataset.Count;
            dataset.Clear();
            for (int i = 0; i < count; i++)
            {
                if (BitChartDemoUtils._rng.NextDouble() < 0.2)
                {
                    dataset.Add(0);
                }
                else
                {
                    dataset.Add(BitChartDemoUtils.RandomScalingFactor());
                }
            }
        }

        _pieChartExample.Update();
    }

    private void AddPieDataset()
    {
        int count = _pieChartConfigExample.Data.Labels.Count;
        BitChartPieDataset<int> dataset = new BitChartPieDataset<int>(BitChartDemoUtils.RandomScalingFactor(count, -100, 100))
            {
                BackgroundColor = BitChartDemoColors.All.Take(count).Select(BitChartColorUtil.FromDrawingColor).ToArray()
            };

        _pieChartConfigExample.Data.Datasets.Add(dataset);
        _pieChartExample.Update();
    }

    private void RemovePieDataset()
    {
        IList<IBitChartDataset> datasets = _pieChartConfigExample.Data.Datasets;
        if (datasets.Count == 0)
            return;

        datasets.RemoveAt(0);
        _pieChartExample.Update();
    }

    private void AddPieData()
    {
        if (_pieChartConfigExample.Data.Datasets.Count == 0)
            return;

        string month = BitChartDemoUtils.Months[_pieChartConfigExample.Data.Labels.Count % BitChartDemoUtils.Months.Count];
        _pieChartConfigExample.Data.Labels.Add(month);

        foreach (IDataset<int> dataset in _pieChartConfigExample.Data.Datasets)
        {
            dataset.Add(BitChartDemoUtils.RandomScalingFactor());
        }

        _pieChartExample.Update();
    }

    private void RemovePieData()
    {
        if (_pieChartConfigExample.Data.Datasets.Count == 0 ||
            _pieChartConfigExample.Data.Labels.Count == 0)
        {
            return;
        }

        _pieChartConfigExample.Data.Labels.RemoveAt(_pieChartConfigExample.Data.Labels.Count - 1);

        foreach (IDataset<int> dataset in _pieChartConfigExample.Data.Datasets)
        {
            dataset.RemoveAt(dataset.Count - 1);
        }

        _pieChartExample.Update();
    }
}