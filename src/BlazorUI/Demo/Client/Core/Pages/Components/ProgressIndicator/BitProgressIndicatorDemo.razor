@page "/components/progressindicator"
@page "/components/progress-indicator"

<PageOutlet Url="components/progressindicator"
            Title="ProgressIndicator"
            Description="progressindicator component of the bit BlazorUI components" />

<ComponentDemo ComponentName="ProgressIndicator"
               ComponentDescription="BitProgressIndicators are used to show the completion status of an operation lasting more than 2 seconds.
If the state of progress cannot be determined, use a Spinner instead.
ProgressIndicators can appear in a new panel, a flyout, under the UI initiating the operation, or even replacing the initiating UI,
as long as the UI can return if the operation is canceled or is stopped. Real-world examples include copying files to a storage location, saving edits to a file, and more.
Use units that are informative and relevant to give the best idea to users of how long the operation will take to complete.
Avoid time units as they are rarely accurate enough to be trustworthy. Also, combine steps of a complex operation into one total bar to avoid “rewinding” the bar.
Instead change the operation description to reflect the change if necessary.
Bars moving backwards reduce confidence in the service."
               ComponentParameters="componentParameters">
    <ComponentExampleBox Title="BitProgressIndicator" RazorCode="@example1RazorCode" CsharpCode="@example1CsharpCode" Id="example1">
        <ExamplePreview>
            <BitProgressIndicator Label="Example title"
                                  Description="@Description"
                                  PercentComplete="@CompletedPercent"
                                  BarHeight="50" />
            <div>
                <BitButton OnClick="StartProgress">Start Progress</BitButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Indeterminate" RazorCode="@example2RazorCode" Id="example2">
        <ExamplePreview>
            <BitProgressIndicator Label="Example title"
                                  Description="Example description"
                                  BarHeight="20" />
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code {
    private int CompletedPercent;
    private string Description = "Push button to start!";

    private async Task StartProgress()
    {
        CompletedPercent = 0;

        while (CompletedPercent <= 100)
        {
            if (CompletedPercent == 100)
            {
                Description = $"Completed !";
                break;
            }
            else
            {
                CompletedPercent++;
                Description = $"{CompletedPercent}%";
            }

            StateHasChanged();
            await Task.Delay(100);
        }
    }
}
