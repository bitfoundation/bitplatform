@page "/components/otpinput"
@page "/components/otp-input"

<PageOutlet Url="components/otpinput"
            Title="OtpInput"
            Description="otpinput component of the bit BlazorUI components" />

<ComponentDemo ComponentName="OtpInput"
               ComponentDescription="The OTP input is used for MFA procedure of authenticating users by a one-time password."
               ComponentParameters="componentParameters"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Basic" HTMLSourceCode="@example1HtmlCode" ExampleId="example1">
        <ExamplePreview>
            <div class="example-box">
                <div>
                    <BitLabel>Basic</BitLabel>
                    <BitOtpInput Length="4" @bind-Value="basicOtpInput" />
                    <BitLabel>Output: [@basicOtpInput]</BitLabel>
                </div>
                <br />
                <div>
                    <BitLabel>Disabled</BitLabel>
                    <BitOtpInput Length="4" IsEnabled="false" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="AutoFocus" HTMLSourceCode="@example2HtmlCode" CSharpSourceCode="@example2CSharpCode" ExampleId="example2">
        <ExamplePreview>
            <div>
                <BitOtpInput Length="4" AutoFocus="true" @bind-Value="autoFocusOtpInput" />
                <BitLabel>Output: [@autoFocusOtpInput]</BitLabel>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="InputType" HTMLSourceCode="@example3HtmlCode" CSharpSourceCode="@example3CSharpCode" ExampleId="example3">
        <ExamplePreview>
            <div class="example-box">
                <div>
                    <BitLabel>Text</BitLabel>
                    <BitOtpInput Length="4" InputType="BitOtpInputType.Text" @bind-Value="textOtpInput" />
                    <BitLabel>Output: [@textOtpInput]</BitLabel>
                </div>
                <br />
                <div>
                    <BitLabel>Number</BitLabel>
                    <BitOtpInput Length="4" InputType="BitOtpInputType.Number" @bind-Value="numberOtpInput" />
                    <BitLabel>Output: [@numberOtpInput]</BitLabel>
                </div>
                <br />
                <div>
                    <BitLabel>Password</BitLabel>
                    <BitOtpInput Length="4" InputType="BitOtpInputType.Password" @bind-Value="passwordOtpInput" />
                    <BitLabel>Output: [@passwordOtpInput]</BitLabel>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Direction" HTMLSourceCode="@example4HtmlCode" CSharpSourceCode="@example4CSharpCode" ExampleId="example4">
        <ExamplePreview>
            <div class="example-box">
                <div>
                    <BitLabel>Left to right</BitLabel>
                    <BitOtpInput Length="4" Direction="BitOtpInputDirection.LeftToRight" @bind-Value="leftToRightOtpInput" />
                    <BitLabel>Output: [@leftToRightOtpInput]</BitLabel>
                </div>
                <br />
                <div>
                    <BitLabel>Right to left</BitLabel>
                    <BitOtpInput Length="4" Direction="BitOtpInputDirection.RightToLeft" @bind-Value="rightToLeftOtpInput" />
                    <BitLabel>Output: [@rightToLeftOtpInput]</BitLabel>
                </div>
            </div>
            <br />
            <div class="example-box row">
                <div>
                    <BitLabel>Top to bottom</BitLabel>
                    <BitOtpInput Length="4" Direction="BitOtpInputDirection.TopToBottom" @bind-Value="topToBottomOtpInput" />
                    <BitLabel>Output: [@topToBottomOtpInput]</BitLabel>
                </div>
                <br />
                <div>
                    <BitLabel>Bottom to top</BitLabel>
                    <BitOtpInput Length="4" Direction="BitOtpInputDirection.BottomToTop" @bind-Value="BottomToTopOtpInput" />
                    <BitLabel>Output: [@BottomToTopOtpInput]</BitLabel>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Controlled" HTMLSourceCode="@example5HtmlCode" CSharpSourceCode="@example5CSharpCode" ExampleId="example5">
        <ExamplePreview>
            <div class="example-box">
                <div>
                    <BitLabel>One-way</BitLabel>
                    <BitOtpInput Length="4" Value="@oneWayBindOtpInput" />
                    <BitTextField Style="margin-top: 5px;" @bind-Value="oneWayBindOtpInput" />
                </div>
                <br />
                <div>
                    <BitLabel>Two-way</BitLabel>
                    <BitOtpInput Length="4" @bind-Value="twoWayBindOtpInput" />
                    <BitTextField Style="margin-top: 5px;" @bind-Value="twoWayBindOtpInput" />
                </div>
                <br />
                <div>
                    <BitLabel>OnChange</BitLabel>
                    <BitOtpInput Length="4" OnChange="(value) => onChangeBindOtpInput = value" />
                    <BitLabel>Output: [@onChangeBindOtpInput]</BitLabel>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Validation" HTMLSourceCode="@example6HtmlCode" CSharpSourceCode="@example6CSharpCode" ExampleId="example6">
        <ExamplePreview>
            <div class="example-box">
                @if (formIsValidSubmit is false)
                {
                    <EditForm Model="validationOtpInputModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                        <DataAnnotationsValidator />

                        <div class="validation-summary">
                            <ValidationSummary />
                        </div>

                        <div>
                            <BitOtpInput Length="6" @bind-Value="validationOtpInputModel.OtpValue" />
                            <ValidationMessage For="() => validationOtpInputModel.OtpValue" />
                        </div>

                        <BitButton Style="margin-top: 10px;" ButtonType="BitButtonType.Submit">
                            Submit
                        </BitButton>
                    </EditForm>
                }
                else
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        The form is valid to submit successfully.
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code {
    private string? basicOtpInput;
    private string? autoFocusOtpInput;
    private string? textOtpInput;
    private string? numberOtpInput;
    private string? passwordOtpInput;
    private string? leftToRightOtpInput;
    private string? rightToLeftOtpInput;
    private string? topToBottomOtpInput;
    private string? BottomToTopOtpInput;
    private string? oneWayBindOtpInput;
    private string? twoWayBindOtpInput;
    private string? onChangeBindOtpInput;

    private ValidationOtpInputModel validationOtpInputModel = new();
    public bool formIsValidSubmit;
    private async Task HandleValidSubmit()
    {
        formIsValidSubmit = true;

        await Task.Delay(3000);

        formIsValidSubmit = false;

        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        formIsValidSubmit = false;
    }
}