@page "/components/dropdown"

@inject HttpClient HttpClient
@inject NavigationManager NavManager

<PageOutlet Url="components/dropdown"
            Title="Dropdown"
            Description="dropdown component of the bit BlazorUI components" />

<ComponentDemo ComponentName="Dropdown"
               ComponentParameters="componentParameters"
               ComponentDescription="A dropdown is a list in which the selected item is always visible while other items are visible on demand by clicking a dropdown button. Dropdowns are typically used for forms.">
    <ComponentExampleBox Title="Basic" HTMLSourceCode="@example1HTMLCode" CSharpSourceCode="@example1CSharpCode" ExampleId="example1">
        <ExamplePreview>
            <div class="example-content">
                <BitDropdown Label="Single select"
                             Items="GetDropdownItems()"
                             Placeholder="Select an option" />
                <BitDropdown Label="Multi select"
                             Items="GetDropdownItems()"
                             Placeholder="Select options"
                             IsMultiSelect="true" />
                <BitDropdown Label="Disabled with defaultValue"
                             Items="GetDropdownItems()"
                             Placeholder="Select an option"
                             IsEnabled="false"
                             DefaultValue="v-bro" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Controlled" HTMLSourceCode="@example2HTMLCode" CSharpSourceCode="@example2CSharpCode" ExampleId="example2">
        <ExamplePreview>
            <div class="example-content">
                <div>
                    <BitDropdown @bind-Value="ControlledValue"
                                 Label="Single select"
                                 Items="GetDropdownItems()"
                                 Placeholder="Select an option" />
                    <BitLabel>Selected Value: @ControlledValue</BitLabel>
                </div>
                <br />
                <div>
                    <BitDropdown @bind-Values="ControlledValues"
                                 Label="Multi select"
                                 Items="GetDropdownItems()"
                                 Placeholder="Select options"
                                 IsMultiSelect="true" />
                    <BitLabel>Selected Value: @string.Join(",", ControlledValues)</BitLabel>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Customization" HTMLSourceCode="@example4HTMLCode" CSharpSourceCode="@example4CSharpCode" ExampleId="example4">
        <ExamplePreview>
            <div class="example-content">
                <BitDropdown Label="Custom Items"
                             Items="GetCustomDropdownItems()"
                             Placeholder="Select an option"
                             AriaLabel="Custom dropdown">
                    <TextTemplate>
                        <div class="custom-drp custom-drp-txt">
                            <BitIcon IconName="@((context.Items.Find(i => i.Value == context.Value).Data as DropdownItemData).IconName)" />
                            <BitLabel>@context.Items.Find(i => i.Value == context.Value).Text</BitLabel>
                        </div>
                    </TextTemplate>
                    <ItemTemplate>
                        <div class="custom-drp custom-drp-item">
                            <BitIcon IconName="@((context.Data as DropdownItemData).IconName)" />
                            <BitLabel>@context.Text</BitLabel>
                        </div>
                    </ItemTemplate>
                </BitDropdown>

                <BitDropdown Label="Custom placeholder"
                             Items="GetCustomDropdownItems()"
                             Placeholder="Select an option"
                             AriaLabel="Custom placeholder">
                    <PlaceholderTemplate>
                        <div class="custom-drp custom-drp-ph">
                            <BitIcon IconName="@BitIconName.MessageFill" />
                            <BitLabel>@context.Placeholder</BitLabel>
                        </div>
                    </PlaceholderTemplate>
                </BitDropdown>

                <BitDropdown Items="GetCustomDropdownItems()"
                             Placeholder="Select an option"
                             Label="Custom Label"
                             IsMultiSelect="true"
                             AriaLabel="Custom dropdown label">
                    <LabelTemplate>
                        <div class="custom-drp custom-drp-lbl">
                            <BitLabel>Custom label</BitLabel>
                            <BitIcon IconName="@BitIconName.Info" AriaLabel="Info" />
                        </div>
                    </LabelTemplate>
                </BitDropdown>

                <BitDropdown Items="GetCustomDropdownItems()"
                             Placeholder="Select an option"
                             Label="Custom CaretDownIconName"
                             AriaLabel="Custom dropdown chevron icon with icon name"
                             CaretDownIconName="@BitIconName.ScrollUpDown" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Cascading Dropdowns" HTMLSourceCode="@example5HTMLCode" CSharpSourceCode="@example5CSharpCode" ExampleId="example5">
        <ExamplePreview>
            <div class="grid-wrap">
                <div class="example-content">
                    <BitDropdown @bind-Value="@CurrentCategory"
                                 Label="Category"
                                 Items="Categories"
                                 Placeholder="Select options" />

                    <BitDropdown @bind-Value="@CurrentProduct"
                                 Label="Product"
                                 Items="@(Products.Where(p => p.Value.StartsWith($"{CurrentCategory}-")).ToList())"
                                 Placeholder="Select options"
                                 IsEnabled="string.IsNullOrEmpty(CurrentCategory) is false" />
                </div>

                <div class="cascading-dropdowns-info">
                    <BitLabel>Current category: @(Categories.FirstOrDefault(c => c.Value == CurrentCategory)?.Text ?? "-")</BitLabel>
                    <BitLabel>Current product: @(Products.FirstOrDefault(c => c.Value == CurrentProduct)?.Text ?? "-")</BitLabel>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Validation" HTMLSourceCode="@example6HTMLCode" CSharpSourceCode="@example6CSharpCode" ExampleId="example6">
        <ExamplePreview>
            <div class="example-content">
                @if (string.IsNullOrEmpty(SuccessMessage))
                {
                    <EditForm style="width: 100%" Model="formValidationDropdownModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                        <DataAnnotationsValidator />

                        <div class="validation-summary">
                            <ValidationSummary />
                        </div>

                        <BitDropdown @bind-Value="formValidationDropdownModel.Category"
                                     Label="Select category"
                                     Items="GetCategoryDropdownItems()"
                                     IsMultiSelect="false"
                                     Placeholder="Select an option" />

                        <ValidationMessage For="@(() => formValidationDropdownModel.Category)" />

                        <br />

                        <BitDropdown @bind-Values="formValidationDropdownModel.Products"
                                     Label="Select two ptoducts"
                                     Items="GetProductDropdownItems()"
                                     IsMultiSelect="true"
                                     Placeholder="Select an option" />

                        <ValidationMessage For="@(() => formValidationDropdownModel.Products)" />

                        <br />

                        <BitButton ButtonType="BitButtonType.Submit">
                            Submit
                        </BitButton>
                    </EditForm>
                }
                else
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        @SuccessMessage
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Responsive" HTMLSourceCode="@example7HTMLCode" CSharpSourceCode="@example7CSharpCode" ExampleId="example7">
        <ExamplePreview>
            <div class="example-desc">When the <strong>IsResponsiveModeEnabled</strong> parameter is true, the drop down items will render in a side panel in small screen sizes.</div>
            <div class="example-content">
                <BitDropdown Label="Responsive Dropdown"
                             Items="GetDropdownItems()"
                             Placeholder="Select an option"
                             IsResponsiveModeEnabled=true />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Search-box" HTMLSourceCode="@example8HTMLCode" CSharpSourceCode="@example8CSharpCode" ExampleId="example8">
        <ExamplePreview>
            <div class="example-content">
                <BitDropdown Label="Single select dropdown with search box"
                             Items="GetDropdownItems()"
                             Placeholder="Select an option"
                             IsResponsiveModeEnabled="true"
                             ShowSearchBox="true"
                             SearchBoxPlaceholder="Search item" />

                <BitDropdown Label="Multi select dropdown with search box"
                             Items="GetDropdownItems()"
                             Placeholder="Select options"
                             IsMultiSelect="true"
                             IsResponsiveModeEnabled="true"
                             ShowSearchBox="true"
                             SearchBoxPlaceholder="Search items" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Virtualization" HTMLSourceCode="@example9HTMLCode" CSharpSourceCode="@example9CSharpCode" ExampleId="example9">
        <ExamplePreview>
            <div class="example-content">
                <BitDropdown Label="Single select Controlled with virtualization"
                             Items="LargeListOfCategoriesForSingleSelect"
                             Virtualize="true"
                             Placeholder="Select an option"
                             IsResponsiveModeEnabled="true"
                             ShowSearchBox="true"
                             SearchBoxPlaceholder="Search item" />

                <BitDropdown Label="Multi select controlled with virtualization"
                             Items="LargeListOfCategoriesForMultiSelect"
                             Virtualize="true"
                             Placeholder="Select options"
                             IsMultiSelect="true"
                             IsResponsiveModeEnabled="true"
                             ShowSearchBox="true"
                             SearchBoxPlaceholder="Search items" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Virtualization (ItemsProvider)" HTMLSourceCode="@example10HTMLCode" CSharpSourceCode="@example10CSharpCode" ExampleId="example9">
        <ExamplePreview>
            <div class="example-content">
                <BitDropdown Label="Single select Controlled with virtualization"
                             ItemsProvider="LoadDropdownItems"
                             Virtualize="true"
                             Placeholder="Select an option"
                             IsResponsiveModeEnabled="true"
                             ShowSearchBox="true"
                             SearchBoxPlaceholder="Search item" />

                <BitDropdown Label="Multi select controlled with virtualization"
                             ItemsProvider="LoadDropdownItems"
                             Virtualize="true"
                             Placeholder="Select options"
                             IsMultiSelect="true"
                             IsResponsiveModeEnabled="true"
                             ShowSearchBox="true"
                             SearchBoxPlaceholder="Search items" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="RTL Direction" HTMLSourceCode="@example11HTMLCode" CSharpSourceCode="@example11CSharpCode" ExampleId="example11">
        <ExamplePreview>
            <div class="example-content">
                <BitDropdown Label="Single select with Rtl direction"
                             Items="GetArabicDropdownItems()"
                             Placeholder="حدد اختيارا"
                             IsResponsiveModeEnabled="true"
                             IsRtl="true"
                             ShowSearchBox="true"
                             SearchBoxPlaceholder="عناصر البحث" />
                <BitDropdown Label="Multi select with Rtl direction"
                             Items="GetArabicDropdownItems()"
                             Placeholder="اشر على الخيارات"
                             IsMultiSelect="true"
                             IsResponsiveModeEnabled="true"
                             IsRtl="true"
                             ShowSearchBox="true"
                             SearchBoxPlaceholder="عناصر البحث" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Drop Direction" HTMLSourceCode="@example12HTMLCode" CSharpSourceCode="@example12CSharpCode" ExampleId="example12">
        <ExamplePreview>
            <div class="example-content">
                <BitDropdown Label="Auto drop direction"
                             Items="LargeListOfCategoriesDropDirection"
                             Virtualize="true"
                             Placeholder="Select an option"
                             IsResponsiveModeEnabled="true"
                             ShowSearchBox="true"
                             SearchBoxPlaceholder="Search item"
                             DropDirection="BitDropDirection.Auto" />

                <BitDropdown Label="Top and bottom drop direction"
                             Items="LargeListOfCategoriesDropDirection"
                             Virtualize="true"
                             Placeholder="Select an option"
                             IsResponsiveModeEnabled="true"
                             ShowSearchBox="true"
                             SearchBoxPlaceholder="Search item"
                             DropDirection="BitDropDirection.TopAndBottom" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Clear button" HTMLSourceCode="@example13HTMLCode" CSharpSourceCode="@example13CSharpCode" ExampleId="example13">
        <ExamplePreview>
            <div class="example-content">
                <div>
                    <BitDropdown @bind-Value="SelectedValue"
                                 ShowClearButton="true"
                                 Label="Single select dropdown"
                                 Items="GetDropdownItems()"
                                 Placeholder="Select an option" />
                    <BitLabel>Value: @SelectedValue</BitLabel>
                </div>
                <br>
                <div>
                    <BitDropdown @bind-Values="SelectedValues"
                                 ShowClearButton="true"
                                 Label="Multi select dropdown"
                                 Items="GetDropdownItems()"
                                 Placeholder="Select options"
                                 IsMultiSelect="true" />
                    <BitLabel>Values: @string.Join(',', SelectedValues)</BitLabel>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Visibility" HTMLSourceCode="@example14HTMLCode" CSharpSourceCode="@example14CSharpCode" ExampleId="example14">
        <ExamplePreview>
            <div class="example-content">
                <div style="display: inline-flex; text-wrap: nowrap;">
                    Visible: [ <BitDropdown @bind-Value="SelectedValue"
                                            Items="GetDropdownItems()"
                                            Placeholder="Select an option"
                                            Visibility="BitVisibility.Visible" /> ]
                </div>
                <div style="display: inline-flex; text-wrap: nowrap;">
                    Hidden: [ <BitDropdown @bind-Values="SelectedValues"
                                           Items="GetDropdownItems()"
                                           Placeholder="Select options"
                                           Visibility="BitVisibility.Hidden" /> ]
                </div>
                <div style="display: inline-flex; text-wrap: nowrap;">
                    Collapsed: [ <BitDropdown @bind-Values="SelectedValues"
                                              Items="GetDropdownItems()"
                                              Placeholder="Select options"
                                              Visibility="BitVisibility.Collapsed" /> ]
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code {
    private string ControlledValue = "Apple";
    private List<string> ControlledValues = new() { "Apple", "Banana", "Grape" };
    private FormValidationDropdownModel formValidationDropdownModel = new();
    private string SuccessMessage = string.Empty;
    private List<BitDropdownItem> Categories = new();
    private List<BitDropdownItem> Products = new();
    private List<BitDropdownItem> LargeListOfCategoriesForSingleSelect = new();
    private List<BitDropdownItem> LargeListOfCategoriesForMultiSelect = new();
    private List<BitDropdownItem> LargeListOfCategoriesDropDirection = new();
    private string CurrentCategory = string.Empty;
    private string CurrentProduct = string.Empty;
    private string? SelectedValue;
    private List<string> SelectedValues = new();


    protected override void OnInitialized()
    {
        Categories = Enumerable.Range(1, 6).Select(c => new BitDropdownItem
            {
                ItemType = BitDropdownItemType.Normal,
                Value = c.ToString(),
                Text = $"Category {c}"
            }).ToList();

        Products = Enumerable.Range(1, 50).Select(p => new BitDropdownItem
            {
                ItemType = BitDropdownItemType.Normal,
                Text = $"Product {p}",
                Value = $"{((int)Math.Ceiling((double)p % 7))}-{p}"
            }).ToList();

        LargeListOfCategoriesForSingleSelect = Enumerable.Range(1, 4000).Select(c => new BitDropdownItem
            {
                ItemType = BitDropdownItemType.Normal,
                Value = c.ToString(),
                Text = $"Category {c}"
            }).ToList();

        LargeListOfCategoriesForMultiSelect = Enumerable.Range(1, 4000).Select(c => new BitDropdownItem
            {
                ItemType = BitDropdownItemType.Normal,
                Value = c.ToString(),
                Text = $"Category {c}"
            }).ToList();

        LargeListOfCategoriesDropDirection = Enumerable.Range(1, 60).Select(c => new BitDropdownItem
            {
                ItemType = BitDropdownItemType.Normal,
                Value = c.ToString(),
                Text = $"Category {c}"
            }).ToList();

        base.OnInitialized();
    }


    private async Task HandleValidSubmit()
    {
        SuccessMessage = "Form Submitted Successfully!";
        await Task.Delay(3000);
        SuccessMessage = string.Empty;
        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = string.Empty;
    }

    private List<BitDropdownItem> GetCategoryDropdownItems()
    {
        return new()
        {
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Fruits",
                Value = "f"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Vegetables",
                Value = "v"
            }
        };
    }

    private List<BitDropdownItem> GetProductDropdownItems()
    {
        return new()
        {
            new()
            {
                ItemType = BitDropdownItemType.Header,
                Text = "Fruits"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Apple",
                Value = "f-app"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Orange",
                Value = "f-ora",
                IsEnabled = false
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Banana",
                Value = "f-ban",
            },
            new()
            {
                ItemType = BitDropdownItemType.Divider,
            },
            new()
            {
                ItemType = BitDropdownItemType.Header,
                Text = "Vegetables"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Broccoli",
                Value = "v-bro",
            }
        };
    }

    private List<BitDropdownItem> GetDropdownItems()
    {
        return new()
        {
            new()
            {
                ItemType = BitDropdownItemType.Header,
                Text = "Fruits"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Apple",
                Value = "f-app"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Banana",
                Value = "f-ban"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Orange",
                Value = "f-ora",
                IsEnabled = false
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Grape",
                Value = "f-gra",
            },
            new()
            {
                ItemType = BitDropdownItemType.Divider,
            },
            new()
            {
                ItemType = BitDropdownItemType.Header,
                Text = "Vegetables"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Broccoli",
                Value = "v-bro",
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Carrot",
                Value = "v-car",
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Lettuce",
                Value = "v-let",
            }
        };
    }

    private List<BitDropdownItem> GetArabicDropdownItems()
    {
        return new()
        {
            new()
            {
                ItemType = BitDropdownItemType.Header,
                Text = "الفاكهة"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "تفاحة",
                Value = "f-app"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "البرتقالي",
                Value = "f-ora",
                IsEnabled = false
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "موز",
                Value = "f-ban",
            },
            new()
            {
                ItemType = BitDropdownItemType.Divider,
            },
            new()
            {
                ItemType = BitDropdownItemType.Header,
                Text = "خضروات"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "بروكلي",
                Value = "v-bro",
            }
        };
    }

    private List<BitDropdownItem> GetCustomDropdownItems()
    {
        return new()
        {
            new()
            {
                ItemType = BitDropdownItemType.Header,
                Text = "Options",
                Value = "Header"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Option a",
                Value = "A",
                Data = new DropdownItemData { IconName = "Memo" }
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Option b",
                Value = "B",
                Data = new DropdownItemData { IconName = "Print" }
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Option c",
                Value = "C",
                Data = new DropdownItemData { IconName = "ShoppingCart" }
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Option d",
                Value = "D",
                Data = new DropdownItemData { IconName = "Train" }
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Option e",
                Value = "E",
                Data = new DropdownItemData { IconName = "Repair" }
            },
            new()
            {
                ItemType = BitDropdownItemType.Divider
            },
            new()
            {
                ItemType = BitDropdownItemType.Header,
                Text = "More options",
                Value = "Header2"
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Option f",
                Value = "F",
                Data = new DropdownItemData { IconName = "Running" }
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Option g",
                Value = "G",
                Data = new DropdownItemData { IconName = "EmojiNeutral" }
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Option h",
                Value = "H",
                Data = new DropdownItemData { IconName = "ChatInviteFriend" }
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Option i",
                Value = "I",
                Data = new DropdownItemData { IconName = "SecurityGroup" }
            },
            new()
            {
                ItemType = BitDropdownItemType.Normal,
                Text = "Option j",
                Value = "J",
                Data = new DropdownItemData { IconName = "AddGroup" }
            }
        };
    }

    private async ValueTask<BitDropdownItemsProviderResult<BitDropdownItem>> LoadDropdownItems(BitDropdownItemsProviderRequest<BitDropdownItem> request)
    {
        try
        {
            // https://docs.microsoft.com/en-us/odata/concepts/queryoptions-overview

            var query = new Dictionary<string, object>()
            {
                { "$top", request.Count == 0 ? 50 : request.Count },
                { "$skip", request.StartIndex }
            };

            if (string.IsNullOrEmpty(request.Search) is false)
            {
                query.Add("$filter", $"contains(Name,'{request.Search}')");
            }

            var url = NavManager.GetUriWithQueryParameters("Products/GetProducts", query);

            var data = await HttpClient.GetFromJsonAsync(url, AppJsonContext.Default.PagedResultProductDto);

            var items = data!.Items.Select(i => new BitDropdownItem
                {
                    Text = i.Name,
                    Value = i.Id.ToString(),
                    Data = i,
                    AriaLabel = i.Name,
                    IsEnabled = true,
                    ItemType = BitDropdownItemType.Normal
                }).ToList();

            return BitDropdownItemsProviderResult.From(items, data!.TotalCount);
        }
        catch
        {
            return BitDropdownItemsProviderResult.From(new List<BitDropdownItem>(), 0);
        }
    }
}