@page "/components/calendar"

<PageOutlet Url="components/calendar"
            Title="Calendar"
            Description="calendar component of the bit BlazorUI components" />

<ComponentDemo ComponentName="Calendar"
               ComponentDescription="The calendar control lets people select and view a single date or a range of dates in their calendar. It’s made up of 3 separate views: the month view, year view, and decade view."
               ComponentParameters="componentParameters"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Basic" RazorCode="@example1RazorCode" Id="example1">
        <ExamplePreview>
            <div class="example-content">
                <BitCalendar AriaLabel="Select a date" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Disabled" RazorCode="@example2RazorCode" Id="example2">
        <ExamplePreview>
            <div class="example-content">
                <BitCalendar IsEnabled=false AriaLabel="Select a date" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Week numbers" RazorCode="@example3RazorCode" Id="example3">
        <ExamplePreview>
            <div class="example-content">
                <BitCalendar ShowWeekNumbers=true AriaLabel="Select a date" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Validation" RazorCode="@example4RazorCode" CsharpCode="@example4CsharpCode" Id="example4">
        <ExamplePreview>
            <div>
                <EditForm Model="formValidationCalendarModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                    <DataAnnotationsValidator />

                    <div class="validation-summary">
                        <ValidationSummary />
                    </div>
                    <div class="example-content">
                        <BitCalendar @bind-Value="formValidationCalendarModel.Date" AriaLabel="Select a date" />
                        <ValidationMessage For="@(() => formValidationCalendarModel.Date)" />
                    </div>
                    <br />
                    <BitButton ButtonType="BitButtonType.Submit">Submit</BitButton>
                    <BitButton ButtonType="BitButtonType.Reset"
                               ButtonStyle="BitButtonStyle.Standard"
                               OnClick="() => { formValidationCalendarModel = new(); SuccessMessage=string.Empty; }">
                        Reset
                    </BitButton>
                </EditForm>

                @if (string.IsNullOrEmpty(SuccessMessage) is false)
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        @SuccessMessage
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Date format" RazorCode="@example5RazorCode" Id="example5">
        <ExamplePreview>
            <div class="example-desc">
                Applications can customize how dates are formatted and parsed. Formatted dates can be ambiguous, so the control will avoid parsing the formatted strings of dates selected using the UI when text input is allowed.
                In this example, we are formatting and parsing dates as dd=MM(yy).
            </div>
            <div class="example-content">
                <BitCalendar @bind-Value="@formattedDateTime" AriaLabel="Select a date." DateFormat="dd=MM(yy)" />
            </div>
            <BitLabel>Selected DateTime: @formattedDateTime.ToString()</BitLabel>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Min & Max" RazorCode="@example6RazorCode" Id="example6">
        <ExamplePreview>
            <div class="example-desc">
                When date boundaries are set (via MinDate and MaxDate params) the BitCalendar will not allow out-of-bounds dates to be picked or entered.
            </div>
            <br />
            <div class="example-desc">
                In the first example, the allowed dates are between 5 days after now and 5 days before now.
            </div>
            <div class="example-content">
                <BitCalendar AriaLabel="Select a date"
                             MaxDate="DateTimeOffset.Now.AddDays(5)"
                             MinDate="DateTimeOffset.Now.AddDays(-5)" />
            </div>
            <br />
            <div class="example-desc">
                In the second example, the allowed dates are between 1 month after now and 2 months before now.
            </div>
            <div class="example-content">
                <BitCalendar AriaLabel="Select a date"
                             MaxDate="DateTimeOffset.Now.AddMonths(1)"
                             MinDate="DateTimeOffset.Now.AddMonths(-2)" />
            </div>
            <br />
            <div class="example-desc">
                In the third example, the allowed dates are between 1 year after now and 5 years before now.
            </div>
            <div class="example-content">
                <BitCalendar AriaLabel="Select a date"
                             MaxDate="DateTimeOffset.Now.AddYears(1)"
                             MinDate="DateTimeOffset.Now.AddYears(-5)" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Two-way binding" RazorCode="@example7RazorCode" CsharpCode="@example7CsharpCode" Id="example7">
        <ExamplePreview>
            <div class="example-content">
                <BitCalendar @bind-Value="@selectedDate" AriaLabel="Select a date" />
            </div>
            <BitLabel>Selected date: @selectedDate.ToString()</BitLabel>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Jalali calendar" RazorCode="@example8RazorCode" Id="example8">
        <ExamplePreview>
            <div class="example-desc">In this sample, you can see the usage of CultureInfoHelper class to specify a particular format for the BitCalendar. You can also provide your own class for any custom culture of your interest. For more information, you can visit <BitLink Href="https://github.com/bitfoundation/bitplatform/blob/develop/src/BlazorUI/Bit.BlazorUI/Utils/CultureInfoHelper.cs">here</BitLink>.</div>
            <div class="example-desc">Please note to reduce the download size of this page, the sample is not implemented here. In order to use this example, it's required to set <b>InvariantGlobalization</b> to <b>false</b> in the project setting, which causes an extra download size for the website.</div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Templates" RazorCode="@example9RazorCode" CsharpCode="@example9CsharpCode" Id="example9">
        <ExamplePreview>
            <div class="example-desc">
                In this sample, you can see how to implement a custom template for different parts of BitCalendar.
            </div>
            <div class="example-content">
                <BitCalendar AriaLabel="Select a date">
                    <DayCellTemplate>
                        <span class="@(context.DayOfWeek == DayOfWeek.Sunday ? "weekend-cell" : null)">
                            @context.Day
                        </span>
                    </DayCellTemplate>
                </BitCalendar>
            </div>
            <br />
            <br />
            <div class="example-content">
                <BitCalendar AriaLabel="Select a date">
                    <DayCellTemplate>
                        <span class="custom-day-cell">
                            @context.Day

                            @if (context.Day % 5 is 0)
                            {
                                <span class="discount-badge">off</span>
                            }
                        </span>
                    </DayCellTemplate>
                    <MonthCellTemplate>
                        <span>
                            @this.Culture.DateTimeFormat.GetAbbreviatedMonthName(context.Month)

                            @if (context.Month == 1)
                            {
                                <span class="discount-badge">Xmas</span>
                            }
                        </span>
                    </MonthCellTemplate>
                    <YearCellTemplate>
                        <span style="position: relative">
                            @context
                            <span class="year-suffix">AC</span>
                        </span>
                    </YearCellTemplate>
                </BitCalendar>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Month Position and Visibility" RazorCode="@example10RazorCode" CsharpCode="@example10CsharpCode" Id="example10">
        <ExamplePreview>
            <div class="example-desc">
                In this sample, you can change month picker position.
                <br />
                When you change its position to <strong>Overlay</strong> you can see month picker by tapping on BitCalendar's header.
            </div>
            <div class="example-content">
                <BitCalendar MonthPickerPosition="@monthPickerPosition" AriaLabel="Select a date" />
            </div>
            <BitToggleButton Text="Toggle month picker position" OnChange="ToggleMonthPickerPosition" />
            <br />
            <br />
            <div class="example-desc">
                In this sample, you can fully hide or visible month picker.
            </div>
            <div class="example-content">
                <BitCalendar @bind-IsMonthPickerVisible="@isMonthPickerVisible" AriaLabel="Select a date" />
            </div>
            <BitToggleButton Text="Toggle month picker visibility" @bind-IsChecked="@isMonthPickerVisible" />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="With time" RazorCode="@example11RazorCode" CsharpCode="@example11CsharpCode" Id="example11">
        <ExamplePreview>
            <div class="example-content">
                <BitCalendar @bind-Value="@selectedDateTime" ShowTimePicker="true" AriaLabel="Select a date" />
            </div>
            <BitLabel>Selected DateTime: @selectedDateTime.ToString()</BitLabel>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code {
    private DateTimeOffset? selectedDate = new DateTimeOffset(new DateTime(2020, 1, 17), DateTimeOffset.Now.Offset);
    private DateTimeOffset? selectedDateTime = DateTimeOffset.Now;
    private DateTimeOffset? formattedDateTime = DateTimeOffset.Now;
    private FormValidationCalendarModel formValidationCalendarModel = new();
    private string SuccessMessage = string.Empty;
    private CultureInfo Culture = CultureInfo.CurrentUICulture;

    private bool isMonthPickerVisible = true;
    private BitCalendarMonthPickerPosition monthPickerPosition;

    private void ToggleMonthPickerPosition(bool newState)
    {
        monthPickerPosition = newState ? BitCalendarMonthPickerPosition.Overlay : BitCalendarMonthPickerPosition.Besides;
    }

    private async Task HandleValidSubmit()
    {
        SuccessMessage = "Form Submitted Successfully!";
        await Task.Delay(3000);
        SuccessMessage = string.Empty;
        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = string.Empty;
    }
}