@page "/components/numerictextfield"
@page "/components/numeric-text-field"

<PageOutlet Url="components/numerictextfield"
            Title="NumericTextField"
            Description="numerictextfield component of the bit BlazorUI components" />

<ComponentDemo ComponentName="NumericTextField"
               ComponentDescription="A NumericTextField allows you to enter any number type and format you want. It could be a decimal number or integer number with a suffix and so on. Also, give you the capability to show or hide increment and decrement keys."
               ComponentParameters="componentParameters"
               ComponentSubClasses="componentSubClasses"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Basic" RazorCode="@example1RazorCode" CsharpCode="@example1CsharpCode" Id="example1">
        <ExamplePreview>
            <div class="example-box">
                <BitNumericTextField @bind-Value="BasicValue"
                                     Placeholder="Enter a number..."
                                     Step="@(1)"
                                     Label="Basic" />
                <br />
                <BitNumericTextField @bind-Value="DisabledValue"
                                     Placeholder="Enter a number..."
                                     Step="@(1)"
                                     Label="Disabled"
                                     IsEnabled="false" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
    
    <ComponentExampleBox Title="LabelPosition" RazorCode="@example2RazorCode" CsharpCode="@example2CsharpCode" Id="example2">
        <ExamplePreview>
            <div class="example-box">
                <BitNumericTextField @bind-Value="LabelTopValue"
                                     Placeholder="Enter a number..."
                                     Step="@(1)"
                                     Label="Label Top"
                                     LabelPosition="BitNumericTextFieldLabelPosition.Top"/>
                <br />
                <BitNumericTextField @bind-Value="LabelLeftValue"
                                     Placeholder="Enter a number..."
                                     Step="@(1)"
                                     Label="Label Left"
                                     LabelPosition="BitNumericTextFieldLabelPosition.Left" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="LabelTemplate" RazorCode="@example3RazorCode" CsharpCode="@example3CsharpCode" Id="example3">
        <ExamplePreview>
            <div class="example-box">
                <BitNumericTextField @bind-Value="LabelTemplateValue" Placeholder="Enter a number..." Step="@(1)">
                    <LabelTemplate>
                        <div style="display: flex; align-items: center; gap: 10px">
                            <BitLabel Style="color: green;">This is custom Label</BitLabel>
                            <BitIcon IconName="@BitIconName.Filter" />
                        </div>
                    </LabelTemplate>
                </BitNumericTextField>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Icons" RazorCode="@example4RazorCode" CsharpCode="@example4CsharpCode" Id="example4">
        <ExamplePreview>
            <div class="example-box">
                <BitNumericTextField @bind-Value="SpinArrowValue"
                                     Placeholder="Enter a number..."
                                     Step="@(1)"
                                     Label="Increment & Decrement"
                                     ShowArrows="true" />
                <br />
                <BitNumericTextField @bind-Value="SpinArrowWithIconValue"
                                     Placeholder="Enter a number..."
                                     Step="@(1)"
                                     Label="Increment & Decrement Icon"
                                     ShowArrows="true"
                                     IncrementIconName="@BitIconName.LikeSolid"
                                     DecrementIconName="@BitIconName.DislikeSolid" />
                <br />
                <BitNumericTextField @bind-Value="LabelAndIconValue"
                                     Placeholder="Enter a number..."
                                     Step="@(1)"
                                     Label="Label & Icon"
                                     IconName="@BitIconName.Lightbulb" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Min & Max" RazorCode="@example5RazorCode" CsharpCode="@example5CsharpCode" Id="example5">
        <ExamplePreview>
            <div class="example-box">
                <BitNumericTextField @bind-Value="MinMaxValue1"
                                     Placeholder="Enter a number..."
                                     Step="@(1)"
                                     Label="Min: -10, Max: 10, Step: 1"
                                     Min="-10"
                                     Max="10" />
                <br />
                <BitNumericTextField @bind-Value="MinMaxValue2"
                                     Placeholder="Enter a number..."
                                     Step="@(2)"
                                     Label="Min: -20, Max: 20, Step: 2"
                                     Min="-20"
                                     Max="20" />
                <br />
                <BitNumericTextField @bind-Value="MinMaxValue3"
                                     Placeholder="Enter a number..."
                                     Step="@(0.1M)"
                                     Label="Min: -1, Max: 1, Step: 0.1"
                                     Min="-1"
                                     Max="1" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Suffix" RazorCode="@example6RazorCode" CsharpCode="@example6CsharpCode" Id="example6">
        <ExamplePreview>
            <div class="example-box">
                <BitNumericTextField @bind-Value="SuffixValue1"
                                     Placeholder="Enter a number..."
                                     Step="@(1)"
                                     Label="Height"
                                     IconName="@BitIconName.AutoHeight"
                                     DefaultValue="150"
                                     Suffix=" cm" />
                <br />
                <BitNumericTextField @bind-Value="SuffixValue2"
                                     Placeholder="Enter a number..."
                                     Step="@(0.5M)"
                                     Label="Weight"
                                     IconName="@BitIconName.Weights"
                                     DefaultValue="50"
                                     Suffix=" kg" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Controlled" RazorCode="@example7RazorCode" CsharpCode="@example7CsharpCode" Id="example7">
        <ExamplePreview>
            <div class="example-box">
                <div>
                    <BitNumericTextField Value="OneWayValue"
                                         Placeholder="Enter a number..."
                                         Step="@(1)"
                                         Label="One-way" />
                    <BitRating @bind-Value="OneWayValue" />
                </div>
                <br />
                <div>
                    <BitNumericTextField @bind-Value="TwoWayValue"
                                         Placeholder="Enter a number..."
                                         Step="@(0.5)"
                                         Label="Two-way" />
                    <BitRating @bind-Value="TwoWayValue" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Events" RazorCode="@example8RazorCode" CsharpCode="@example8CsharpCode" Id="example8">
        <ExamplePreview>
            <div class="example-box">
                <div class="column">
                    <BitNumericTextField @bind-Value="ArrowsEventBindedValue"
                                         Placeholder="Enter a number..."
                                         Step="@(0.1)"
                                         Label="OnIncrement / OnDecrement"
                                         ShowArrows="true"
                                         OnIncrement="(BitNumericTextFieldChangeValue<double> v) => HandleOnIncrementEvent(v)"
                                         OnDecrement="(BitNumericTextFieldChangeValue<double> v) => HandleOnDecrementEvent(v)" />
                    <BitLabel>OnIncrement Counter: @OnIncrementCounter</BitLabel>
                    <BitLabel>OnDecrement Counter: @OnDecrementCounter</BitLabel>
                    <BitLabel>Returned Value: @ArrowsEventReturnedValue</BitLabel>
                </div>
                <br />
                <div class="column">
                    <BitNumericTextField @bind-Value="OnChangeEventBindedValue"
                                         Placeholder="Enter a number..."
                                         Step="@(0.1)"
                                         Label="OnChange"
                                         OnChange="(double v) => HandleOnChangeEvent(v)" />
                    <BitLabel>OnChange Counter: @OnChangeCounter</BitLabel>
                    <BitLabel>Returned Value: @OnChangeEventReturnedValue</BitLabel>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Style & Class" RazorCode="@example9RazorCode" CsharpCode="@example9CsharpCode" Id="example9">
        <ExamplePreview>
            <div class="example-box">
                <div class="custom-wrapper">
                    <BitLabel>Component's Style & Class:</BitLabel>
                    <BitNumericTextField @bind-Value="@StyleValue"
                                         Placeholder="Enter a number..."
                                         Style="background-color: lightskyblue; border-radius: 1rem; padding: 0.5rem" />
                    <BitNumericTextField @bind-Value="@ClassValue"
                                         Placeholder="Enter a number..."
                                         Class="custom-class" />
                </div>
                <br />
                <div class="custom-wrapper">
                    <BitLabel>Styles & Classes:</BitLabel>
                    <BitNumericTextField @bind-Value="@StylesValue"
                                         Placeholder="Enter a number..."
                                         Label="Custom label style"
                                         IconName="@BitIconName.Microphone"
                                         Styles="@(new() { Root = "background-color: pink;",
                                                           Icon = "color: red;",
                                                           Label = "color: blue; font-weight: 900; font-size: 1.25rem;",
                                                           Input = "padding: 0.5rem; background-color: goldenrod"} )" />
                    <br />
                    <BitNumericTextField @bind-Value="@ClassesValue"
                                         Placeholder="Enter a number..."
                                         Label="Custom label class"
                                         Classes="@(new() { Input = "custom-input",
                                                            Focused = "custom-focus",
                                                            Label = "custom-label",
                                                            InputWrapper = "custom-input-wrapper" } )" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Visibility" RazorCode="@example10RazorCode" CsharpCode="@example10CsharpCode" Id="example10">
        <ExamplePreview>
            <div class="example-box">
                <div class="visibility-items">Visible: [ <BitNumericTextField @bind-Value="@VisibilityValue" Visibility="BitVisibility.Visible" Placeholder="Visible NumericTextField" /> ]</div>
                <div class="visibility-items">Hidden: [ <BitNumericTextField @bind-Value="@VisibilityValue" Visibility="BitVisibility.Hidden" Placeholder="Hidden NumericTextField" />  ]</div>
                <div class="visibility-items">Collapsed: [ <BitNumericTextField @bind-Value="@VisibilityValue" Visibility="BitVisibility.Collapsed" Placeholder="Collapsed NumericTextField" />  ]</div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Validation" RazorCode="@example11RazorCode" CsharpCode="@example11CsharpCode" Id="example11">
        <ExamplePreview>
            <div class="example-box">
                @if (string.IsNullOrEmpty(SuccessMessage))
                {
                    <EditForm Model="@ValidationModel" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                        <DataAnnotationsValidator />

                        <div class="validation-summary">
                            <ValidationSummary />
                        </div>

                        <BitNumericTextField @bind-Value="@ValidationModel.AgeInYears"
                                             Placeholder="Enter a number..."
                                             Step="@(1)"
                                             Label="Age" />
                        <ValidationMessage For="@(() => ValidationModel.AgeInYears)" />

                        <BitButton Style="margin-top: 10px;" ButtonType="BitButtonType.Submit">
                            Submit
                        </BitButton>
                    </EditForm>
                }
                else
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        @SuccessMessage
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code{
    private int BasicValue;
    private int DisabledValue;

    private int LabelTopValue;
    private int LabelLeftValue;

    private int LabelTemplateValue;

    private int SpinArrowValue;
    private int LabelAndIconValue;
    private int SpinArrowWithIconValue;

    private int MinMaxValue1;
    private int MinMaxValue2;
    private decimal MinMaxValue3;

    private int SuffixValue1;
    private decimal SuffixValue2;

    private double OneWayValue;
    private double TwoWayValue;

    private double ArrowsEventBindedValue;
    private double ArrowsEventReturnedValue;
    private int OnIncrementCounter;
    private int OnDecrementCounter;

    private double OnChangeEventBindedValue;
    private double OnChangeEventReturnedValue;
    private int OnChangeCounter;

    private int VisibilityValue;

    private int StyleValue;
    private int ClassValue;
    private int StylesValue;
    private int ClassesValue;

    private void HandleOnIncrementEvent(BitNumericTextFieldChangeValue<double> onChangeValue)
    {
        ArrowsEventReturnedValue = onChangeValue.Value;

        OnIncrementCounter++;
    }

    private void HandleOnDecrementEvent(BitNumericTextFieldChangeValue<double> onChangeValue)
    {
        ArrowsEventReturnedValue = onChangeValue.Value;

        OnDecrementCounter++;
    }

    private void HandleOnChangeEvent(double value)
    {
        OnChangeEventReturnedValue = value;

        OnChangeCounter++;
    }

    private string SuccessMessage = string.Empty;
    private BitNumericTextFieldValidationModel ValidationModel = new();

    private async Task HandleValidSubmit()
    {
        SuccessMessage = "Form Submitted Successfully!";
        await Task.Delay(3000);
        SuccessMessage = string.Empty;
        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = string.Empty;
    }
}