@page "/components/toggle"

<PageOutlet Url="components/toggle"
            Title="Toggle"
            Description="toggle component of the bit BlazorUI components" />

<ComponentDemo ComponentName="Toggle"
               ComponentDescription="A toggle represents a physical switch that allows someone to choose between two mutually exclusive options.  For example, “On/Off”, “Show/Hide”. Choosing an option should produce an immediate result."
               ComponentParameters="componentParameters">
    <ComponentExampleBox Title="Basic" HtmlCode="@example1HtmlCode" CsharpCode="@example1CsharpCode" Id="example1">
        <ExamplePreview>
            <div class="example-box">
                <BitToggle Label="Basic" @bind-Value="BasicValue" />
                <br />
                <BitToggle Label="Disabled" @bind-Value="DisabledValue" IsEnabled="false" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Text & Label" HtmlCode="@example2HtmlCode" CsharpCode="@example2CsharpCode" Id="example2">
        <ExamplePreview>
            <div class="example-box">
                <BitToggle Label="OnText And OffText" @bind-Value="OnTextValue" OnText="On" OffText="Off" />
                <br />
                <BitToggle Label="Inline Label" @bind-Value="InLineLabelValue" IsInlineLabel="true" />
                <br />
                <BitToggle @bind-Value="DefaultTextValue" DefaultText="Default Text" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="LabelTemplate" HtmlCode="@example3HtmlCode" CsharpCode="@example3CsharpCode" Id="example3">
        <ExamplePreview>
            <div class="example-box">
                <BitToggle @bind-Value="LabelTemplateValue">
                    <LabelTemplate>
                        <div style="display: flex; align-items: center; gap: 10px">
                            <BitLabel Style="color: green;">This is custom Label</BitLabel>
                            <BitIcon IconName="@BitIconName.Filter" />
                        </div>
                    </LabelTemplate>
                </BitToggle>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Controlled" HtmlCode="@example4HtmlCode" CsharpCode="@example4CsharpCode" Id="example4">
        <ExamplePreview>
            <div class="example-box">
                <div style="display:flex; align-items:flex-end">
                    <BitToggle Value="OneWayValue" Label="One-way" OnText="On" OffText="Off" />
                    <BitToggleButton @bind-IsChecked="OneWayValue" OnText="On" OffText="Off" />
                </div>
                <br />
                <div style="display:flex; align-items:flex-end">
                    <BitToggle @bind-Value="TwoWayValue" Label="Two-way" OnText="On" OffText="Off" />
                    <BitToggleButton @bind-IsChecked="TwoWayValue" OnText="On" OffText="Off" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Validation" HtmlCode="@example5HtmlCode" CsharpCode="@example5CsharpCode" Id="example5">
        <ExamplePreview>
            @if (string.IsNullOrEmpty(SuccessMessage))
            {
                <EditForm Model="ValidationForm" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                    <DataAnnotationsValidator />

                    <div class="validation-summary">
                        <ValidationSummary />
                    </div>

                    <div>
                        <BitToggle @bind-Value="ValidationForm.TermsAgreement" DefaultText="I agree with the terms and conditions." />
                        <ValidationMessage For="@(() => ValidationForm.TermsAgreement)" />
                    </div>

                    <BitButton Style="margin-top: 10px;" ButtonType="BitButtonType.Submit">
                        Submit
                    </BitButton>
                </EditForm>
            }
            else
            {
                <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                    @SuccessMessage
                </BitMessageBar>
            }
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code {
    private bool BasicValue;
    private bool DisabledValue;
    private bool OnTextValue;
    private bool InLineLabelValue;
    private bool DefaultTextValue;

    private bool LabelTemplateValue;

    private bool OneWayValue;
    private bool TwoWayValue;

    public BitToggleValidationModel ValidationForm { get; set; } = new();
    private string SuccessMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        SuccessMessage = "Form Submitted Successfully!";
        await Task.Delay(3000);
        SuccessMessage = string.Empty;
        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = string.Empty;
    }
}