@page "/components/toggle"

<PageOutlet Url="components/toggle"
            Title="Toggle"
            Description="toggle component of the bit BlazorUI components" />

<ComponentDemo ComponentName="Toggle"
               ComponentDescription="A toggle represents a physical switch that allows someone to choose between two mutually exclusive options.  For example, “On/Off”, “Show/Hide”. Choosing an option should produce an immediate result."
               ComponentParameters="componentParameters"
               ComponentSubClasses="componentSubClasses">
    <ComponentExampleBox Title="Basic" RazorCode="@example1RazorCode" CsharpCode="@example1CsharpCode" Id="example1">
        <ExamplePreview>
            <div class="example-box">
                <BitToggle Label="Basic" @bind-Value="BasicValue" />
                <br />
                <BitToggle Label="Disabled" @bind-Value="DisabledValue" IsEnabled="false" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Text & Label" RazorCode="@example2RazorCode" CsharpCode="@example2CsharpCode" Id="example2">
        <ExamplePreview>
            <div class="example-box">
                <BitToggle Label="OnText And OffText" @bind-Value="OnTextValue" OnText="On" OffText="Off" />
                <br />
                <BitToggle Label="Inline Label" @bind-Value="InLineLabelValue" IsInlineLabel="true" />
                <br />
                <BitToggle @bind-Value="DefaultTextValue" DefaultText="Default Text" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="LabelTemplate" RazorCode="@example3RazorCode" CsharpCode="@example3CsharpCode" Id="example3">
        <ExamplePreview>
            <div class="example-box">
                <BitToggle @bind-Value="LabelTemplateValue">
                    <LabelTemplate>
                        <div style="display: flex; align-items: center; gap: 10px">
                            <BitLabel Style="color: green;">This is custom Label</BitLabel>
                            <BitIcon IconName="@BitIconName.Filter" />
                        </div>
                    </LabelTemplate>
                </BitToggle>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Controlled" RazorCode="@example4RazorCode" CsharpCode="@example4CsharpCode" Id="example4">
        <ExamplePreview>
            <div class="example-box">
                <div style="display:flex; align-items:flex-end">
                    <BitToggle Value="OneWayValue" Label="One-way" OnText="On" OffText="Off" />
                    <BitToggleButton @bind-IsChecked="OneWayValue" OnText="On" OffText="Off" />
                </div>
                <br />
                <div style="display:flex; align-items:flex-end">
                    <BitToggle @bind-Value="TwoWayValue" Label="Two-way" OnText="On" OffText="Off" />
                    <BitToggleButton @bind-IsChecked="TwoWayValue" OnText="On" OffText="Off" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Style & Class" RazorCode="@example5RazorCode" CsharpCode="@example5CsharpCode" Id="example5">
        <ExamplePreview>
            <div class="example-box">
                <div class="custom-wrapper">
                    <BitLabel>Component's Style & Class:</BitLabel>
                    <BitToggle @bind-Value="@StyleValue"
                               DefaultText="Custom style"
                               Style="background-color: forestgreen; border-radius: 1rem; padding: 0.5rem;" />
                    <BitToggle @bind-Value="@ClassValue"
                               DefaultText="Custom class"
                               Class="custom-class" />
                </div>
                <br />
                <div class="custom-wrapper">
                    <BitLabel>Styles & Classes:</BitLabel>
                    <BitToggle @bind-Value="@StylesValue"
                               Label="Custom label style"
                               Styles="@(new() { Root = "background-color: pink; padding: 0.5rem;",
                                                 Thumb = "background-color: darkorange;",
                                                 Button = "border-radius: 0.5rem 0 0.5rem 0;",
                                                 Label = "color: blue; font-weight: 900; font-size: 1.25rem;" } )" />
                    <br />
                    <BitToggle @bind-Value="@ClassesValue"
                               DefaultText="Custom text class"
                               Classes="@(new() { Text = "custom-text",
                                                  Button = "custom-button",
                                                  Checked = "custom-check" } )" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Visibility" RazorCode="@example6RazorCode" CsharpCode="@example6CsharpCode" Id="example6">
        <ExamplePreview>
            <div class="example-box">
                <div class="visibility-items">Visible: [ <BitToggle @bind-Value="@VisibilityValue" Visibility="BitVisibility.Visible" DefaultText="Visible Toggle" /> ]</div>
                <div class="visibility-items">Hidden: [ <BitToggle @bind-Value="@VisibilityValue" Visibility="BitVisibility.Hidden" DefaultText="Hidden Toggle" />  ]</div>
                <div class="visibility-items">Collapsed: [ <BitToggle @bind-Value="@VisibilityValue" Visibility="BitVisibility.Collapsed" DefaultText="Collapsed Toggle" />  ]</div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Validation" RazorCode="@example7RazorCode" CsharpCode="@example7CsharpCode" Id="example7">
        <ExamplePreview>
            @if (string.IsNullOrEmpty(SuccessMessage))
            {
                <EditForm Model="ValidationForm" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                    <DataAnnotationsValidator />

                    <div class="validation-summary">
                        <ValidationSummary />
                    </div>

                    <div>
                        <BitToggle @bind-Value="ValidationForm.TermsAgreement" DefaultText="I agree with the terms and conditions." />
                        <ValidationMessage For="@(() => ValidationForm.TermsAgreement)" />
                    </div>

                    <BitButton Style="margin-top: 10px;" ButtonType="BitButtonType.Submit">
                        Submit
                    </BitButton>
                </EditForm>
            }
            else
            {
                <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                    @SuccessMessage
                </BitMessageBar>
            }
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code {
    private bool BasicValue;
    private bool DisabledValue;
    private bool OnTextValue;
    private bool InLineLabelValue;
    private bool DefaultTextValue;

    private bool LabelTemplateValue;

    private bool OneWayValue;
    private bool TwoWayValue;

    private bool VisibilityValue;

    private bool StyleValue;
    private bool ClassValue;
    private bool StylesValue;
    private bool ClassesValue;

    public BitToggleValidationModel ValidationForm { get; set; } = new();
    private string SuccessMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        SuccessMessage = "Form Submitted Successfully!";
        await Task.Delay(3000);
        SuccessMessage = string.Empty;
        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = string.Empty;
    }
}