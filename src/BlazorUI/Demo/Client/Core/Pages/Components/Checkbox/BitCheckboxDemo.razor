@page "/components/checkbox"
@page "/components/check-box"

<PageOutlet Url="components/checkbox"
            Title="Checkbox"
            Description="checkbox component of the bit BlazorUI components" />

<ComponentDemo ComponentName="CheckBox"
               ComponentDescription="BitCheckbox is component that permits the user to make a binary choice, a choice between one of two possible mutually exclusive options. For example, the user may have to answer 'yes' or 'no' on a simple yes/no question. Checkboxes are shown as ☐ when unchecked, or ☑ when checked."
               ComponentParameters="componentParameters"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Basic" HTMLSourceCode="@example1HTMLCode" ExampleId="example1">
        <ExamplePreview>
            <div class="example-content">
                <BitCheckbox Label="Basic Checkbox" />
                <BitCheckbox Label="One-way Checked Checkbox (Fixed)" Value="true" />
                <BitCheckbox Label="Disable Checkbox" IsEnabled="false" />
                <BitCheckbox Label="Disable Checked Checkbox" IsEnabled="false" Value="true" />
                <BitCheckbox Label="Custom checkmark Checkbox" CheckmarkIconName="@BitIconName.Heart" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Reversed" HTMLSourceCode="@example2TMLCode" ExampleId="example2">
        <ExamplePreview>
            <div class="example-content">
                <BitCheckbox Label="Reversed - Basic Checkbox" BoxSide="@BitCheckBoxSide.End" />
                <BitCheckbox Label="Reversed - One-way Checked Checkbox (Fixed)" BoxSide="@BitCheckBoxSide.End" Value="true" />
                <BitCheckbox Label="Reversed - Disable Checkbox" BoxSide="@BitCheckBoxSide.End" IsEnabled="false" />
                <BitCheckbox Label="Reversed - Disable Checked Checkbox" BoxSide="@BitCheckBoxSide.End" IsEnabled="false" Value="true" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Indeterminate" HTMLSourceCode="@example3HTMLCode" CSharpSourceCode="@example3CSharpCode" ExampleId="example3">
        <ExamplePreview>
            <div class="example-content">
                <BitCheckbox Label="Indeterminate checkbox" @bind-IsIndeterminate="IsIndeterminate" />
                <BitCheckbox Label="One-way indeterminate Checkbox (Fixed)" IsIndeterminate="true" />
                <BitCheckbox Label="Disabled indeterminate checkbox" IsIndeterminate="true" IsEnabled="false" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Controlled" HTMLSourceCode="@example4HTMLCode" CSharpSourceCode="@example4CSharpCode" ExampleId="example4">
        <ExamplePreview>
            <div class="example-content">
                <div class="controlled-box">
                    <BitCheckbox Label="One-way Controlled Checkbox" Value="IsChecked_OneWay" />
                    <BitButton OnClick="() => IsChecked_OneWay = !IsChecked_OneWay" ButtonSize="BitButtonSize.Small">
                        @(IsChecked_OneWay ? "Remove" : "Make") Checked
                    </BitButton>
                </div>
                <div class="controlled-box">
                    <BitCheckbox Label="Two-way Controlled Checkbox" @bind-Value="IsChecked_TwoWay" />
                    <BitButton OnClick="() => IsChecked_TwoWay = !IsChecked_TwoWay" ButtonSize="BitButtonSize.Small">
                        @(IsChecked_TwoWay ? "Remove" : "Make") Checked
                    </BitButton>
                </div>
                <div class="controlled-box">
                    <BitCheckbox Label="One-way Controlled indeterminate checkbox" IsIndeterminate="IsIndeterminate_OneWay" />
                    <BitButton OnClick="() => IsIndeterminate_OneWay = !IsIndeterminate_OneWay" ButtonSize="BitButtonSize.Small">
                        @(IsIndeterminate_OneWay ? "Remove" : "Make") Indeterminate
                    </BitButton>
                </div>
                <div class="controlled-box">
                    <BitCheckbox Label="Two-way Controlled indeterminate checkbox" @bind-IsIndeterminate="IsIndeterminate_TwoWay" />
                    <BitButton OnClick="() => IsIndeterminate_TwoWay = !IsIndeterminate_TwoWay" ButtonSize="BitButtonSize.Small">
                        @(IsIndeterminate_TwoWay ? "Remove" : "Make") Indeterminate
                    </BitButton>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="LabelTemplate" HTMLSourceCode="@example5HTMLCode" CSharpSourceCode="@example5CSharpCode" ExampleId="example5">
        <ExamplePreview>
            <div>
                <BitCheckbox @bind-Value="IsCheckedLabelTemplate">
                    <LabelTemplate>
                        <span style="@(IsCheckedLabelTemplate ? "color: green;" : "color: red;")">
                            Label Template
                        </span>
                    </LabelTemplate>
                </BitCheckbox>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Custom content" HTMLSourceCode="@example6HTMLCode" CSharpSourceCode="@example6CSharpCode" ExampleId="example6">
        <ExamplePreview>
            <div class="example-content">
                <BitCheckbox @bind-Value="IsCheckedCustomCheckBox">
                    <div class="custom-checkbox">
                        <div class="checked-box">
                            <BitIcon IconName="@(IsCheckedCustomCheckBox ? BitIconName.Accept : null)" />
                        </div>
                        <span>
                            Custom Basic Checkbox
                        </span>
                    </div>
                </BitCheckbox>

                <BitCheckbox @bind-Value="IsCheckedCustomIndeterminateCheckBox" @bind-IsIndeterminate="IsIndeterminateCustomCheckBox">
                    <div class="custom-checkbox">
                        <div class="checked-box">
                            <BitIcon IconName="@(IsIndeterminateCustomCheckBox ? BitIconName.Fingerprint : (IsCheckedCustomIndeterminateCheckBox ? BitIconName.Accept : null))" />
                        </div>
                        <span>
                            Custom Indeterminate checkbox
                        </span>
                        <BitButton OnClick="() => IsIndeterminateCustomCheckBox = true">Make Indeterminate</BitButton>
                    </div>
                </BitCheckbox>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Validation" HTMLSourceCode="@example7HTMLCode" CSharpSourceCode="@example7CSharpCode" ExampleId="example7">
        <ExamplePreview>
            <div>
                @if (string.IsNullOrEmpty(SuccessMessage))
                {
                    <EditForm Model="ValidationForm" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                        <DataAnnotationsValidator />
                        <div class="validation-summary">
                            <ValidationSummary />
                        </div>
                        <div>
                            <BitCheckbox Label="I agree with the terms and conditions." @bind-Value="ValidationForm.TermsAgreement" />
                            <ValidationMessage For="@(() => ValidationForm.TermsAgreement)" />
                        </div>
                        <br />
                        <BitButton ButtonType="BitButtonType.Submit">
                            Submit
                        </BitButton>
                    </EditForm>
                }
                else
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        @SuccessMessage
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>