@page "/components/snackbar"

<PageOutlet Url="components/snackbar"
            Title="Snackbar"
            Description="snackbar component of the bit blazorui components" />

<ComponentDemo ComponentName="SnackBar"
               ComponentDescription="SnackBars provide brief notifications. The component is also known as a toast."
               ComponentParameters="componentParameters"
               ComponentSubEnums="componentSubEnums">
    <ComponentExampleBox Title="Type & Position" HTMLSourceCode="@example1HTMLCode" CSharpSourceCode="@example1CSharpCode" ExampleId="example1">
        <ExamplePreview>
            <div class="example-box">
                <BitSnackBar @ref="BasicSnackBarRef"
                             Position="@BasicSnackBarPosition"
                             AutoDismiss="@BasicSnackBarAutoDismiss"
                             AutoDismissTime="TimeSpan.FromSeconds(BasicSnackBarDismissSeconds)" />

                <BitChoiceGroup @bind-Value="BasicSnackBarType" Label="Type" TItem="BitChoiceGroupOption<BitSnackBarType>" TValue="BitSnackBarType">
                    <BitChoiceGroupOption Text="Info" Value="BitSnackBarType.Info" />
                    <BitChoiceGroupOption Text="Success" Value="BitSnackBarType.Success" />
                    <BitChoiceGroupOption Text="Warning" Value="BitSnackBarType.Warning" />
                    <BitChoiceGroupOption Text="SevereWarning" Value="BitSnackBarType.SevereWarning" />
                    <BitChoiceGroupOption Text="Error" Value="BitSnackBarType.Error" />
                </BitChoiceGroup>
                <BitChoiceGroup @bind-Value="BasicSnackBarPosition" Label="Position" TItem="BitChoiceGroupOption<BitSnackBarPosition>" TValue="BitSnackBarPosition">
                    <BitChoiceGroupOption Text="TopLeft" Value="BitSnackBarPosition.TopLeft" />
                    <BitChoiceGroupOption Text="TopCenter" Value="BitSnackBarPosition.TopCenter" />
                    <BitChoiceGroupOption Text="TopRight" Value="BitSnackBarPosition.TopRight" />
                    <BitChoiceGroupOption Text="BottomLeft" Value="BitSnackBarPosition.BottomLeft" />
                    <BitChoiceGroupOption Text="BottomCenter" Value="BitSnackBarPosition.BottomCenter" />
                    <BitChoiceGroupOption Text="BottomRight" Value="BitSnackBarPosition.BottomRight" />
                </BitChoiceGroup>
                <div>
                    <BitTextField @bind-Value="BasicSnackBarTitle" Label="Title" DefaultValue="Title" />
                    <BitTextField @bind-Value="BasicSnackBarBody" Label="Body" IsMultiline="true" Rows="6" DefaultValue="This is a body!" />
                </div>
                <div>
                    <BitToggle @bind-Value="BasicSnackBarAutoDismiss" Label="Auto Dismiss" />
                    <BitNumericTextField @bind-Value="BasicSnackBarDismissSeconds" Step="1" Min="1" Label="Dismiss Time (based on second)" />
                </div>
            </div>
            <BitButton Style="margin-top: 20px;" OnClick="OpenBasicSnackBar">Show</BitButton>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Customized" HTMLSourceCode="@example2HTMLCode" CSharpSourceCode="@example2CSharpCode" ExampleId="example2">
        <ExamplePreview>
            <div class="example-desc">
                SnackBar can be customized in various ways, such as changing the dismiss icon by the DismissIconName parameter,
                TitleTemplate parameter as a RenderFragment in Title container and BodyTemplate as a RenderFragment in Body(Content) container.
            </div>
            <div class="example-box">
                <div>
                    <BitSnackBar @ref="DismissIconName" DismissIconName="BitIconName.Go" />
                    <BitButton OnClick="OpenDismissIconName">Dismiss Icon Name</BitButton>
                </div>

                <div>
                    <BitSnackBar @ref="TitleTemplate" AutoDismiss="false">
                        <TitleTemplate Context="title">
                            <div style="display: flex; flex-direction: row; gap: 10px;">
                                <span>@title</span>
                                <BitProgressIndicator BarHeight="20" Style="width: 40px;" />
                            </div>
                        </TitleTemplate>
                    </BitSnackBar>
                    <BitButton OnClick="OpenTitleTemplate">Title Template</BitButton>
                </div>

                <div>
                    <BitSnackBar @ref="BodyTemplate" AutoDismiss="false">
                        <BodyTemplate Context="body">
                            <div style="display: flex; flex-flow: column nowrap; gap: 5px;">
                                <span style="font-size: 12px; margin-bottom: 5px;">@body</span>
                                <div style="display: flex; gap: 10px;">
                                    <BitButton OnClick="@(() => BodyTemplateAnswer = "Yes")">Yes</BitButton>
                                    <BitButton OnClick="@(() => BodyTemplateAnswer = "No")">No</BitButton>
                                </div>
                                <span>Answer: @BodyTemplateAnswer</span>
                            </div>
                        </BodyTemplate>
                    </BitSnackBar>
                    <BitButton OnClick="OpenBodyTemplate">Body Template</BitButton>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>

@code {
    private BitSnackBar BasicSnackBarRef = new();
    private BitSnackBarType BasicSnackBarType = BitSnackBarType.Info;
    private BitSnackBarPosition BasicSnackBarPosition = BitSnackBarPosition.BottomRight;
    private string BasicSnackBarTitle = string.Empty;
    private string? BasicSnackBarBody;
    private bool BasicSnackBarAutoDismiss = true;
    private int BasicSnackBarDismissSeconds = 3;

    private async Task OpenBasicSnackBar()
    {
        await BasicSnackBarRef.Show(BasicSnackBarTitle, BasicSnackBarBody, BasicSnackBarType);
    }


    private BitSnackBar DismissIconName = new();
    private BitSnackBar TitleTemplate = new();
    private BitSnackBar BodyTemplate = new();

    private string? BodyTemplateAnswer;

    private async Task OpenDismissIconName()
    {
        await DismissIconName.Success("This is title", "This is body");
    }
    private async Task OpenTitleTemplate()
    {
        await TitleTemplate.Warning("This is title", "This is body");
    }
    private async Task OpenBodyTemplate()
    {
        await BodyTemplate.Error("This is title", "This is body");
    }
}