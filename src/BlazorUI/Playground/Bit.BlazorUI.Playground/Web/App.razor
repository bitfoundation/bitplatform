<PageTitle>Bit's Native Blazor UI Components</PageTitle>
<CascadingValue Value="Visual.Fluent" IsFixed="true">
    <CascadingValue Value="Theme.Light" IsFixed="true">
        <Router @ref="router"
                AppAssembly="@typeof(MainLayout).Assembly"
                AdditionalAssemblies="@lazyLoadedAssemblies"
                OnNavigateAsync="@OnNavigateAsync">
            <Found Context="routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            </Found>
            <NotFound>
                <NotFoundComponent />
            </NotFound>
        </Router>
    </CascadingValue>
</CascadingValue>

@code {
    private List<Assembly> lazyLoadedAssemblies = new();

#if BlazorWebAssembly && !Maui
    [Inject] private Microsoft.AspNetCore.Components.WebAssembly.Services.LazyAssemblyLoader AssemblyLoader { get; set; }
#endif

    private Router router;

    public static RenderFragment Loading = __builder =>
    {
        <LayoutView Layout="@typeof(MainLayout)">
            <LoadingComponent />
        </LayoutView>
    };

    private async Task OnNavigateAsync(NavigationContext args)
    {
#if BlazorWebAssembly && !Maui
        if (args.Path.Contains("chart") && lazyLoadedAssemblies.Any(asm => asm.GetName().Name == "Newtonsoft.Json") is false)
        {
            try
            {
                router.Navigating = Loading; // https://github.com/dotnet/aspnetcore/issues/42902
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "Newtonsoft.Json.dll", "System.Private.Xml.dll", "System.Data.Common.dll" });
                lazyLoadedAssemblies.AddRange(assemblies);
            }
            finally
            {
                router.Navigating = null;
            }
        }
#endif
    }
}