@page "/components/menu-button"

<ComponentDemo ComponentName="MenuButton"
               ComponentDescription="A menu button is a menu item that displays a word or phrase that the user can click to initiate an operation."
               ComponentParameters="@componentParameters"
               ComponentSubParameters="@componentSubParameters"
               EnumParameters="@enumParameters">

    <ComponentExampleBox Title="BitMenuButton" HTMLSourceCode="@example1HTMLCode" CSharpSourceCode="@example1CSharpCode" ExampleId="example1">
        <ExamplePreview>
            <div class="example-content">
                <BitMenuButton Text="Standard"
                               ButtonStyle="BitButtonStyle.Standard"
                               Items="basicMenuButton"
                               OnItemClick="(item) => example1SelectedItem = item.key" />

                <BitMenuButton Text="Primary"
                               ButtonStyle="BitButtonStyle.Primary"
                               Items="basicMenuButton"
                               OnItemClick="(item) => example1SelectedItem = item.key" />

                <BitMenuButton Text="Disabled"
                               IsEnabled="false" />

                <BitMenuButton Text="Item Disabled"
                               Items="disabledItemMenuButton"
                               OnItemClick="(item) => example1SelectedItem = item.key" />
            </div>
            <div class="selected-item">Selected Item: @example1SelectedItem</div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitMenuButton with IconName" HTMLSourceCode="@example2HTMLCode" CSharpSourceCode="@example2CSharpCode" ExampleId="example2">
        <ExamplePreview>
            <div class="example-content">
                <BitMenuButton Text="Standard Button"
                               IconName="BitIconName.Add"
                               ButtonStyle="BitButtonStyle.Standard"
                               Items="basicMenuButton"
                               OnItemClick="(item) => example2SelectedItem = item.key" />

                <BitMenuButton Text="Primary Button"
                               IconName="BitIconName.Edit"
                               ButtonStyle="BitButtonStyle.Primary"
                               Items="basicMenuButton"
                               OnItemClick="(item) => example2SelectedItem = item.key" />
            </div>
            <div class="selected-item">Selected Item: @example2SelectedItem</div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Style & Class" HTMLSourceCode="@example3HTMLCode" CSharpSourceCode="@example3CSharpCode" ExampleId="example3">
        <ExamplePreview>
            <div class="example-desc">BitMenuButton can directly get css class or inline style.</div>
            <div class="example-content">
                <BitMenuButton Text="Styled Button"
                               Items="basicMenuButton"
                               OnItemClick="(item) => example3SelectedItem = item.key"
                               Style="width: 200px; height: 40px; background-color: #8A8886; border-color: black;" />

                <BitMenuButton Text="Classed Button"
                               Items="basicMenuButton"
                               OnItemClick="(item) => example3SelectedItem = item.key"
                               Class="custom-menu-btn" />
            </div>
            <div class="selected-item">Selected Item: @example3SelectedItem</div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Visibility" HTMLSourceCode="@example4HTMLCode" CSharpSourceCode="@example4CSharpCode" ExampleId="example4">
        <ExamplePreview>
            <div class="example-desc">By setting Visibility attribute, BitButton can be Visible, Hidden or Collapsed.</div>
            <div class="example-content column">
                <div>
                    <BitMenuButton Text="Visible Button"
                                   Items="basicMenuButton"
                                   OnItemClick="(item) => example4SelectedItem = item.key"
                                   Visibility="BitComponentVisibility.Visible" />
                </div>
                <div>
                    Hidden Button: [<BitMenuButton Text="Styled Button"
                                                   IconName="BitIconName.Add"
                                                   Items="basicMenuButton"
                                                   Visibility="BitComponentVisibility.Hidden" />]
                </div>
                <div>
                    Collapsed Button: [<BitMenuButton Text="Styled Button"
                                                      IconName="BitIconName.Add"
                                                      Items="basicMenuButton"
                                                      Visibility="BitComponentVisibility.Collapsed" />]
                </div>
            </div>
            <div class="selected-item">Selected Item: @example4SelectedItem</div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="MenuButton with HeaderTemplate" HTMLSourceCode="@example5HTMLCode" CSharpSourceCode="@example5CSharpCode" ExampleId="example5">
        <ExamplePreview>
            <div class="example-desc">You can customize the button header content.</div>
            <div class="example-content">
                <BitMenuButton Items="basicMenuButton"
                               OnItemClick="(item) => example5SelectedItem = item.key"
                               ButtonStyle="BitButtonStyle.Standard">
                    <HeaderTemplate>
                        <div style="font-weight: bold; color: #d13438;">
                            Custom Header!
                        </div>
                    </HeaderTemplate>
                </BitMenuButton>

                <BitMenuButton Items="basicMenuButton"
                               OnItemClick="(item) => example5SelectedItem = item.key"
                               ButtonStyle="BitButtonStyle.Primary">
                    <HeaderTemplate>
                        <BitIcon IconName="BitIconName.Warning" />
                        <div style="font-weight: 600; color: white;">
                            Custom Header!
                        </div>
                        <BitIcon IconName="BitIconName.Warning" />
                    </HeaderTemplate>
                </BitMenuButton>
            </div>
            <div class="selected-item">Selected Item: @example5SelectedItem</div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="MenuButton with ItemTemplate" HTMLSourceCode="@example6HTMLCode" CSharpSourceCode="@example6CSharpCode" ExampleId="example6">
        <ExamplePreview>
            <div class="example-desc">You can customize the button item.</div>
            <div class="example-content">
                <BitMenuButton Text="Standard Button"
                               IconName="BitIconName.Edit"
                               Items="itemTemplateMenuButton"
                               OnItemClick="(item) => example6SelectedItem = item.key"
                               ItemTemplate="itemTemplate"
                               ButtonStyle="BitButtonStyle.Standard" />

                <BitMenuButton Text="Primary Button"
                               IconName="BitIconName.Edit"
                               Items="itemTemplateMenuButton"
                               OnItemClick="(item) => example6SelectedItem = item.key"
                               ItemTemplate="itemTemplate"
                               ButtonStyle="BitButtonStyle.Primary" />
            </div>
            <div class="selected-item">Selected Item: @example6SelectedItem</div>
        </ExamplePreview>
    </ComponentExampleBox>

</ComponentDemo>

@code {

    private RenderFragment<BitMenuButtonItem> itemTemplate = (item) =>
    (
        @<div class="item-template-box">
            <span style="color: @(item.key == "add-key" ? "green" : item.key == "edit-key" ? "yellow" : "red");">
                @item.Text (@item.key)
            </span>
        </div>
    );
}