@page "/components/toggle-button"

<ComponentDemo ComponentName="ToggleButton" ComponentDescription="Buttons give people a way to trigger an action. They’re typically found in forms, dialog panels, and dialogs.
    Some buttons are specialized for particular tasks, such as navigation, repeated actions, or presenting menus."
               ComponentParameters="componentParameters" EnumParameters="enumParameters">
    <ComponentExampleBox Title="BitToggleButton" HTMLSourceCode="@example1HTMLCode" CSharpSourceCode="@example1CSharpCode" ExampleId="example1">
        <ExamplePreview>
            <div class="example-desc">
                BitToggleButton component represents a button as a checkbox and can use in form pages.
                <br />
                (Unlike the BitToggle component, the BitToggleButton's label & icon should describe the click action or the new state after a click.)
            </div>
            <div class="example-box">
                <BitToggleButton @bind-IsChecked="TogglePrimaryButtonChecked"
                                 Class="tgl-btn"
                                 Label="@(TogglePrimaryButtonChecked ? "Primary Mute":"Primary Unmute")"
                                 IconName=@(TogglePrimaryButtonChecked ? BitIconName.MicOff : BitIconName.Microphone)
                                 ButtonStyle="BitButtonStyle.Primary">
                </BitToggleButton>
                <BitToggleButton @bind-IsChecked="ToggleStandardButtonChecked"
                                 Class="tgl-btn"
                                 Label="@(ToggleStandardButtonChecked ? "Standard Mute":"Standard Unmute")"
                                 IconName=@(ToggleStandardButtonChecked ? BitIconName.MicOff : BitIconName.Microphone)
                                 ButtonStyle="BitButtonStyle.Standard">
                </BitToggleButton>
                <BitToggleButton @bind-IsChecked="ToggleDisabledButtonChecked"
                                 Class="tgl-btn"
                                 IsEnabled="false"
                                 Label="@(ToggleDisabledButtonChecked ? "Primary disabled Mute" : "Primary disabled Unmute")"
                                 IconName=@(ToggleDisabledButtonChecked ? BitIconName.MicOff : BitIconName.Microphone)>
                </BitToggleButton>
                <BitToggleButton @bind-IsChecked="ToggleDisabledButtonChecked"
                                 Class="tgl-btn"
                                 IsEnabled="false"
                                 Label="@(ToggleDisabledButtonChecked ? "Standard disabled Mute" : "Standard disabled Unmute")"
                                 IconName=@(ToggleDisabledButtonChecked ? BitIconName.MicOff : BitIconName.Microphone)
                                 ButtonStyle="BitButtonStyle.Standard">
                </BitToggleButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Toggle Button with OnChange event" HTMLSourceCode="@example2HTMLCode" CSharpSourceCode="@example2CSharpCode" ExampleId="example2">
        <ExamplePreview>
            <div class="example-desc">Check status is: <strong>@OnToggleButtonChanged</strong></div>
            <div class="example-box">
                <BitToggleButton @bind-IsChecked="ToggleButtonForOnChange"
                                 Label="@(ToggleButtonForOnChange ? "Mute" : "Unmute")"
                                 IconName=@(ToggleButtonForOnChange ? BitIconName.MicOff : BitIconName.Microphone)
                                 OnChange="ToggleButtonChanged">
                </BitToggleButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Toggle Button with two way binding" HTMLSourceCode="@example3HTMLCode" CSharpSourceCode="@example3CSharpCode" ExampleId="example3">
        <ExamplePreview>
            <div class="example-box">
                <BitToggleButton @bind-IsChecked="ToggleButtonTwoWayValue"
                                 Label="@(ToggleButtonTwoWayValue ? "Mute" : "Unmute")"
                                 IconName=@(ToggleButtonTwoWayValue ? BitIconName.MicOff : BitIconName.Microphone)>
                </BitToggleButton>
                <BitCheckbox Label="Checked Toggle Button" @bind-Value="ToggleButtonTwoWayValue" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Toggle Button with default value" HTMLSourceCode="@example4HTMLCode" CSharpSourceCode="@example4CSharpCode" ExampleId="example4">
        <ExamplePreview>
            <div class="example-desc">Set default checked or unchecked value without two way binding.</div>
            <div class="example-box">
                <BitToggleButton OnChange="((e) => ToggleButtonValue = e)"
                                 DefaultIsChecked="true"
                                 Label="@(ToggleButtonValue ? "Mute" : "Unmute")"
                                 IconName=@(ToggleButtonValue ? BitIconName.MicOff : BitIconName.Microphone)>
                </BitToggleButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Arias for Screen Reader" HTMLSourceCode="@example5HTMLCode" CSharpSourceCode="@example5CSharpCode" ExampleId="example5">
        <ExamplePreview>
            <div class="example-desc">Aria attribues can also set for a BitToggleButton.</div>
            <div class="example-box">
                <BitToggleButton @bind-IsChecked="ToggleButtonChecked"
                                 Label="@(ToggleButtonChecked ? "Aria Description Mute" : "Aria Description Unmute")"
                                 IconName="@(ToggleButtonChecked ? BitIconName.MicOff : BitIconName.Microphone)"
                                 AriaDescription="Detailed description used for screen reader">
                </BitToggleButton>
                <BitToggleButton @bind-IsChecked="ToggleButtonChecked"
                                 Class="aria-hidden-tgl-btn"
                                 Label="@(ToggleButtonChecked ? "Aria Hidden Mute" : "Aria Hidden Unmute")"
                                 IconName="@(ToggleButtonChecked ? BitIconName.MicOff : BitIconName.Microphone)"
                                 AriaHidden="true">
                </BitToggleButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>