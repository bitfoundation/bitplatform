@page "/components/data-grid"
@inject HttpClient HttpClient
@inject NavigationManager NavManager

@using Playground.Shared.Dtos.DataGridDemo

<ComponentDemo ComponentName="DataGrid"
               ComponentDescription="BitDataGrid is a robust way to display an information-rich collection of items, and allow people to sort, and filter the content. Use a data-grid when information density is critical."
               ComponentParameters="componentParameters"
               ComponentSubParameters="componentSubParameter"
               EnumParameters="enumParameters">
    <ComponentExampleBox Title="Typical usage, Columns, Sorting, Filtring, Paging" HTMLSourceCode="@example1HTMLCode" CSharpSourceCode="@example1CSharpCode" ExampleId="example1">
        <ExamplePreview>
            <div class="grid1">
                <div class="grid1-container">
                    <BitDataGrid Items="@FilteredItems" ResizableColumns="true" Pagination="@pagination">
                        <BitDataGridPropertyColumn Class="column--large" Property="@(c => c.Name)" Sortable="true" IsDefaultSort="BitDataGridSortDirection.Ascending">
                            <ColumnOptions>
                                <BitSearchBox @bind-Value="typicalSampleNameFilter"
                                              Placeholder="Search on Name"
                                              InputHtmlAttributes="@(new Dictionary<string, object> {{"autofocus", true}})" />
                            </ColumnOptions>
                        </BitDataGridPropertyColumn>
                        <BitDataGridTemplateColumn Title="Flag" Align="BitDataGridAlign.Center">
                            <img class="flag" src="https://countryflagsapi.com/svg/@(context.Code)" loading="lazy" />
                        </BitDataGridTemplateColumn>
                        <BitDataGridPropertyColumn Property="@(c => c.Medals.Gold)" Sortable="true" />
                        <BitDataGridPropertyColumn Property="@(c => c.Medals.Silver)" Sortable="true" />
                        <BitDataGridPropertyColumn Property="@(c => c.Medals.Bronze)" Sortable="true" />
                        <BitDataGridPropertyColumn Property="@(c => c.Medals.Total)" Sortable="true" />
                    </BitDataGrid>
                </div>
                <BitDataGridPaginator Value="@pagination" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Virtualizing" HTMLSourceCode="@example2HTMLCode" CSharpSourceCode="@example2CSharpCode" ExampleId="example2">
        <ExamplePreview>
            <div class="grid2">
                <BitDataGrid ItemsProvider="@foodRecallProvider" TGridItem="FoodRecall" Virtualize="true" @ref="dataGrid">
                    <BitDataGridPropertyColumn Property="@(c=>c.EventId)" />
                    <BitDataGridPropertyColumn Property="@(c => c.State)" />
                    <BitDataGridPropertyColumn Property="@(c => c.City)" />
                    <BitDataGridPropertyColumn Property="@(c => c.RecallingFirm)" Title="Company" />
                    <BitDataGridPropertyColumn Property="@(c => c.Status)" />
                    <BitDataGridPropertyColumn Sortable="true" Property="@(c => c.ReportDate)" Title="Report Date" />
                </BitDataGrid>
            </div>
            <div class="search-panel">
                <div class="inline-block">
                    <BitSearchBox @bind-Value="VirtualSampleNameFilter" Width="250px" Placeholder="Search on Company" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="OData" ExampleId="example3" HTMLSourceCode="@example3HTMLCode" CSharpSourceCode="@example3CSharpCode">
        <ExamplePreview>
            <div class="grid2">
                <BitDataGrid ItemKey="(p => p.Id)" ItemsProvider="@productsItemsProvider" TGridItem="ProductDto" Virtualize="true" @ref="productsDataGrid">
                    <BitDataGridPropertyColumn Property="@(p => p.Id)" Sortable="true" IsDefaultSort="BitDataGridSortDirection.Ascending" />
                    <BitDataGridPropertyColumn Property="@(p => p.Name)" Sortable="true" />
                    <BitDataGridPropertyColumn Property="@(p => p.Price)" Sortable="true" />
                </BitDataGrid>
            </div>
            <div class="search-panel">
                <div class="inline-block">
                    <BitSearchBox @bind-Value="ODataSampleNameFilter" Width="250px" Placeholder="Search on Name" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

</ComponentDemo>

@code {
    IQueryable<CountryModel> allCountries;
    BitDataGrid<FoodRecall> dataGrid;
    BitDataGrid<ProductDto> productsDataGrid;
    BitDataGridItemsProvider<FoodRecall> foodRecallProvider;
    BitDataGridItemsProvider<ProductDto> productsItemsProvider;
    BitDataGridPaginationState pagination = new() { ItemsPerPage = 7 };
    IQueryable<CountryModel> FilteredItems => allCountries?.Where(x => x.Name.Contains(typicalSampleNameFilter, StringComparison.CurrentCultureIgnoreCase));

    string typicalSampleNameFilter = string.Empty;
    string _virtualSampleNameFilter = string.Empty;

    string VirtualSampleNameFilter
    {
        get => _virtualSampleNameFilter;
        set
        {
            _virtualSampleNameFilter = value;
            _ = dataGrid.RefreshDataAsync();
        }
    }

    string _odataSampleNameFilter = string.Empty;

    string ODataSampleNameFilter
    {
        get => _odataSampleNameFilter;
        set
        {
            _odataSampleNameFilter = value;
            _ = productsDataGrid.RefreshDataAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        allCountries = _countries.AsQueryable();

        foodRecallProvider = async req =>
        {
            try
            {
                var query = new Dictionary<string, object?>
                {
                    { "search",$"recalling_firm:\"{_virtualSampleNameFilter}\"" },
                    { "skip", req.StartIndex },
                    { "limit", req.Count }
                };

                var sort = req.GetSortByProperties().SingleOrDefault();

                if (sort != default)
                {
                    var sortByColumnName = sort.PropertyName switch
                    {
                        nameof(FoodRecall.ReportDate) => "report_date",
                        _ => throw new InvalidOperationException()
                    };

                    query.Add("sort", $"{sortByColumnName}:{(sort.Direction == BitDataGridSortDirection.Ascending ? "asc" : "desc")}");
                }

                var url = NavManager.GetUriWithQueryParameters("https://api.fda.gov/food/enforcement.json", query);

                var data = await HttpClient.GetFromJsonAsync(url, AppJsonContext.Default.FoodRecallQueryResult, req.CancellationToken);

                return BitDataGridItemsProviderResult.From(data!.Results, data!.Meta.Results.Total);
            }
            catch
            {
                return BitDataGridItemsProviderResult.From<FoodRecall>(new List<FoodRecall> { }, 0);
            }
        };

        productsItemsProvider = async req =>
        {
            try
            {
                // https://docs.microsoft.com/en-us/odata/concepts/queryoptions-overview

                var query = new Dictionary<string, object>()
                {
                    { "$top", req.Count ?? 50 },
                    { "$skip", req.StartIndex }
                };

                if (string.IsNullOrEmpty(_odataSampleNameFilter) is false)
                {
                    query.Add("$filter", $"contains(Name,'{_odataSampleNameFilter}')");
                }

                if (req.GetSortByProperties().Any())
                {
                    query.Add("$orderby", string.Join(", ", req.GetSortByProperties().Select(p => $"{p.PropertyName} {(p.Direction == BitDataGridSortDirection.Ascending ? "asc" : "desc")}")));
                }

                var url = NavManager.GetUriWithQueryParameters("Products/GetProducts", query);

                var data = await HttpClient.GetFromJsonAsync(url, AppJsonContext.Default.PagedResultProductDto);

                return BitDataGridItemsProviderResult.From(data!.Items, (int)data!.TotalCount);
            }
            catch
            {
                return BitDataGridItemsProviderResult.From<ProductDto>(new List<ProductDto> { }, 0);
            }
        };
    }
}
