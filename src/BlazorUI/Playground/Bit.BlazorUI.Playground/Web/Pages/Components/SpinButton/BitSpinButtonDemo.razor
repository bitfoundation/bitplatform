@page "/components/spin-button"

<ComponentDemo ComponentName="SpinButton"
               ComponentDescription="A spin button (SpinButton) allows someone to incrementally adjust a value in small steps. It’s mainly used for numeric values, but other values are supported too."
               ComponentParameters="componentParameters"
               EnumParameters="enumParameters">

    <ComponentExampleBox Title="Basic BitSpinButton" HTMLSourceCode="@example1HTMLCode" ExampleId="example1">
        <ExamplePreview>
            <div class="example-box">
                <BitSpinButton Label="Basic" />
                <BitSpinButton Label="Disabled" IsEnabled="false" />
                <BitSpinButton Label="Label & Icon" IconName="BitIconName.Lightbulb" />
                <BitSpinButton Label="Left Label" IconName="BitIconName.Lightbulb" LabelPosition="BitSpinButtonLabelPosition.Left" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitSpinButton with LabelTemplate" HTMLSourceCode="@example2HTMLCode" ExampleId="example2">
        <ExamplePreview>
            <div class="example-box">
                <BitSpinButton>
                    <LabelTemplate>
                        <BitIcon IconName="BitIconName.ChevronUpSmall" Style="color:green;" />
                        <BitIcon IconName="BitIconName.ChevronDownSmall" Style="color:red;" />
                    </LabelTemplate>
                </BitSpinButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitSpinButton with Spin Icon" HTMLSourceCode="@example3HTMLCode" ExampleId="example3">
        <ExamplePreview>
            <div class="example-box">
                <BitSpinButton Label="Like and Dislike"
                               IncrementButtonIconName="BitIconName.LikeSolid"
                               DecrementButtonIconName="BitIconName.DislikeSolid" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Min & Max & Step" HTMLSourceCode="@example4HTMLCode" ExampleId="example4">
        <ExamplePreview>
            <div class="example-box">
                <BitSpinButton Label="Min: -10, Max: 10"
                               Min="-10"
                               Max="10" />

                <BitSpinButton Label="Min: -20, Max: 20, Step: 2"
                               Min="-20"
                               Max="20"
                               Step="2" />

                <BitSpinButton Label="Min: -1, Max: 1, Step: 0.1"
                               Min="-1"
                               Max="1"
                               Step="0.1" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitSpinButton with Suffix" HTMLSourceCode="@example5HTMLCode" ExampleId="example5">
        <ExamplePreview>
            <div class="example-desc">This SpinButton includes a suffix in the value.</div>
            <div class="example-box">
                <BitSpinButton Label="Height"
                               IconName="BitIconName.AutoHeight"
                               DefaultValue="150"
                               Suffix=" cm" />

                <BitSpinButton Label="Weight"
                               IconName="BitIconName.Weights"
                               DefaultValue="50"
                               Step="0.5"
                               Suffix=" kg" />
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitSpinButton Binding" HTMLSourceCode="@example6HTMLCode" CSharpSourceCode="@example6CSharpCode" ExampleId="example6">
        <ExamplePreview>
            <div class="example-box">
                <div>
                    <BitSpinButton Label="One-way" Value="OneWayValue" />
                    <BitRating @bind-Value="OneWayValue" />
                </div>

                <div>
                    <BitSpinButton Label="Two-way" Step="0.5" @bind-Value="TwoWayValue" />
                    <BitRating @bind-Value="TwoWayValue" />
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitSpinButton Events" HTMLSourceCode="@example7HTMLCode" CSharpSourceCode="@example7CSharpCode" ExampleId="example7">
        <ExamplePreview>
            <div class="example-box">
                <div class="column">
                    <BitSpinButton @bind-Value="IncrementEventValue"
                                   Label="OnIncrement / OnDecrement"
                                   Step="0.1"
                                   OnIncrement="() => OnIncrementCounter++"
                                   OnDecrement="() => OnDecrementCounter++" />
                    <span>OnIncrement Counter: @OnIncrementCounter</span>
                    <span>OnDecrement Counter: @OnDecrementCounter</span>
                </div>

                <div class="column">
                    <BitSpinButton @bind-Value="OnChangeEventBindedValue"
                                   Label="OnChange"
                                   Step="0.1" 
                                   OnChange="HandleOnChangeEvent"/>
                    <span>OnChange Clicked Counter: @OnChangeClickedCounter</span>
                    <span>OnChange Returned Value: @OnChangeEventReturnedValue</span>
                </div>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitSpinButton validation" HTMLSourceCode="@example8HTMLCode" CSharpSourceCode="@example8CSharpCode" ExampleId="example8">
        <ExamplePreview>
            <div class="example-box">
                @if (string.IsNullOrEmpty(SuccessMessage))
                {
                    <EditForm Model="@ValidationModel" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">

                        <DataAnnotationsValidator />

                        <div class="validation-summary">
                            <ValidationSummary />
                        </div>

                        <BitSpinButton Label="Age" @bind-Value="@ValidationModel.AgeInYears"></BitSpinButton>
                        <ValidationMessage For="@(() => ValidationModel.AgeInYears)" />

                        <BitButton Style="margin-top: 10px;" ButtonType="BitButtonType.Submit">
                            Submit
                        </BitButton>
                    </EditForm>
                }
                else
                {
                    <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                        @SuccessMessage
                    </BitMessageBar>
                }
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>