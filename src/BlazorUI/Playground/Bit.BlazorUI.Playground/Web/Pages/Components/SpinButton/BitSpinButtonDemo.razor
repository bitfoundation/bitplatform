@page "/components/spin-button"

<ComponentDemo ComponentName="SpinButton" ComponentDescription="A spin button (SpinButton) allows someone to incrementally adjust a value in small steps. It’s mainly used for numeric values, but other values are supported too."
               ComponentParameters="componentParameters" EnumParameters="enumParameters">
    <ComponentExampleBox Title="BitSpinButton" HTMLSourceCode="@example1HTMLCode" CSharpSourceCode="@example1CSharpCode" ExampleId="example1">
        <ExamplePreview>
            <div>
                <BitSpinButton @bind-Value="BasicSpinButtonValue"
                               Class="bit-spb-wrapped bit-spb-lbl-wrapped"
                               Min="0"
                               Max="100"
                               Step="1"
                               Label="Basic SpinButton">
                </BitSpinButton>
                <BitSpinButton Class="bit-spb-wrapped bit-spb-lbl-wrapped"
                               Min="-10"
                               Max="10"
                               Step="0.1"
                               Label="Decimal SpinButton">
                </BitSpinButton>
                <BitSpinButton @bind-Value="BasicSpinButtonDisableValue"
                               Class="bit-spb-wrapped bit-spb-lbl-wrapped"
                               Min="0"
                               Max="100"
                               Step="1"
                               Label="Disabled SpinButton"
                               IsEnabled="false">
                </BitSpinButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="SpinButton With Icon" HTMLSourceCode="@example2HTMLCode" ExampleId="example2">
        <ExamplePreview>
            <div>
                <BitSpinButton Class="bit-spb-wrapped bit-spb-lbl-wrapped"
                               IconName="BitIconName.IncreaseIndentText"
                               Min="0"
                               Max="100"
                               Step="1"
                               Label="With Icon">
                </BitSpinButton>
                <BitSpinButton Class="bit-spb-wrapped bit-spb-lbl-wrapped"
                               IconName="BitIconName.IncreaseIndentText"
                               Min="0"
                               Max="100"
                               Step="1"
                               Label="Disabled With Icon"
                               IsEnabled="false">
                </BitSpinButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="SpinButton With Suffix" HTMLSourceCode="@example3HTMLCode" ExampleId="example3">
        <ExamplePreview>
            <div class="example-desc">This SpinButton includes a suffix in the value and defines custom onIncrement, onDecrement.</div>
            <div>
                <BitSpinButton Class="bit-spb-wrapped bit-spb-lbl-wrapped"
                               Suffix="Inch"
                               Min="0"
                               Max="100"
                               Step="1"
                               Label="With suffix">
                </BitSpinButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="SpinButton With Label Above" HTMLSourceCode="@example4HTMLCode" CSharpSourceCode="@example4CSharpCode" ExampleId="example4">
        <ExamplePreview>
            <div>
                <BitSpinButton @bind-Value="SpinButtonWithLabelAboveValue"
                               Class="bit-spb-wrapped bit-spb-lbl-wrapped"
                               Suffix="cm"
                               Min="0"
                               Max="100"
                               Step="1"
                               Label="With Labal Above"
                               LabelPosition="@BitSpinButtonLabelPosition.Top">
                </BitSpinButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Custom Styled SpinButton" HTMLSourceCode="@example5HTMLCode" ExampleId="example5">
        <ExamplePreview>
            <div>
                <BitSpinButton Class="custom-spb bit-spb-wrapped bit-spb-lbl-wrapped"
                               Min="0"
                               Max="100"
                               Step="1"
                               Label="Custom Styled">
                </BitSpinButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Controlled SpinButton" HTMLSourceCode="@example6HTMLCode" CSharpSourceCode="@example6CSharpCode" ExampleId="example6">
        <ExamplePreview>
            <div class="example-desc">
                A controlled BitSpinButton provides two-way binding using either bind-value or Value parameters. With bind-value all the changes to the value can be seen by its parent
                but using Value, a custom handler should be implemented to reflect the changes outside the component.
            </div>
            <div>
                <BitSpinButton @bind-Value="BitSpinButtonBindValue"
                               Class="bit-spb-wrapped bit-spb-lbl-wrapped"
                               Min="0"
                               Max="100"
                               Step="1"
                               Label="Controlled with bind-value">
                </BitSpinButton>
                <BitSpinButton Class="bit-spb-wrapped bit-spb-lbl-wrapped"
                               Value="BitSpinButtonValueChanged"
                               ValueChanged="HandleControlledSpinButtonValueChange"
                               Min="0"
                               Max="100"
                               Step="1"
                               Label="Controlled with Value">
                </BitSpinButton>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="SpinButton validation" HTMLSourceCode="@example7HTMLCode" CSharpSourceCode="@example7CSharpCode" ExampleId="example7">
        <ExamplePreview>
            @if (string.IsNullOrEmpty(SuccessMessage))
            {
                <EditForm Model="@ValidationModel" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                    <DataAnnotationsValidator />

                    <div class="validation-summary">
                        <ValidationSummary />
                    </div>

                    <div>
                        <BitSpinButton Class="bit-spb-wrapped bit-spb-lbl-wrapped" Label="Age" @bind-Value="@ValidationModel.AgeInYears"></BitSpinButton>

                        <ValidationMessage For="@(() => ValidationModel.AgeInYears)" />
                    </div>

                    <BitButton ButtonType="BitButtonType.Submit">
                        Submit
                    </BitButton>
                </EditForm>
            }
            else
            {
                <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                    @SuccessMessage
                </BitMessageBar>
            }
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>