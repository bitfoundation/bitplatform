@page "/components/date-range-picker"

<ComponentDemo ComponentName="DateRangePicker" ComponentDescription="Picking a date can be tough without context. A BitDateRangePicker offers a drop-down control that’s optimized for picking a single date from a calendar view where contextual information like the day of the week or fullness of the calendar is important.
                                                        You can modify the calendar to provide additional context or to limit available dates."
               ComponentParameters="componentParameters" EnumParameters="enumParameters">
    <ComponentExampleBox Title="Default BitDateRangePicker" HTMLSourceCode="@example1HTMLCode" ExampleId="example1">
        <ExamplePreview>
            <BitDateRangePicker Style="max-width: 300px"
                           AriaLabel="Select a date"
                           Placeholder="Select a date..." />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Disabled BitDateRangePicker" HTMLSourceCode="@example2HTMLCode" ExampleId="example2">
        <ExamplePreview>
            <BitDateRangePicker IsEnabled=false
                           Style="max-width: 300px"
                           AriaLabel="Select a date"
                           Placeholder="Select a date..." />
            <BitDateRangePicker IsEnabled=false
                           Style="max-width: 300px"
                           Label="Disabled (with label)"
                           AriaLabel="Select a date"
                           Placeholder="Select a date..." />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitDateRangePicker with week numbers" HTMLSourceCode="@example3HTMLCode" ExampleId="example3">
        <ExamplePreview>
            <BitDateRangePicker Style="max-width: 300px"
                           ShowWeekNumbers=true
                           ShowMonthPickerAsOverlay=true
                           AriaLabel="Select a date"
                           Placeholder="Select a date..." />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Required BitDateRangePicker" HTMLSourceCode="@example4HTMLCode" CSharpSourceCode="@example4CSharpCode" ExampleId="example4">
        <ExamplePreview>
            <div class="example-desc">Validation will happen when the <code>Submit</code> button is clicked.</div>
            @if (string.IsNullOrEmpty(SuccessMessage))
            {
                <EditForm Model="formValidationDateRangePickerModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                    <DataAnnotationsValidator />

                    <div class="validation-summary">
                        <ValidationSummary />
                    </div>
                    <div>
                        <BitDateRangePicker Style="max-width: 300px"
                                   @bind-Value="formValidationDateRangePickerModel.Date"
                                   AriaLabel="Select a date"
                                   Placeholder="Select a date..."
                                   Label="Date required (with label)" />

                        <ValidationMessage For="@(() => formValidationDateRangePickerModel.Date)" />
                    </div>
                    <br />
                    <BitButton ButtonType="BitButtonType.Submit">
                        Submit
                    </BitButton>
                </EditForm>
            }
            else
            {
                <BitMessageBar MessageBarType="BitMessageBarType.Success" IsMultiline="false">
                    @SuccessMessage
                </BitMessageBar>
            }
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitDateRangePicker allowing text input" HTMLSourceCode="@example5HTMLCode" ExampleId="example5">
        <ExamplePreview>
            <div class="example-desc">
                The input field will open the BitDateRangePicker, and clicking the field again will dismiss the BitDateRangePicker and
                allow text input. Please note to use this feature, you must enter the date in the exact <code>FormatDate</code> provided for the BitDateRangePicker.
            </div>
            <BitDateRangePicker Style="max-width: 300px"
                           AllowTextInput=true
                           Label="Start date"
                           AriaLabel="Select a date" />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitDateRangePicker with custom date formatting" HTMLSourceCode="@example6HTMLCode" ExampleId="example6">
        <ExamplePreview>
            <div class="example-desc">
                Applications can customize how dates are formatted and parsed. Formatted dates can be ambiguous, so the control will avoid parsing the formatted strings of dates selected using the UI when text input is allowed.
                In this example, we are formatting and parsing dates as dd/MM/yy.
            </div>
            <BitDateRangePicker Style="max-width: 300px"
                           AriaLabel="Select a date. Date format is month slash month slash year."
                           Placeholder="Select a date..."
                           FormatDate="dd/MM/yy" />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitDateRangePicker with date boundaries" HTMLSourceCode="@example7HTMLCode" ExampleId="example7">
        <ExamplePreview>
            <div class="example-desc">
                When date boundaries are set (via MinDate and MaxDate params) the BitDateRangePicker will not allow out-of-bounds dates to be picked or entered.
                In this example, the allowed dates are between one year after now and five years before now.
            </div>
            <BitDateRangePicker Style="max-width: 300px"
                           AriaLabel="Select a date"
                           Placeholder="Select a date..."
                           MaxDate="DateTimeOffset.Now.AddYears(1)"
                           MinDate="DateTimeOffset.Now.AddYears(-5)" />
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitDateRangePicker with a custom label" HTMLSourceCode="@example8HTMLCode" ExampleId="example8">
        <ExamplePreview>
            <BitDateRangePicker Style="max-width: 300px"
                           AriaLabel="Select a date"
                           Placeholder="Select a date...">
                <LabelFragment>
                    Custom label <BitIconButton IconName="BitIconName.Calendar"></BitIconButton>
                </LabelFragment>
            </BitDateRangePicker>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitDateRangePicker with value two-way binding" HTMLSourceCode="@example9HTMLCode" CSharpSourceCode="@example9CSharpCode" ExampleId="example9">
        <ExamplePreview>
            <BitDateRangePicker Style="max-width: 300px"
                           @bind-Value="@selectedDate"
                           AriaLabel="Select a date"
                           Placeholder="Select a date..." />
            <BitLabel>Selected date: @selectedDate.ToString()</BitLabel>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Jalali BitDateRangePicker" HTMLSourceCode="@example10HTMLCode" ExampleId="example10">
        <ExamplePreview>
            <div class="example-desc">In this sample, you can see the usage of CultureInfoHelper class to specify a particular format for the BitDateRangePicker. You can also provide your own class for any custom culture of your interest. For more information, you can visit <a href="https://github.com/bitfoundation/bitplatform/blob/develop/src/BlazorUI/Bit.BlazorUI/Utils/CultureInfoHelper.cs">here</a>.</div>
            <div class="example-desc">Please note to reduce the download size of this page, the sample is not implemented here. In order to use this example, it's required to set InvariantGlobalization to false in the project setting, which causes an extra download size for the website.</div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="Jalali BitDateRangePicker with Finglish names" HTMLSourceCode="@example11HTMLCode" ExampleId="example11">
        <ExamplePreview>
            <div class="example-desc">In this sample, you can see the usage of CultureInfoHelper class to specify a particular format for the BitDateRangePicker. You can also provide your own class for any custom culture of your interest. For more information, you can visit <a href="https://github.com/bitfoundation/bitplatform/blob/develop/src/BlazorUI/Bit.BlazorUI/Utils/CultureInfoHelper.cs">here</a>.</div>
            <div class="example-desc">Please note to reduce the download size of this page, the sample is not implemented here. In order to use this example, it's required to set InvariantGlobalization to false in the project setting, which causes an extra download size for the website.</div>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitDateRangePicker with a custom style for the day cell" HTMLSourceCode="@example12HTMLCode" ExampleId="example12">
        <ExamplePreview>
            <div class="example-desc">
                In this sample, you can see how to implement a custom template for day cells of the BitDateRangePicker which have some specific style class for the weekend.
            </div>
            <BitDateRangePicker Style="max-width: 300px"
                           AriaLabel="Select a date"
                           Placeholder="Select a date...">
                <DayCellTemplate>
                    <span class="@(context.DayOfWeek == DayOfWeek.Sunday ? "weekend-cell" : null)">
                        @context.Day
                    </span>
                </DayCellTemplate>
            </BitDateRangePicker>
        </ExamplePreview>
    </ComponentExampleBox>

    <ComponentExampleBox Title="BitDateRangePicker with a custom template for the day, month, and year cell" HTMLSourceCode="@example13HTMLCode" CSharpSourceCode="@example13CSharpCode" ExampleId="example13">
        <ExamplePreview>
            <div class="example-desc">
                In this sample, you can see how to implement a totally custom template for day, month, and year cells of the BitDateRangePicker which will display a discount badge for some days, a Xmas badge for the first month of the year, and a AC suffix for years.
            </div>
            <div class="date-range-picker-wrapper">
                <BitDateRangePicker Style="max-width: 300px"
                               AriaLabel="Select a date"
                               Placeholder="Select a date...">
                    <DayCellTemplate>
                        <span class="custom-day-cell">
                            @context.Day

                            @if (context.Day % 5 is 0)
                            {
                                <span class="discount-badge">off</span>
                            }
                        </span>
                    </DayCellTemplate>
                    <MonthCellTemplate>
                        <span>
                            @this.Culture.DateTimeFormat.GetAbbreviatedMonthName(context.Month)

                            @if (context.Month == 1)
                            {
                                <span class="discount-badge">Xmas</span>
                            }
                        </span>
                    </MonthCellTemplate>
                    <YearCellTemplate>
                        <span style="position: relative">
                            @context
                            <span class="year-suffix">AC</span>
                        </span>
                    </YearCellTemplate>
                </BitDateRangePicker>
            </div>
        </ExamplePreview>
    </ComponentExampleBox>
</ComponentDemo>