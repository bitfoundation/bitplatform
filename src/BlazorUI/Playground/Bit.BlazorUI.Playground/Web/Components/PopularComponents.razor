<section class="main-container">
    <div class="content-container">
        <h2 class="main-title">Most popular components</h2>
        <div class="component-list">
            @foreach (var com in Components)
            {
                <button class="component-row @(com.Name == SelectedComponent.Name ? "component-row--active" : null)" @onclick="(() => SelectComponent(com))">
                    <div class="component-icon">
                        <PopularComponentsIcon ComponentName="@com.Name"></PopularComponentsIcon>
                    </div>
                    <div class="component-info-container">
                        <div class="component-name">@com.Name</div>
                        <div class="component-desc">@com.Description</div>
                        <a class="component-link" href="@com.Url">More about @com.Name</a>
                    </div>
                </button>
            }
        </div>
        <BitCarousel Class="component-carousel" ShowNextPrev=false>
            @foreach (var com in Components)
            {
                <BitCarouselItem Style="width: 100%">
                    <button class="component-row @(com.Name == SelectedComponent.Name ? "component-row--active" : null)" @onclick="(() => SelectComponent(com))">
                        <div class="component-icon">
                            <PopularComponentsIcon ComponentName="@com.Name"></PopularComponentsIcon>
                        </div>
                        <div class="component-info-container">
                            <div class="component-name">@com.Name</div>
                            <div class="component-desc">@com.Description</div>
                            <a class="component-link" href="@com.Url">More about @com.Name</a>
                        </div>
                    </button>
                </BitCarouselItem>
            }
        </BitCarousel>
    </div>

    <div class="content-container">
        <div class="example-preview">
            <div class="white-box">
                @if (SelectedComponent.Name == "ColorPicker")
                {
                    <BitColorPicker ShowPreview="true" @bind-Alpha="@Alpha" @bind-Color="@ColorRgb">Default ColorPicker</BitColorPicker>
                }
                else if (SelectedComponent.Name == "DatePicker")
                {
                    <BitDatePicker Style="width: 300px"
                                   ShowWeekNumbers="true">
                    </BitDatePicker>
                }
                else if (SelectedComponent.Name == "FileUpload")
                {
                    <BitFileUpload IsMultiSelect="true"
                               Label="Select files"
                               AutoUploadEnabled="true"
                               UploadUrl="@UploadUrl"
                               RemoveUrl="@RemoveUrl"
                               Style="flex-grow:1; max-width:none;">
                    </BitFileUpload>
                }
                else if (SelectedComponent.Name == "DropDown")
                {
                    <BitDropDown Label="Multi-select uncontrolled"
                             Items="GetDropdownItems()"
                             Placeholder="Select options"
                             IsMultiSelect="true"
                             Style="width: 290px; margin-bottom: 20px;">
                    </BitDropDown>
                }
                else if (SelectedComponent.Name == "Nav (TreeList)")
                {
                    <BitNav Style="width: 208px;
                       height: 350px;
                       box-sizing: border-box;
                       border: 1px solid #eee;
                       overflow-y: auto;"
                        NavLinkItems="BasicNavLinks"
                        AriaLabel="Nav basic example"
                        SelectedKey="key3">
                    </BitNav>
                }
                else if (SelectedComponent.Name == "DataGrid")
                {
                    <div class="grid">
                        <BitDataGrid Items="@FilteredItems" ResizableColumns="true" Pagination="@pagination">                
                            <BitDataGridPropertyColumn Class="column--large" Property="@(c => c.Name)" Sortable="true" IsDefaultSort="BitDataGridSortDirection.Ascending">
                                <ColumnOptions>
                                    <BitSearchBox @bind-Value="typicalSampleNameFilter"
                                                    Placeholder="Search on Name"
                                                    InputHtmlAttributes="@(new Dictionary<string, object> {{"autofocus", true}})" />
                                </ColumnOptions>
                            </BitDataGridPropertyColumn>
                                <BitDataGridTemplateColumn Title="Flag" Align="BitDataGridAlign.Center" >
                                <img class="flag" src="https://countryflagsapi.com/svg/@(context.Code)" />
                            </BitDataGridTemplateColumn>
                            <BitDataGridPropertyColumn Property="@(c => c.Medals.Gold)" Sortable="true" />
                            <BitDataGridPropertyColumn Property="@(c => c.Medals.Silver)" Sortable="true" />
                            <BitDataGridPropertyColumn Property="@(c => c.Medals.Bronze)" Sortable="true" />
                            <BitDataGridPropertyColumn Property="@(c => c.Medals.Total)" Sortable="true" />
                        </BitDataGrid>
                        <BitDataGridPaginator Value="@pagination" />
                    </div>
                }
            </div>
        </div>
        <div class="example-code">
            @if (SelectedComponent.Name == "ColorPicker")
            {
                <pre class="code"><code class="language-cshtml">&ltBitColorPicker ShowPreview="true"
                &#64;bind-Alpha="&#64;Alpha"
                &#64;bind-Color="&#64;ColorRgb">
    Default ColorPicker
&lt/BitColorPicker></code>
<code class="language-csharp">
&#64;code {
    private string ColorRgb = "rgb(0,101,239)";
    private double Alpha = 1;
}</code></pre>
            }
            else if (SelectedComponent.Name == "DatePicker")
            {
                <pre class="code"><code class="language-cshtml">&ltBitDatePicker Style="width: 300px"
               ShowWeekNumbers="true">
&lt/BitDatePicker></code></pre>
            }
            else if (SelectedComponent.Name == "FileUpload")
            {
                <pre class="code"><code class="language-cshtml">&ltBitFileUpload Label="Select files"
               IsMultiSelect="true"    
               UploadUrl="&#64;UploadUrl"
               RemoveUrl="&#64;RemoveUrl"
               Style="flex-grow:1; max-width:none;">
&lt/BitFileUpload></code>
<code class="language-csharp">
&#64;code {
    private string UploadUrl;
    private string RemoveUrl;
}</code></pre>
            }
            else if (SelectedComponent.Name == "DropDown")
            {
                <pre class="code"><code class="language-cshtml">&ltBitDropDown Label="Multi-select uncontrolled"
             Items="GetDropdownItems()"
             Placeholder="Select options"
             &#64;bind-SelectedMultipleKeys="ControlledSelectedMultipleKeys"
             IsMultiSelect="true"
             Style="width:290px; margin:20px 0 20px 0">
&lt/BitDropDown></code>
<code class="language-csharp">
&#64;code {
    private List&ltstring> ControlledSelectedMultipleKeys = new List&ltstring>() { "Apple", "Banana", "Grape" };
    private List&ltBitDropDownItem> GetDropdownItems()
    {
        List&ltBitDropDownItem> items = new();

        items.Add(new BitDropDownItem()
        {
            ItemType = BitDropDownItemType.Header,
            Text = "Fruits"
        });

        items.Add(new BitDropDownItem()
        {
            ItemType = BitDropDownItemType.Normal,
            Text = "Apple",
            Value = "f-app"
        });

        items.Add(new BitDropDownItem()
        {
            ItemType = BitDropDownItemType.Normal,
            Text = "Orange",
            Value = "f-ora",
            IsEnabled = false
        });

        items.Add(new BitDropDownItem()
        {
            ItemType = BitDropDownItemType.Normal,
            Text = "Banana",
            Value = "f-ban",
        });

        items.Add(new BitDropDownItem()
        {
            ItemType = BitDropDownItemType.Divider,
        });

        items.Add(new BitDropDownItem()
        {
            ItemType = BitDropDownItemType.Header,
            Text = "Vegetables"
        });

        items.Add(new BitDropDownItem()
        {
            ItemType = BitDropDownItemType.Normal,
            Text = "Broccoli",
            Value = "v-bro",
        });

        return items;
    }
}</code></pre>
            }
            else if (SelectedComponent.Name == "Nav (TreeList)")
            {
                <pre class="code"><code class="language-cshtml">&ltBitNav Style="width: 208px;
               height: 350px;
               box-sizing: border-box;
               border: 1px solid #eee;
               overflow-y: auto;"
        NavLinkItems="BasicNavLinks"
        AriaLabel="Nav basic example"
        SelectedKey="key3">
&lt/BitNav></code>
<code class="language-csharp">
&#64;code {
    private readonly List&ltBitNavLinkItem> BasicNavLinks = new()
    {
        new BitNavLinkItem
        {
            Name = "Home",
            Url = "http://example.com",
            ExpandAriaLabel = "Expand Home section",
            CollapseAriaLabel = "Collapse Home section",
            IsExpanded = true,
            Links = new List&ltBitNavLinkItem>
            {
                    new BitNavLinkItem { Name = "Activity", Url = "http://msn.com", Key = "key1", Target="_blank" },
                    new BitNavLinkItem { Name = "MSN", Url = "http://msn.com", Key = "key2", IsEnabled = false, Target = "_blank" }
            }
        },
        new BitNavLinkItem { Name = "Documents", Url = "http://example.com", Key = "key3", Target = "_blank", IsExpanded = true },
        new BitNavLinkItem { Name = "Pages", Url = "http://msn.com", Key = "key4", Target = "_parent" },
        new BitNavLinkItem { Name = "Notebook", Url = "http://msn.com", Key = "key5", IsEnabled = false },
        new BitNavLinkItem { Name = "Communication and Media", Url = "http://msn.com", Key = "key6", Target = "_top" },
        new BitNavLinkItem { Name = "News", Title = "News", Url = "http://msn.com", Key = "key7", Icon = "News", Target = "_self" },
    };
                        }</code></pre>
            }
            else if (SelectedComponent.Name == "DataGrid")
            {
                <pre class ="code">
                <code class="language-cshtml">&ltstyle scoped>
    .grid {
        display: inline-flex;
        flex-direction: column;
        width: 100%;
        border: 1px solid #e9eaed;
        overflow: auto;
    }

    .grid {
        .flag {
            width: 32px;
            height: 16px;
            vertical-align: middle;
        }
    }

    .grid {
        ::deep .column--large {
            width: 220px;
        }
    }

    .grid {
        ::deep th:nth-child(1) {
            .col-options-button {
                background-image: none;
                cursor: pointer;
            }
        }
    }

    .grid {
        ::deep th:nth-child(1) {
            .col-options-button:before {
                display: inline-block;
                font-family: "Fabric MDL2 Assets";
                font-style: normal;
                font-weight: normal;
                content: "\e721";
                position: relative;
                top: 2px;
            }
        }
    }

    .grid {
        ::deep th:not(.col-sort-asc):not(.col-sort-desc) {
            .sort-indicator:before {
                display: inline-block;
                font-family: "Fabric MDL2 Assets";
                font-style: normal;
                font-weight: normal;
                content: "⇅";
                position: relative;
                top: -2px;
            }
        }
    }

    .grid {
        ::deep .bitdatagrid-paginator {
            padding: 0.5rem;
        }
    }

    .grid {
        ::deep .bitdatagrid-paginator {
            .pagination-text {
                padding-top: 3px;
            }
        }
    }

    .grid {
        ::deep .bitdatagrid-paginator {
            nav {
                button {
                    border-radius: 0.25rem;
                }
            }
        }
    }

    .grid {
        ::deep .bitdatagrid-paginator {
            nav {
                button:before {
                    vertical-align: middle;
                }
            }
        }
    }

    .grid {
        ::deep .bitdatagrid-paginator {
            nav {
                button:not([disabled]) {
                    background-color: #eee;
                }
            }
        }
    }

    .grid {
        ::deep .bitdatagrid-paginator {
            nav {
                button:not([disabled]):hover {
                    background-color: #d0d1d5;
                }
            }
        }
    }

    .grid {
        ::deep table {
            position: relative;
            min-width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            text-indent: initial;
        }
    }

    .grid {
        ::deep thead {
            th:not(:last-child) {
                border-right: 1px solid #e9eaed;
            }
        }
    }

    .grid {
        ::deep thead {
            .col-width-draghandle {
                cursor: col-resize;
                width: 3px;
            }
        }
    }

    .grid {
        ::deep thead {
            .col-width-draghandle:active {
                background: unset;
            }
        }
    }

    .grid {
        ::deep thead {
            .col-width-draghandle:after {
                left: 3px;
                border-left: unset;
            }
        }
    }

    .grid {
        ::deep thead {
            .col-width-draghandle:hover {
                background: unset;
            }
        }
    }

    .grid {
        ::deep th {
            background-color: #f4f5f9;
            padding: 0.5rem;
            display: table-cell;
            vertical-align: inherit;
            font-weight: bold;
            border-bottom: 1px solid #e9eaed;
        }
    }

    .grid {
        ::deep tr {
            height: 1.8rem;
        }
    }

    .grid {
        ::deep tr:nth-child(even) {
            background: #f4f5f9;
        }
    }

    .grid {
        ::deep tr:nth-child(odd) {
            background: #FFF;
        }
    }

    .grid {
        ::deep tr:last-child > td {
            border-bottom: none;
        }
    }

    .grid {
        ::deep td {
            border-bottom: 1px solid #e9eaed;
            color: #4f4f50;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            padding: 0.25rem 0.5rem;
        }
    }

    .grid {
        ::deep td:not(:last-child) {
            border-right: 1px solid #e9eaed;
        }
    }

    .grid {
        ::deep .sort-indicator {
            margin-left: auto;
        }
    }

    .grid {
        ::deep .col-width-draghandle:after {
            border-left: unset;
        }
    }

    .grid {
        ::deep .col-title-text {
            color: #262526;
        }
    }

    .grid {
        ::deep .col-header-content {
            padding-right: 0px;
        }
    }

    .grid {
        ::deep button.col-title:active {
            background-color: unset;
        }
    }

    .grid {
        ::deep .col-options-button:active {
            background-color: unset;
        }
    }

    .grid {
        ::deep button.col-title:hover {
            background-color: unset;
        }
    }

    .grid {
        ::deep .col-options-button:hover {
            background-color: unset;
        }
    }
&lt/style>

&ltdiv class="grid">
    &ltBitDataGrid Items="&#64;FilteredItems" ResizableColumns="true" Pagination="&#64;pagination">                
        &ltBitDataGridPropertyColumn Class="column--large" Property="&#64;(c => c.Name)" Sortable="true" IsDefaultSort="BitDataGridSortDirection.Ascending">
            &ltColumnOptions>
            &ltBitSearchBox &#64;bind-Value="typicalSampleNameFilter"
                      Placeholder="Search on Name"
                      InputHtmlAttributes="&#64;(new Dictionary&ltstring, object> {{"autofocus", true}})" />
            &lt/ColumnOptions>
        &lt/BitDataGridPropertyColumn>
        &ltBitDataGridTemplateColumn Title="Flag" Align="BitDataGridAlign.Center">
                &ltimg class="flag" src="https://countryflagsapi.com/svg/&#64(context.Code)" />
        &lt/BitDataGridTemplateColumn>
        &ltBitDataGridPropertyColumn Property="&#64;(c => c.Medals.Gold)" Sortable="true" />
        &ltBitDataGridPropertyColumn Property="&#64;(c => c.Medals.Silver)" Sortable="true" />
        &ltBitDataGridPropertyColumn Property="&#64;(c => c.Medals.Bronze)" Sortable="true" />
        &ltBitDataGridPropertyColumn Property="&#64;(c => c.Medals.Total)" Sortable="true" />
    &lt/BitDataGrid>
    &ltBitDataGridPaginator Value="&#64;pagination" />
&lt/div>
</code>
    <code class="language-csharp">
&#64;code {
    IQueryable&ltCountry> allCountries;
    string typicalSampleNameFilter = string.Empty;
    BitDataGridPaginationState pagination = new() { ItemsPerPage = 7 };
    IQueryable&ltCountry> FilteredItems => allCountries?.Where(x => x.Name.Contains(typicalSampleNameFilter, StringComparison.CurrentCultureIgnoreCase));
    string typicalSampleNameFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        allCountries = _countries.AsQueryable();
    }
    
    private readonly static Country[] _countries = new[]
    {
        new Country { Code = ""AR"", Name=""Argentina"", Medals = new Medals { Gold = 0, Silver = 1, Bronze = 2 } },
        new Country { Code = ""AM"", Name=""Armenia"", Medals = new Medals { Gold = 0, Silver = 2, Bronze = 2 } },
        new Country { Code = ""AU"", Name = ""Australia"", Medals = new Medals { Gold = 17, Silver = 7, Bronze = 22 } },
        new Country { Code = ""AT"", Name = ""Austria"", Medals = new Medals { Gold = 1, Silver = 1, Bronze = 5 } },
        new Country { Code = ""AZ"", Name = ""Azerbaijan"", Medals = new Medals { Gold = 0, Silver = 3, Bronze = 4 } },
        new Country { Code = ""BS"", Name = ""Bahamas"", Medals = new Medals { Gold = 2, Silver = 0, Bronze = 0 } },
        new Country { Code = ""BH"", Name = ""Bahrain"", Medals = new Medals { Gold = 0, Silver = 1, Bronze = 0 } },
        // ...
    };
    
    public class Country
    {
        public string Code { get; set; }
        public string Name { get; set; }
        public Medals Medals { get; set; }
    }
    
    public class Medals
    {
        public int Gold { get; set; }
        public int Silver { get; set; }
        public int Bronze { get; set; }
        public int Total => Gold + Silver + Bronze;
    }
}</code></pre>
            }
        </div>
    </div>
</section>