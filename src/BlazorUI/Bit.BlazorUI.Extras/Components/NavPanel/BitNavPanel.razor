@namespace Bit.BlazorUI
@inherits BitComponentBase
@typeparam TItem

@if (IsOpen)
{
    <div style="@Styles?.Overlay" class="bit-npn-ovl @Classes?.Overlay" @onclick="CloseMenu"></div>
}

@{
    var isToggled = Togglable && IsToggled;
}

<div @ref="RootElement" @attributes="HtmlAttributes"
     id="@_Id"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value @($"{(isToggled ? "bit-npn-tgl" : "")}")"
     dir="@Dir?.ToString().ToLower()">
    <div style="@Styles?.Container" class="bit-npn-cnt @Classes?.Container">
        @if (Header is not null)
        {
            @Header
        }
        else
        {
            <div style="@Styles?.Header" class="bit-npn-hdr @Classes?.Header">
                @if (IconUrl.HasValue())
                {
                    <img src="@IconUrl"
                         class="bit-npn-img @Classes?.HeaderIcon"
                         style="@(isToggled ? "display:none;" : "") @Styles?.HeaderIcon" />
                }

                <div class="bit-npn-spc" style="@(isToggled ? "display:none;" : "")" />

                @if (Togglable)
                {
                    <BitButton IconOnly FixedColor
                               Size="BitSize.Large"
                               OnClick="ToggleNavPanel"
                               Variant="BitVariant.Text"
                               Style="@Styles?.ToggleButton"
                               Class="@Classes?.ToggleButton"
                               IconName="ColumnRightTwoThirds"
                               Color="BitColor.TertiaryBackground" />
                }
            </div>
        }

        <BitSearchBox @ref="_searchBoxRef"
                      Underlined
                      OnChange="SearchNavItems"
                      Immediate DebounceTime="500"
                      Styles="SearchBoxStyles"
                      Classes="SearchBoxClasses"
                      Class="@Classes?.SearchBox"
                      Style="@($"{(isToggled ? "display:none;" : "")}{Styles?.SearchBox}".Trim())" />

        @if (isToggled)
        {
            <BitButton IconOnly
                       FixedColor
                       IconName="Search"
                       Size="BitSize.Large"
                       OnClick="ToggleForSearch"
                       Variant="BitVariant.Text"
                       Style="@Styles?.ToggleSearchButton"
                       Class="@Classes?.ToggleSearchButton"
                       Color="BitColor.TertiaryBackground" />
        }

        @if (_filteredNavItems.Any() is false)
        {
            if (isToggled is false)
            {
                if (EmptyListTemplate is not null)
                {
                    @EmptyListTemplate
                }
                else
                {
                    <BitText Style="@Styles?.EmptyListMessageText" Class="@Classes?.EmptyListMessageText">
                        @(EmptyListMessage ?? "Nothing found!")
                    </BitText>
                }
            }
        }
        else
        {
            <BitNav @ref=_bitNavRef
                    FullWidth
                    Styles="NavStyles"
                    Classes="NavClasses"
                    IconOnly="isToggled"
                    Style="@Styles?.Nav"
                    Class="@Classes?.Nav"
                    Items="_filteredNavItems"
                    DefaultSelectedItem="_filteredNavItems[0]"
                    OnItemClick="(TItem item) => HandleNavItemClick(item)" />
        }

        <BitSpacer />

        @if (Footer is not null)
        {
            @Footer
        }
    </div>
</div>