/*
    TODO: Don't actually used scoped CSS for BitDataGrid.razor, because it's so perf-critical we don't even want to
    add the extra attributes on all the tr/td elements. We can hook everything onto the table.bitdatagrid class,
    remembering to be specific about matching closest tr/td only, not any child tables.
*/

.bitdatagrid {

    th {
        position: relative; /* So that col-options appears next to it */
    }

    .col-header-content {
        /* We want the th elements to be display:flex, but they also have to be display:table-cell to avoid breaking the layout.
       So .col-header-content is an immediate child with display:flex. */
        display: flex;
        position: relative;
        align-items: center;
    }
    /* Deep to make it easy for people adding a sort-indicator element in a custom HeaderTemplate */
    th .sort-indicator {
        /* Preset width so the column width doen't change as the sort indicator appears/disappears */
        width: 1rem;
        height: 1rem;
        align-self: center;
        text-align: center;
    }

    .col-sort-asc .sort-indicator:before,
    .col-sort-desc .sort-indicator:before {
        //background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M 2 3.25 L 12 20.75 L 22 3.25 L 12 10 z" /></svg>');
        content: "\E96E";
        font-style: normal;
        font-weight: normal;
        display: inline-block;
        font-family: 'Fabric MDL2 bit BlazorUI' !important;
    }

    .col-sort-desc .sort-indicator {
        transform: scaleY(-1) translateY(2px);
    }
    /* Deep to make it easy for people adding a col-options-button element in a custom HeaderTemplate */
    th .col-options-button {
        background: unset;
    }

    th .col-options-button:before {
        content: "\E712";
        font-style: normal;
        font-weight: normal;
        display: inline-block;
        font-family: 'Fabric MDL2 bit BlazorUI' !important;
    }

    .col-options {
        left: 0;
        z-index: 1;
        padding: 1rem;
        border: 1px solid;
        position: absolute;
        border-color: var(--bit-clr-brd-primary);
        background-color: var(--bit-clr-bg-secondary);
    }

    .col-justify-end .col-options {
        right: 0;
        left: unset;
    }

    .col-width-draghandle {
        top: 0;
        bottom: 0;
        right: 0rem;
        cursor: ew-resize;
        position: absolute;
    }

    .col-width-draghandle:after {
        top: 0;
        bottom: 0;
        content: ' ';
        position: absolute;
        border-left: 1px solid black;
    }

    td.col-justify-center {
        text-align: center;
    }

    td.col-justify-end {
        text-align: right;
    }
    /* Unfortunately we can't use the :dir pseudoselector due to lack of browser support. Instead we have to rely on
    the developer setting <html dir="rtl"> to detect if we're in RTL mode. */
    //html[dir=rtl] td.col-justify-end {
    //    text-align: left;
    //}
    //html[dir=rtl] .col-options {
    //    left: unset;
    //    right: 0;
    //}
    //html[dir=rtl] .col-justify-end .col-options {
    //    right: unset;
    //    left: 0;
    //}
    /*==================================================================*/
    /*BitDataGridColumnBase*/
    /*==================================================================*/
    /* Contains the title text and sort indicator, and expands to fill as much of the col width as it can */
    .col-title {
        padding: 0;
        flex-grow: 1;
        display: flex; /* So that we can make col-title-text expand as much as possible, and still hide overflow with ellipsis */
        min-width: 0px;
    }
    /* If the column is sortable, its title is rendered as a button element for accessibility and to support navigation by tab */
    button.col-title {
        border: none;
        cursor: pointer;
        background: none;
        position: relative;
    }

    .col-justify-center .col-title {
        justify-content: center;
    }

    .col-justify-end .col-title {
        flex-direction: row-reverse; /* For end-justified cols, the sort indicator should appear before the title text */
    }
    /* We put the column title text in its own element primarily so that it can use text-overflow: ellipsis */
    .col-title-text {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
    /*========================================================*/
    /*default theme*/
    /*========================================================*/
    --col-gap: 1rem;

    .col-header-content {
        padding-right: var(--col-gap);
    }

    > thead > tr > th {
        font-weight: normal;
    }

    &.loading > tbody {
        opacity: 0.25;
        transition: opacity linear 100ms;
        transition-delay: 25ms; /* Don't want flicker if the queries are resolving almost immediately */
    }

    .col-title {
        padding: 0.1rem 0.4rem;
    }

    > tbody > tr > td {
        padding: 0.1rem calc(0.4rem + var(--col-gap)) 0.1rem 0.4rem;
    }

    .col-title {
        gap: 0.4rem; /* Separate the sort indicator from title text */
        font-weight: bold;
    }

    .sort-indicator {
        opacity: 0.5;
    }

    .col-options-button {
        width: 1.5rem;
    }

    > thead .col-width-draghandle {
        width: 1rem;
        right: calc(var(--col-gap)/2 - 0.5rem);
    }

    > thead .col-width-draghandle:after {
        top: 5px;
        bottom: 5px;
        left: 0.5rem;
        border-color: var(--bit-clr-brd-primary);
    }

    > tbody > tr > td.grid-cell-placeholder:after {
        opacity: 0.75;
        content: '\2026';
    }
}
