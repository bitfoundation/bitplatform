@using System.Globalization

<CascadingValue Value="Visual">
    <BitDateRangePicker IsEnabled="IsEnabled"
                   Culture="Culture"
                   CalloutHtmlAttributes="CalloutHtmlAttributes"
                   PickerAriaLabel="@PickerAriaLabel"
                   Placeholder="@Placeholder"
                   GoToToday="@GoToToday"
                   IsOpen="IsOpen"
                   ShowGoToToday="ShowGoToToday"
                   ShowCloseButton="ShowCloseButton"
                   HighlightCurrentMonth="HighlightCurrentMonth"
                   HighlightSelectedMonth="HighlightSelectedMonth"
                   OnClick="HandleClick"
                   OnSelectDate="HandleSelectDate">
        <LabelFragment>
            @LabelFragment
        </LabelFragment>
    </BitDateRangePicker>
</CascadingValue>

@code {
    [Parameter] public Visual Visual { get; set; }
    [Parameter] public bool IsEnabled { get; set; }
    [Parameter] public CultureInfo Culture { get; set; } = CultureInfo.CurrentUICulture;
    [Parameter] public Dictionary<string, object> CalloutHtmlAttributes { get; set; } = new Dictionary<string, object>();
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public string GoToToday { get; set; }
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public RenderFragment LabelFragment { get; set; }
    [Parameter] public string PickerAriaLabel { get; set; }
    [Parameter] public bool ShowGoToToday { get; set; } = true;
    [Parameter] public bool ShowCloseButton { get; set; }
    [Parameter] public bool HighlightCurrentMonth { get; set; } = false;
    [Parameter] public bool HighlightSelectedMonth { get; set; } = false;

    public int ClickedValue { get; set; }
    public int SelectedDateValue { get; set; }

    public void HandleClick()
    {
        ClickedValue++;
    }

    public void HandleSelectDate(BitDateRangePickerValue value)
    {
        SelectedDateValue++;
    }
}
