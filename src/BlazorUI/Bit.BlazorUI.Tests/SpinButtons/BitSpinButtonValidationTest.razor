<EditForm Model="@TestModel" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />

    <BitSpinButton Min="@Min"
                   Max="@Max"
                   Step="@Step"
                   @bind-Value="@TestModel.Value"
                   IsEnabled="@IsEnabled"
                   AriaDescription="@AriaDescription"
                   AriaPositionInSet="@AriaPositionInSet"
                   AriaSetSize="@AriaSetSize"
                   AriaValueNow="@AriaValueNow"
                   AriaValueText="@AriaValueText"
                   AriaLabel="@AriaLabel"
                   Suffix="@Suffix"
                   LabelPosition="@LabelPosition"
                   IconName="@IconName"
                   IconAriaLabel="@IconAriaLabel"
                   DecrementIconName="@DecrementButtonIconName"
                   IncrementIconName="@IncrementButtonIconName"
                   DecrementAriaLabel="@DecrementButtonAriaLabel"
                   IncrementAriaLabel="@IncrementButtonAriaLabel"
                   Label="@Label"
                   InputHtmlAttributes="@InputHtmlAttributes"
                   Title="@Title"
                   Precision="@Precision"
                   DefaultValue="@DefaultValue"
                   OnChange="@HandleChange"
                   OnBlur="@HandleBlur"
                   OnFocus="@HandleFocus"
                   OnIncrement="HandleIncrement"
                   OnDecrement="@HandleDecrement">
        <LabelTemplate>
            @LabelFragment
        </LabelTemplate>
    </BitSpinButton>

</EditForm>

@code {
    [Parameter] public BitLabelPosition LabelPosition { get; set; } = BitLabelPosition.Start;
    [Parameter] public string AriaDescription { get; set; }
    [Parameter] public int? AriaPositionInSet { get; set; }
    [Parameter] public int? AriaSetSize { get; set; }
    [Parameter] public double? AriaValueNow { get; set; }
    [Parameter] public string AriaValueText { get; set; }
    [Parameter] public string AriaLabel { get; set; }
    [Parameter] public double Step { get; set; } = 1;
    [Parameter] public double? Min { get; set; }
    [Parameter] public double? Max { get; set; }
    [Parameter] public BitSpinButtonTestModel TestModel { get; set; }
    [Parameter] public EventCallback<double> ValueChanged { get; set; }
    [Parameter] public string Suffix { get; set; } = string.Empty;
    [Parameter] public string IconName { get; set; }
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public Dictionary<string, object> InputHtmlAttributes { get; set; } = null;
    [Parameter] public string Title { get; set; }
    [Parameter] public int? Precision { get; set; }
    [Parameter] public string DecrementButtonIconName { get; set; }
    [Parameter] public string IncrementButtonIconName { get; set; }
    [Parameter] public double DefaultValue { get; set; }
    [Parameter] public string IconAriaLabel { get; set; } = string.Empty;
    [Parameter] public string DecrementButtonAriaLabel { get; set; }
    [Parameter] public string IncrementButtonAriaLabel { get; set; }
    [Parameter] public bool IsEnabled { get; set; } = true;
    [Parameter] public RenderFragment LabelFragment { get; set; }

    public int OnIncrementEventCounter { get; set; }
    public int OnBlurEventCounter { get; set; }
    public int OnFocusEventCounter { get; set; }
    public int OnDecrementEventCounter { get; set; } = 20;
    public double OnChangeEventValue { get; set; }
    public int ValidCount { get; set; }
    public int InvalidCount { get; set; }

    private void HandleChange(double value)
    {
        OnChangeEventValue = value;
    }

    private void HandleBlur(FocusEventArgs args)
    {
        OnBlurEventCounter++;
    }

    private void HandleFocus(FocusEventArgs args)
    {
        OnFocusEventCounter++;
    }

    private void HandleDecrement(double args)
    {
        OnDecrementEventCounter--;
    }

    private void HandleIncrement(double args)
    {
        OnIncrementEventCounter++;
    }

    private void HandleValidSubmit()
    {
        ValidCount++;
    }

    private void HandleInvalidSubmit()
    {
        InvalidCount++;
    }
}