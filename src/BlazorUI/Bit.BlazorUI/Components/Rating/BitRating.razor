@namespace Bit.BlazorUI
@inherits BitInputBase<double>

<div @ref="RootElement"
     @attributes="HtmlAttributes"
     class="@ClassBuilder.Value"
     style="@StyleBuilder.Value"
     aria-label="@AriaLabel"
     aria-readonly="@IsReadOnly"
     role=@(IsReadOnly is false ? "radiogroup" : null)>

    @for (int item = 1; item <= Max; item++)
    {
        var index = item;
        var percentage = GetPercentageOf(index);

        <button type="button"
                role="radio"
                class="rate-btn"
                aria-hidden="@IsReadOnly"
                aria-checked="@(index == CurrentValue)"
                data-is-current="@(index == CurrentValue)"
                disabled=@(IsEnabled is false || IsReadOnly)
                tabindex=@(index == CurrentValue ? "0" : "-1" )
                @onclick="() => HandleClick(index)">

            @if (AriaLabelFormat.HasValue())
            {
                <span class="aria-reader">
                    @(string.Format(AriaLabelFormat!, index, Max))
                </span>
            }

            <div class="rate-icon">
                <i aria-hidden="true"
                   class="@($"bit-icon bit-icon--{(percentage == 100 ? Icon : UnselectedIcon).GetName()} rate-icon-back")">
                </i>
                <i aria-hidden="true"
                   class="@($"bit-icon bit-icon--{(percentage > 0 ? Icon : UnselectedIcon).GetName()} rate-icon-front")"
                   Style=@($"width:{percentage}%;")>
                </i>
            </div>
        </button>
    }

    <input @attributes="InputHtmlAttributes" type="number" min="@(AllowZeroStars ? 0 : 1)" max="@Max" value="@CurrentValueAsString" class="bit-input-hidden" />
</div>
