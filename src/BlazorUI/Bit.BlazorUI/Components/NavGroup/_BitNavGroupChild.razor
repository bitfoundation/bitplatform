
<li class="nav-item" role="listitem">
    <div class="composite-link @(Option.IsEnabled is false ? "disabled" : "")" name="@Option.Text">
        @if (Option._options?.Any() ?? false)
        {
            <button class="chevron-btn"
                    style="margin-left: @((Depth * 14).ToString() + "px");"
                    type="button"
                    tabindex="0"
                    aria-label="@(Option.IsExpanded ? Option.CollapseAriaLabel : Option.ExpandAriaLabel)"
                    aria-expanded="@(Option.IsExpanded ? "true" : "false")"
                    @onclick="(() => Parent.ToggleOption(Option))">
                <i class="bit-icon bit-icon--ChevronDown @(Option.IsExpanded ? "expand" : "")" aria-hidden="true"></i>
            </button>
        }

        @if (Option.Url.HasValue() || Option.ForceAnchor)
        {
            <a class="@GetOptionClasses(Option)"
               style="padding: 0 20px 0 @(((Depth * 14) + 27).ToString() + "px"); @Option.Style;"
               href="@(Option.IsEnabled ? Option.Url : null)"
               target="@Option.Target"
               title="@(Option.Title is not null ? Option.Title : Option.Text)"
               disabled="@(Option.IsEnabled is false)"
               aria-label="@Option.AriaLabel"
               aria-current="@(Option.Key == Parent.SelectedKey ? _ariaCurrentMap[Option.AriaCurrent] : null)"
               tabindex="-1"
               rel="@(Option.Url.HasValue() && Option.Target.HasValue() && IsRelativeUrl(Option.Url!) is false ? "noopener noreferrer" : null)"
               @onclick="(() => Parent.HandleOnClick(Option))">

                <div class="link-container">
                    @if (Parent.OptionTemplate is not null)
                    {
                        @Parent.OptionTemplate(Option)
                    }
                    else
                    {
                        @if (Option.IconName.HasValue)
                        {
                            <i class=@($"bit-icon bit-icon--{Option.IconName.GetName()}") aria-hidden="true"></i>
                        }
                        <div class="link-txt">@Option.Text</div>
                    }
                </div>
            </a>
        }
        else
        {
            <button class="@GetOptionClasses(Option)"
                    style="padding: 0 20px 0 @(((Depth * 14) + 27).ToString() + "px"); @Option.Style;"
                    title="@(Option.Title is not null ? Option.Title : Option.Text)"
                    disabled="@(Option.IsEnabled is false)"
                    aria-label="@Option.AriaLabel"
                    aria-current="@(Option.Key == Parent.SelectedKey ? _ariaCurrentMap[Option.AriaCurrent] : null)"
                    tabindex="-1"
                    type="button"
                    @onclick="(() => Parent.HandleOnClick(Option))">
                <div class="link-container">
                    @if (Parent.OptionTemplate is not null)
                    {
                        @Parent.OptionTemplate(Option)
                    }
                    else
                    {
                        @if (Option.IconName.HasValue)
                        {
                            <i class=@($"bit-icon bit-icon--{Option.IconName.GetName()}") aria-hidden="true"></i>
                        }
                        <div class="link-txt">@Option.Text</div>
                    }
                </div>
            </button>
        }
    </div>

    @if ((Option._options?.Any() ?? false) && Option.IsExpanded)
    {
        <ul class="nav-items" role="list">
            <CascadingValue Value="@Parent" IsFixed="true">
                @foreach (var childitem in Option._options)
                {
                    <_BitNavGroupChild Option="childitem" Depth="Depth + 1" />
                }
            </CascadingValue>
        </ul>
    }
</li>