
<li @ref="Option.RootElement" @attributes="Option.HtmlAttributes"
    style="@Option._internalStyleBuilder.Value"
    class="@Option._internalClassBuilder.Value"
    aria-label="@Option.AriaLabel"
    role="listitem">

    <div style="padding: 0 10px 0 @(Option._options.Any() ? (Depth * 14) + 10 : (Depth * 28) + 10)px;"
         class="option-container @GetOptionClasses()"
         name="@Option.Text">

        @if ((Parent.RenderType is BitNavRenderType.Normal && Option._options.Any()) ||
             (Parent.RenderType is BitNavRenderType.Grouped && Option._options.Any() && Parent._options.Any(o => o.Key == Option.Key) is false))
        {
            <button @onclick="(() => Parent.ToggleOption(Option))"
                    class="chevron-btn"
                    type="button"
                    tabindex="0"
                    aria-label="@(Option.IsExpanded ? Option.CollapseAriaLabel : Option.ExpandAriaLabel)"
                    aria-expanded="@(Option.IsExpanded ? "true" : "false")">
                <i class="bit-icon bit-icon--ChevronDown @(Option.IsExpanded ? "expand" : "")" aria-hidden="true"></i>
            </button>
        }

        @if (Option.Url.HasValue() || Option.ForceAnchor)
        {
            <a @onclick="(() => Parent.HandleOnClick(Option))"
               href="@(Option.IsEnabled ? Option.Url : null)"
               target="@Option.Target"
               class="option"
               tabindex="-1"
               title="@(Option.Title is not null ? Option.Title : Option.Text)"
               disabled="@(Option.IsEnabled is false)"
               aria-label="@Option.AriaLabel"
               aria-current="@(Option.Key == Parent.SelectedKey ? _ariaCurrentMap[Option.AriaCurrent] : null)"
               rel="@(Option.Url.HasValue() && Option.Target.HasValue() && IsRelativeUrl(Option.Url!) is false ? "noopener noreferrer" : null)">

                @if (Parent.RenderType is BitNavRenderType.Grouped && Parent._options.Any(o => o.Key == Option.Key) && Parent.HeaderTemplate is not null)
                {
                    @Parent.HeaderTemplate(Option)
                }
                else if (Parent.OptionTemplate is not null)
                {
                    @Parent.OptionTemplate(Option)
                }
                else
                {
                    @if (Option.IconName.HasValue)
                    {
                        <i class=@($"bit-icon bit-icon--{Option.IconName.GetName()} option-icon") aria-hidden="true"></i>
                    }
                    <span class="option-txt">@Option.Text</span>
                }
            </a>
        }
        else
        {
            <button @onclick="(() => Parent.HandleOnClick(Option))"
                    class="option"
                    title="@(Option.Title is not null ? Option.Title : Option.Text)"
                    disabled="@(Option.IsEnabled is false)"
                    aria-label="@Option.AriaLabel"
                    aria-current="@(Option.Key == Parent.SelectedKey ? _ariaCurrentMap[Option.AriaCurrent] : null)"
                    tabindex="-1"
                    type="button">

                @if (Parent.RenderType is BitNavRenderType.Grouped && Parent._options.Any(o => o.Key == Option.Key) && Parent.HeaderTemplate is not null)
                {
                    @Parent.HeaderTemplate(Option)
                }
                else if (Parent.OptionTemplate is not null)
                {
                    @Parent.OptionTemplate(Option)
                }
                else
                {
                    @if (Option.IconName.HasValue)
                    {
                        <i class=@($"bit-icon bit-icon--{Option.IconName.GetName()} option-icon") aria-hidden="true"></i>
                    }
                    <span class="option-txt">@Option.Text</span>
                }
            </button>
        }
    </div>

    @if ((Option._options.Any()) && Option.IsExpanded)
    {
        <ul role="list">
            <CascadingValue Value="@Parent" IsFixed="true">
                @foreach (var childitem in Option._options)
                {
                    <_BitNavGroupChild Option="childitem" Depth="Depth + 1" />
                }
            </CascadingValue>
        </ul>
    }
</li>