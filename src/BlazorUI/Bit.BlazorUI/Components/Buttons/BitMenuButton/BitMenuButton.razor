@namespace Bit.BlazorUI
@inherits BitComponentBase
@typeparam TItem

<CascadingValue Value="this" IsFixed="true">
    <div style="display:none" hidden>@(Options ?? ChildContent)</div>
</CascadingValue>

<button @ref="RootElement" @attributes="HtmlAttributes" @onclick="HandleOnClick"
        id="@_Id"
        type="button"
        style="@StyleBuilder.Value"
        class="@ClassBuilder.Value"
        tabindex="@(IsEnabled ? 0 : -1)"
        aria-label="@AriaLabel"
        aria-hidden="@AriaHidden"
        aria-describedby="@AriaDescription">
    @if (HeaderTemplate is not null)
    {
        @HeaderTemplate
    }
    else
    {
        @if (IconName.HasValue())
        {
            <i style="@Styles?.Icon" class="bit-icon bit-icon--@IconName @Classes?.Icon" />
        }
        <span style="@Styles?.Text" class="bit-mnb-txt @Classes?.Text">@Text</span>
        <i style="@Styles?.ChevronDown" class="bit-icon bit-icon--@ChevronDownIcon @Classes?.ChevronDown" />
    }

    <div @onclick="CloseCallout" @onclick:stopPropagation
         style="display:@(_isCalloutOpen ? "block" : "none");@Styles?.Overlay"
         class="bit-mnb-ovl @Classes?.Overlay"></div>

    <div id="@_calloutId"
         style="@Styles?.Callout"
         class="bit-mnb-cal @Classes?.Callout">
        <ul role="presentation">
            @foreach (TItem item in _items)
            {
                var isEnabled = GetIsEnabled(item);
                var template = GetTemplate(item);
                <li role="presentation">
                    <button @onclick="() => HandleOnItemClick(item)" @onclick:stopPropagation
                            role="menuitem"
                            aria-disabled="@isEnabled"
                            type="@_buttonType.GetValue()"
                            tabindex="@(isEnabled ? 0 : -1)"
                            style="@GetStyle(item);@Styles?.ItemButton"
                            class="bit-mnb-itm @(isEnabled ? "" : "bit-dis") @GetClass(item) @Classes?.ItemButton">
                        @if (template is not null)
                        {
                            @template(item)
                        }
                        else if (ItemTemplate is not null)
                        {
                            @ItemTemplate(item)
                        }
                        else
                        {
                            var iconName = GetIconName(item);
                            @if (iconName.HasValue())
                            {
                                <i style="@Styles?.ItemIcon" class="bit-icon bit-icon--@iconName @Classes?.ItemIcon" />
                            }
                            <span style="@Styles?.ItemText" class="bit-mnb-txt @Classes?.ItemText">
                                @GetText(item)
                            </span>
                        }
                    </button>
                </li>
            }
        </ul>
    </div>
</button>