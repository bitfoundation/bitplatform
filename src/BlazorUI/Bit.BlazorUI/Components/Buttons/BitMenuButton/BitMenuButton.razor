@namespace Bit.BlazorUI
@inherits BitComponentBase
@typeparam TItem

@if (ChildContent is not null)
{
    <CascadingValue Value="this" IsFixed="true">
        @ChildContent
    </CascadingValue>
}

<button @ref="RootElement" @attributes="HtmlAttributes" @onclick="HandleOnClick"
        id="@UniqueId"
        style="@StyleBuilder.Value"
        class="@ClassBuilder.Value"
        type="@_buttonType.GetValue()"
        tabindex="@(IsEnabled ? 0 : -1)"
        aria-label="@AriaLabel"
        aria-hidden="@AriaHidden"
        aria-describedby="@AriaDescription">
    @if (HeaderTemplate is not null)
    {
        @HeaderTemplate
    }
    else
    {
        @if (IconName.HasValue())
        {
            <i style="@ClassStyles?.Icon?.Style" class="bit-icon bit-icon--@IconName @ClassStyles?.Icon?.Class" />
        }
        <span style="@ClassStyles?.Text?.Style" class="bit-mnb-txt @ClassStyles?.Text?.Class">@Text</span>
        <i style="@ClassStyles?.ChevronDown?.Style" class="bit-icon bit-icon--@ChevronDownIcon @ClassStyles?.ChevronDown?.Class" />
    }

    <div @onclick="CloseCallout" @onclick:stopPropagation
         id="@_overlayId"
         style="display:@(_isCalloutOpen ? "block" : "none") @ClassStyles?.Overlay?.Style"
         class="bit-mnb-ovl @ClassStyles?.Overlay?.Class"></div>

    <div id="@_calloutId"
         style="@ClassStyles?.Callout?.Style" 
         class="bit-mnb-cal @ClassStyles?.Callout?.Class" 
         tabindex="@(IsEnabled ? 0 : -1)">
        <ul role="presentation">
            @foreach (TItem item in _items)
            {
                var isEnabled = GetIsEnabled(item);
                var template = GetTemplate(item);
                <li role="presentation">
                    <button @onclick="() => HandleOnItemClick(item)" @onclick:stopPropagation
                            role="menuitem"
                            type="@_buttonType.GetValue()"
                            aria-disabled="@isEnabled"
                            tabindex="@(isEnabled ? 0 : -1)"
                            style="@GetStyle(item) @ClassStyles?.ItemButton?.Style"
                            class="bit-mnb-itm @(isEnabled ? "" : "bit-dis") @GetClass(item) @ClassStyles?.ItemButton?.Class">
                        @if (template is not null)
                        {
                            @template(item)
                        }
                        else if (ItemTemplate is not null)
                        {
                            @ItemTemplate(item)
                        }
                        else
                        {
                            var iconName = GetIconName(item);
                            @if (iconName.HasValue())
                            {
                                <i style="@ClassStyles?.ItemIcon?.Style" class="bit-icon bit-icon--@iconName @ClassStyles?.ItemIcon?.Class" />
                            }
                            <span style="@ClassStyles?.ItemText?.Style" class="bit-mnb-txt @ClassStyles?.ItemText?.Class">@GetText(item)</span>
                        }
                    </button>
                </li>
            }
        </ul>
    </div>
</button>