@namespace Bit.BlazorUI
@inherits BitComponentBase
@typeparam TItem

@if (ChildContent is not null)
{
    <CascadingValue Value="this" IsFixed="true">
        @ChildContent
    </CascadingValue>
}

<div @ref="RootElement"
     @attributes="HtmlAttributes"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value"
     id="@UniqueId">
    <div id="@_splitButtonOverlayId" class="bit-spl-ovl" @onclick="CloseCallout"></div>
    <div id="@_splitButtonId" class="bit-spl-crt">
        <button type="@ButtonType?.GetValue()"
                aria-label="@AriaLabel"
                aria-describedby="@AriaDescription"
                aria-hidden="@AriaHidden"
                tabindex="@(IsEnabled ? 0 : -1)"
                class="bit-spl-opb @(_currentItem is not null && GetIsEnabled(_currentItem) is false ? "bit-dis" : null)"
                @onclick="() => HandleOnClick(_currentItem)">
            @if(ItemTemplate is not null && _currentItem is not null)
            {
                @ItemTemplate(_currentItem)
            }
            else
            {
                @if (_currentItem is not null && GetIconName(_currentItem).HasValue)
                {
                    <i class="bit-icon bit-icon--@GetIconName(_currentItem).GetName()"></i>
                }
                <span class="bit-spl-txt">@(_currentItem is not null ? GetText(_currentItem) : string.Empty)</span>
            }
        </button>
        <span class="bit-spl-spb"></span>
        <button type="button" tabindex="@(IsEnabled ? 0 : -1)" class="bit-spl-chb" @onclick="ToggleCallout">
            <i class="bit-icon bit-icon--ChevronDown"></i>
        </button>
    </div>
    <div id="@_splitButtonCalloutId" class="bit-spl-its" tabindex="@(IsEnabled ? 0 : -1)">
        <ul role="presentation">
            @foreach (TItem item in _children)
            {
                if (item != _currentItem)
                {
                    <li role="presentation">
                        <button @onclick="() => HandleOnItemClick(item)"
                                type="@ButtonType?.GetValue()"
                                role="menuitem"
                                aria-disabled="@GetIsEnabled(item)"
                                tabindex="@(GetIsEnabled(item) ? 0 : -1)"
                                class="bit-spl-itm @(GetIsEnabled(item) ? null : "bit-dis")">
                            @if (ItemTemplate is null)
                            {
                                @if (GetIconName(item).HasValue)
                                {
                                    <i class="bit-icon bit-icon--@GetIconName(item).GetName()"></i>
                                }
                                <span class="bit-spl-itc">
                                    @GetText(item)
                                </span>
                            }
                            else
                            {
                                @ItemTemplate(item)
                            }
                        </button>
                    </li>
                }
            }
        </ul>
    </div>
</div>