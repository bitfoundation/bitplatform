@namespace Bit.BlazorUI
@inherits BitInputBase<double>

<div @ref="RootElement" @attributes="HtmlAttributes"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value">
    @if (IconName.HasValue || Label.HasValue() || LabelTemplate is not null)
    {
        <div class="bit-spb-lct">
            @if (IconName.HasValue)
            {
                <i class="bit-icon bit-icon--@IconName.GetName() bit-icon--l"
                   aria-hidden="true"
                   role="@GetIconRole"
                   aria-label="@IconAriaLabel" />
            }

            @if (LabelTemplate is not null)
            {
                <label class="bit-spb-lbl" id="@GetLabelId" for="@_inputId">
                    @LabelTemplate
                </label>
            }
            else if (Label.HasValue())
            {
                <label class="bit-spb-lbl" id="@GetLabelId" for="@_inputId">
                    @Label
                </label>
            }
        </div>
    }

    <div class="bit-spb-wrp"
         title="@Title"
         aria-label="@AriaLabel"
         aria-setsize="@AriaSetSize"
         aria-posinset="@AriaPositionInSet">
        <input @ref="@_inputRef" @attributes="InputHtmlAttributes" 
               @onblur="e => HandleOnBlur(e)" 
               @onfocus="e => HandleOnFocus(e)" 
               @oninput="e => HandleOnChange(e)" 
               @onchange="e => HandleOnChange(e)" 
               @onkeydown="e => HandleOnKeyDown(e)"
               type="text"
               id="@_inputId"
               role="spinbutton"
               autocomplete="off"
               class="bit-spb-inp"
               aria-valuemin="@_min"
               aria-valuemax="@_max"
               value="@_intermediateValue"
               aria-labelledby="@GetLabelId"
               disabled="@(IsEnabled is false)"
               aria-valuenow="@GetAriaValueNow"
               aria-valuetext="@GetAriaValueText"
               aria-describedby="@AriaDescription"
               aria-disabled="@(IsEnabled is false)" />
        <span class="bit-spb-opr">
            <button @ref="_buttonIncrement" 
                    @onpointerup="HandleOnPointerUpOrOut"
                    @onpointerout="HandleOnPointerUpOrOut" 
                    @onpointerdown="e => HandleOnPointerDown(BitSpinButtonAction.Increment, e)" 
                    type="button"
                    tabindex="-1"
                    class="bit-spb-btn"
                    date-is-focusable="false"
                    disabled="@(IsEnabled is false)"
                    aria-disabled="@(IsEnabled is false)"
                    aria-label="@IncrementButtonAriaLabel">
                <span class="bit-spb-iwp">
                    <i class="bit-icon bit-icon--@IncrementButtonIconName.GetName() bit-icon--s" />
                </span>
            </button>

            <button @ref="_buttonDecrement" 
                    @onpointerup="HandleOnPointerUpOrOut"
                    @onpointerout="HandleOnPointerUpOrOut" 
                    @onpointerdown="e => HandleOnPointerDown(BitSpinButtonAction.Decrement, e)" 
                    type="button"
                    tabindex="-1"
                    class="bit-spb-btn"
                    date-is-focusable="false"
                    disabled="@(IsEnabled is false)"
                    aria-disabled="@(IsEnabled is false)"
                    aria-label="@DecrementButtonAriaLabel">
                <span class="bit-spb-iwp">
                    <i class="bit-icon bit-icon--@DecrementButtonIconName.GetName() bit-icon--s" />
                </span>
            </button>
        </span>
    </div>
</div>