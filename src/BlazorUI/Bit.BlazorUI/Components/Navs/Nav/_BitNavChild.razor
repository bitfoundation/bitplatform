@namespace Bit.BlazorUI
@typeparam TItem

<li role="listitem" style="@Nav.GetStyle(Item)" class="@Nav.GetClass(Item)">
    @{
        var template = Nav.GetTemplate(Item);
        var templateRenderMode = Nav.GetTemplateRenderMode(Item);
        var isEnabled = Nav.GetIsEnabled(Item);
        var isExpanded = Nav.GetItemExpanded(Item);
        var isSeparator = Nav.GetIsSeparator(Item);
        var colAriaLabel = Nav.GetCollapseAriaLabel(Item);
        var expAriaLabel = Nav.GetExpandAriaLabel(Item);
        var text = Nav.GetText(Item);
        var childItems = Nav.GetChildItems(Item);
        var description = Nav.GetDescription(Item);
        var iconName = Nav.GetIconName(Item);
        var url = Nav.GetUrl(Item);
        var title = Nav.GetTitle(Item);
        var target = Nav.GetTarget(Item);
        var renderLink = url.HasValue() || Nav.GetForceAnchor(Item);
        var href = (isEnabled && (Nav.SelectedItem != Item || Nav.Reselectable)) ? url : null;
    }
    @if (Nav.RenderType is BitNavRenderType.Grouped && Parent is null)
    {
        @if (isSeparator)
        {
            if (template is not null)
            {
                @template(Item)
            }
            else
            {
                <div class="bit-nav-sep @Nav.Classes?.Separator" style="@Nav.Styles?.Separator"></div>
            }
        }
        else if (template is not null && templateRenderMode is BitNavItemTemplateRenderMode.Replace)
        {
            @template(Item)
        }
        else if (Nav.HeaderTemplate is not null && Nav.HeaderTemplateRenderMode is BitNavItemTemplateRenderMode.Replace)
        {
            @Nav.HeaderTemplate(Item)
        }
        else
        {
            <button @onclick="ToggleItem"
                    tabindex="0"
                    type="button"
                    class="bit-nav-gcb"
                    aria-expanded="@(isExpanded ? "true" : "false")"
                    aria-label="@(isEnabled ? colAriaLabel : expAriaLabel)">
                @if (template is not null)
                {
                    @template(Item)
                }
                else if (Nav.HeaderTemplate is not null)
                {
                    @Nav.HeaderTemplate(Item)
                }
                else
                {
                    if (description.HasValue())
                    {
                        <div class="bit-nav-itg">
                            <div class="bit-nav-iit" style="@(Nav.ReversedChevron ? "flex-flow:row-reverse" : null)">
                                <i class="bit-icon bit-icon--@(Nav.ChevronDownIcon.HasValue() ? Nav.ChevronDownIcon : "ChevronDown") @(isExpanded ? "bit-nav-exp" : "")" aria-hidden="true" />
                                <span class="bit-nav-ghd">@text</span>
                            </div>
                            <div title="@description"
                                 class="bit-nav-des @Nav.Classes?.Description"
                                 style="@(Nav.ReversedChevron ? "padding-inline-start:0" : ""); @Nav.Styles?.Description">
                                @description
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="bit-nav-iit" style="@(Nav.ReversedChevron ? "flex-flow:row-reverse" : null)">
                            <i class="bit-icon bit-icon--@(Nav.ChevronDownIcon.HasValue() ? Nav.ChevronDownIcon : "ChevronDown") @(isExpanded ? "bit-nav-exp" : "")" aria-hidden="true" />
                            <span class="bit-nav-ghd">@text</span>
                        </div>
                    }
                }
            </button>
        }
    }
    else
    {
        @if (isSeparator)
        {
            if (template is not null)
            {
                @template(Item)
            }
            else
            {
                <div style="@Nav.Styles?.Separator" class="bit-nav-sep @Nav.Classes?.Separator"></div>
            }
        }
        else
        {
            var padding = childItems.Any()
            ? (Depth * Nav.IndentValue + (Nav.ReversedChevron ? Nav.IndentReversedPadding : 0))
            : (Depth * Nav.IndentValue + (Nav.ReversedChevron ? Nav.IndentReversedPadding : Nav.IndentPadding));

            <div name="@text"
                 class="bit-nav-ict @GetItemContainerClasses()"
                 style="padding-inline-start:@(padding)px; @GetItemContainerStyles()">

                <div class="bit-nav-mct" style="@(Nav.ReversedChevron ? "flex-flow:row-reverse" : null)">
                    @if (childItems.Any())
                    {
                        <button @onclick="ToggleItem"
                                type="button"
                                tabindex="0"
                                style="@Nav.Styles?.ToggleButton"
                                class="bit-nav-cbt @Nav.Classes?.ToggleButton"
                                aria-expanded="@(isExpanded ? "true" : "false")"
                                aria-label="@(isExpanded ? colAriaLabel : expAriaLabel)">
                            <i class="bit-icon bit-icon--@(Nav.ChevronDownIcon.HasValue() ? Nav.ChevronDownIcon : "ChevronDown") @(isExpanded ? "bit-nav-exp" : "")" aria-hidden="true" />
                        </button>
                    }

                    @if (template is not null && templateRenderMode is BitNavItemTemplateRenderMode.Replace)
                    {
                        @template(Item)
                    }
                    else if (Nav.ItemTemplate is not null && Nav.ItemTemplateRenderMode is BitNavItemTemplateRenderMode.Replace)
                    {
                        @Nav.ItemTemplate(Item)
                    }
                    else
                    {
                        @if (renderLink)
                        {
                            <a @onclick="HandleOnClick"
                               tabindex="-1"
                               style="@GetItemStyles()"
                               target="@target"
                               aria-label="@Nav.GetAriaLabel(Item)"
                               class="bit-nav-itm @GetItemClasses()"
                               disabled="@(isEnabled is false)"
                               href="@href"
                               title="@(title is not null ? title : text)"
                               aria-current="@(Item == Nav.SelectedItem ? _AriaCurrentMap[Nav.GetAriaCurrent(Item)] : null)"
                               rel="@(url.HasValue() && target.HasValue() && IsRelativeUrl(url!) is false ? "noopener noreferrer" : null)">
                                @if (template is not null)
                                {
                                    @template(Item)
                                }
                                else if (Nav.ItemTemplate is not null)
                                {
                                    @Nav.ItemTemplate(Item)
                                }
                                else
                                {
                                    @if (iconName.HasValue())
                                    {
                                        <i style="@Nav.Styles?.ItemIcon" class="bit-nav-iic bit-icon bit-icon--@iconName @Nav.Classes?.ItemIcon" aria-hidden="true" />
                                    }
                                    <span>@text</span>
                                }
                            </a>
                        }
                        else
                        {
                            <button @onclick="HandleOnClick"
                                    type="button"
                                    tabindex="-1"
                                    style="@GetItemStyles()"
                                    aria-label="@Nav.GetAriaLabel(Item)"
                                    class="bit-nav-itm @GetItemClasses()"
                                    disabled="@(isEnabled is false)"
                                    title="@(title is not null ? title : text)"
                                    aria-current="@(Item == Nav.SelectedItem ? _AriaCurrentMap[Nav.GetAriaCurrent(Item)] : null)">
                                @if (template is not null)
                                {
                                    @template(Item)
                                }
                                else if (Nav.ItemTemplate is not null)
                                {
                                    @Nav.ItemTemplate(Item)
                                }
                                else
                                {
                                    @if (iconName.HasValue())
                                    {
                                        <i style="@Nav.Styles?.ItemIcon" class="bit-nav-iic bit-icon bit-icon--@iconName @Nav.Classes?.ItemIcon" aria-hidden="true" />
                                    }
                                    <span>@text</span>
                                }
                            </button>
                        }
                    }
                </div>

                @if (description.HasValue())
                {
                    @if (renderLink)
                    {
                        <a @onclick="HandleOnClick"
                           tabindex="-1"
                           target="@target"
                           title="@description"
                           disabled="@(isEnabled is false)"
                           href="@href"
                           style="padding-inline-start:@((Nav.ReversedChevron is false && childItems.Any()) ? 27 : 0)px; @Nav.Styles?.Description"
                           class="bit-nav-des @Nav.Classes?.Description"
                           rel="@(url.HasValue() && target.HasValue() && IsRelativeUrl(url!) is false ? "noopener noreferrer" : null)">
                            @description
                        </a>
                    }
                    else
                    {
                        <button @onclick="HandleOnClick"
                                type="button"
                                tabindex="-1"
                                title="@description"
                                disabled="@(isEnabled is false)"
                                style="padding-inline-start:@((Nav.ReversedChevron is false && childItems.Any()) ? 27 : 0)px; @Nav.Styles?.Description"
                                class="bit-nav-des @Nav.Classes?.Description">
                            @description
                        </button>
                    }
                }
            </div>
        }
    }

    @if ((childItems.Any()) && (isExpanded))
    {
        <ul role="list">
            <CascadingValue Value="this" IsFixed="true">
                @foreach (var item in childItems)
                {
                    <_BitNavChild @key="Nav.GetItemKey(item)" Item="item" Depth="Depth + 1" />
                }
            </CascadingValue>
        </ul>
    }
</li>