@namespace Bit.BlazorUI
@inherits BitComponentBase

<div @ref="RootElement" @attributes="HtmlAttributes"
     id="@UniqueId"
     class="@ClassBuilder.Value"
     style="@StyleBuilder.Value">
    @if (Label.HasValue())
    {
        <label style="@Styles?.Label" class="bit-sld-lbl @Classes?.Label" @ref="_labelRef">@Label</label>
    }

    @if (IsRanged)
    {
        @if (ShowValue && IsVertical)
        {
            <label @ref="_valueLabelRef"
                   style="@Styles?.LowerValueLabel"
                   class="bit-sld-vlb @Classes?.LowerValueLabel"
                   for="@_sliderBoxId">
                @GetValueDisplay(upperValue.GetValueOrDefault())
            </label>
        }

        <div @ref="_containerRef"
             class="bit-sld-cnt @Classes?.Container"
             style="@(IsVertical ? _styleContainer : null) @Styles?.Container">

            @if (ShowValue && IsVertical is false)
            {
                <label style="@Styles?.LowerValueLabel" class="bit-sld-vlb @Classes?.LowerValueLabel">@GetValueDisplay(lowerValue.GetValueOrDefault())</label>
            }

            <div @attributes="@SliderBoxHtmlAttributes"
                 id="@_sliderBoxId"
                 style="@_styleProgress @Styles?.Progress"
                 class="bit-sld-box @Classes?.Progress">

                <input @bind-value="@_firstInputValue" @oninput="@(args => HandleOnRangeInput(args, true))"
                       id="@_minInputId"
                       type="range"
                       min="@Min"
                       max="@Max"
                       step="@Step"
                       role="slider"
                       style="@Styles?.Input"
                       class="@Classes?.Input"
                       tabindex="@GetTabIndex"
                       disabled=@(IsEnabled is false)
                       data-is-focusable="@(IsEnabled is false)"
                       aria-disabled="@(IsEnabled is false)"
                       aria-label="@Label"
                       aria-valuemin="@Min"
                       aria-valuemax="@Max"
                       aria-valuetext="@GetAriaValueText(_firstInputValue.GetValueOrDefault())"
                       aria-valuenow="@_firstInputValue" />
                <input @bind-value="@_secondInputValue" @oninput="@(args => HandleOnRangeInput(args, false))"
                       id="@_maxInputId"
                       type="range"
                       min="@Min"
                       max="@Max"
                       step="@Step"
                       role="slider"
                       style="@Styles?.Input"
                       class="@Classes?.Input"
                       tabindex="@GetTabIndex"
                       disabled=@(IsEnabled is false)
                       data-is-focusable="@(IsEnabled is false)"
                       aria-disabled="@(IsEnabled is false)"
                       aria-label="@Label"
                       aria-valuemin="@Min"
                       aria-valuemax="@Max"
                       aria-valuetext="@GetAriaValueText(_secondInputValue.GetValueOrDefault())"
                       aria-valuenow="@_secondInputValue" />

                @if (IsOriginFromZero)
                {
                    <span style="left: calc(50% - 1px); @Styles?.ZeroTick" class="bit-sld-ztk @Classes?.ZeroTick"></span>
                }
            </div>
            @if (ShowValue && IsVertical is false)
            {
                <label style="@Styles?.UpperValueLabel" class="bit-sld-vlb @Classes?.UpperValueLabel">@GetValueDisplay(upperValue.GetValueOrDefault())</label>
            }
        </div>

        @if (ShowValue && IsVertical)
        {
            <label style="@Styles?.UpperValueLabel" class="bit-sld-vlb @Classes?.UpperValueLabel">@GetValueDisplay(lowerValue.GetValueOrDefault())</label>
        }
    }
    else
    {
        <div @ref="_containerRef" style="@Styles?.Container" class="bit-sld-cnt @Classes?.Container">
            <input @bind-value="@Value" @oninput="@HandleOnInput"
                   type="range"
                   min="@Min"
                   max="@Max"
                   step="@Step"
                   style="@_styleProgress @Styles?.Input"
                   class="@Classes?.Input"
                   disabled=@(IsEnabled is false) />

            @if (IsOriginFromZero)
            {
                <span class="bit-sld-ztk @Classes?.ZeroTick" style="@(IsVertical ? "top: calc(50% - -2px);" : "left: calc(50% - 29px);") @Styles?.ZeroTick"></span>
            }

            @if (ShowValue && IsVertical is false)
            {
                <label style="@Styles?.ValueLabel" class="bit-sld-vlb @Classes?.ValueLabel">@GetValueDisplay(Value.GetValueOrDefault())</label>
            }
        </div>
        @if (ShowValue && IsVertical)
        {
            <label style="@Styles?.ValueLabel" class="bit-sld-vlb @Classes?.ValueLabel">@GetValueDisplay(Value.GetValueOrDefault())</label>
        }
    }
</div>