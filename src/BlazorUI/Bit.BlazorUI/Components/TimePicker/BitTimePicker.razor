@namespace Bit.BlazorUI
@inherits BitInputBase<TimeSpan?>

<div @ref="RootElement" @attributes="HtmlAttributes"
     id="@UniqueId"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value">

    @if (LabelTemplate is not null)
    {
        <label class="bit-tpc-lbl" id="@_labelId" for="@_textFieldId">
            @LabelTemplate
        </label>
    }
    else if (Label.HasValue())
    {
        <label class="bit-tpc-lbl" id="@_labelId" for="@_textFieldId">
            @Label
        </label>
    }

    <div class="bit-tpc-wrp" id="@_wrapperId" aria-owns="@(IsOpen ? _calloutId : null)" @onclick="HandleOnClick">
        <div class="bit-tpc-fld-grp @(AllowTextInput ? "bit-tpc-edt-inp" : null)">
            <input @attributes="InputHtmlAttributes"
                   @onfocus="@HandleOnFocus"
                   @oninput="@HandleOnChange"
                   @onfocusin="@HandleOnFocusIn"
                   @onfocusout="@HandleOnFocusOut"
                   type="text"
                   role="combobox"
                   id="@_textFieldId"
                   tabindex="@TabIndex"
                   aria-haspopup="dialog"
                   aria-label="@AriaLabel"
                   placeholder="@Placeholder"
                   value="@CurrentValueAsString"
                   disabled=@(IsEnabled is false)
                   readonly=@(AllowTextInput is false)
                   aria-expanded="@(IsOpen ? "true" : "false")"
                   aria-controls="@(IsOpen ? _calloutId : null)" 
                   aria-labelledby="@(Label.HasValue() ? _labelId : null)" />

            @if (IconTemplate is not null)
            {
                @IconTemplate
            }
            else
            {
                <i class="bit-icon bit-icon--@IconName.GetName()" aria-hidden="true"></i>
            }
        </div>
    </div>

    <div class="bit-tpc-ovl" id="@_overlayId" @onclick="CloseCallout"></div>

    <div class="bit-tpc-cal @(IsResponsive ? "bit-tpc-rsp" : string.Empty)" id="@_calloutId">
        <div class="bit-tpc-mcal" role="dialog" @attributes=@CalloutHtmlAttributes aria-label="@PickerAriaLabel">
            <div aria-hidden="true" tabindex="0" data-is-visible="true" style="pointer-events: none; position: fixed;"></div>
            <div role="group" aria-label="">
                <div class="bit-tpc-tbr">
                    <div class="bit-tpc-hm">
                        @if (EditMode == BitTimePickerEditMode.Normal)
                        {
                            <button type="button" class="bit-tpc-txt @(_currentView == BitTimePickerDialMode.Hours ? string.Empty : "bit-tpc-ina")" @onclick="HandleOnHourClick">
                                @GetHourString()
                            </button>
                            <span class="bit-tpc-txt">:</span>
                            <button type="button" class="bit-tpc-txt @(_currentView == BitTimePickerDialMode.Minutes ? string.Empty : "bit-tpc-ina")" @onclick="HandleOnMinuteClick">
                                @GetMinuteString()
                            </button>
                        }
                        else
                        {
                            <span class="bit-tpc-txt">@GetHourString():@GetMinuteString()</span>
                        }
                    </div>
                    @if (AmPm)
                    {
                        <div class="bit-tpc-am-pm">
                            <button type="button" class="bit-tpc-txt @(IsAm() ? string.Empty : "bit-tpc-ina")" @onclick="HandleOnAmClick">AM</button>
                            <button type="button" class="bit-tpc-txt @(IsAm() is false ? string.Empty : "bit-tpc-ina")" @onclick="HandleOnPmClick">PM</button>
                        </div>
                    }
                </div>
                <div class="bit-tpc-clk" @onpointerdown="HandleOnPointerDown" @onpointerup="HandleOnPointerUp">
                    <div class="bit-tpc-pin"></div>
                    @{
                        var deg = GetPointerDegree();
                    }
                    <div class="bit-tpc-ptr@(_isPointerDown ? string.Empty : " bit-tpc-ani")" style="height: @(GetClockHandHeightPercent())%; transform: rotateZ(@(deg)deg);">
                        <div class="bit-tpc-thm@(deg % 30 == 0 ? string.Empty : " bit-tpc-thm-min")"></div>
                    </div>
                    @if (_currentView == BitTimePickerDialMode.Hours)
                    {
                        <div class="bit-tpc-dil">
                            @if (AmPm)
                            {
                                @*Hours from 1 to 12*@
                                for (int i = 1; i <= 12; ++i)
                                {
                                    <p class="bit-tpc-num @GetHoursMinutesClass(i)" style="transform: translate(@GetTransformStyle(i, 109, 0, 5));">@i</p>
                                }
                                for (int i = 1; i <= 12; ++i)
                                {
                                    var _i = i;
                                    <div class="bit-tpc-stk bit-tpc-hr" style="@($"transform: rotateZ({_i * 30}deg);")" @onclick="(() => HandleOnHourClockHandClick(_i))" @onpointerover="(() => HandleOnHourPointerOver(_i))" @onclick:stopPropagation="true"></div>
                                }
                            }
                            else
                            {
                                @*Hours from 13 to 24 (00)*@
                                for (int i = 1; i <= 12; ++i)
                                {
                                    <p class="bit-tpc-num @GetHoursMinutesClass((i + 12) % 24)" style="transform: translate(@GetTransformStyle(i, 109, 0, 5))">@(((i + 12) % 24).ToString("D2"))</p>
                                }
                                @*Hours from 1 to 12*@
                                for (int i = 1; i <= 12; ++i)
                                {
                                    <p class="bit-tpc-num @GetHoursMinutesClass(i)" style="transform: translate(@GetTransformStyle(i, 74, 0, 40))">@(i.ToString("D2"))</p>
                                }
                                for (int i = 1; i <= 12; ++i)
                                {
                                    var _i = i;
                                    <div class="bit-tpc-stk" style="@($"transform: rotateZ({_i * 30}deg);")">
                                        <div class="bit-tpc-inr" @onclick="(() => HandleOnHourClockHandClick(_i))" @onpointerover="(() => HandleOnHourPointerOver(_i))" @onclick:stopPropagation="true"></div>
                                        <div class="bit-tpc-otr" @onclick="(() => HandleOnHourClockHandClick((_i + 12) % 24))" @onpointerover="(() => HandleOnHourPointerOver((_i + 12) % 24))" @onclick:stopPropagation="true"></div>
                                    </div>
                                }
                            }
                        </div>
                    }
                    else if (_currentView == BitTimePickerDialMode.Minutes)
                    {
                        <div class="bit-tpc-dil">
                            @*Minutes from 05 to 60 (00) - step 5*@
                            @for (int i = 0; i < 12; ++i)
                            {
                                <p class="bit-tpc-num @GetHoursMinutesClass(i * 5)" style="transform: translate(@GetTransformStyle(i, 109, 0, 5))">@((i * 5).ToString("D2"))</p>
                            }
                            @for (int i = 0; i < 60; ++i)
                            {
                                var _i = i;
                                <div class="bit-tpc-stk bit-tpc-min" style="@($"transform: rotateZ({_i * 6}deg);")" @onclick="(() => HandleOnMinuteClockHandClick(_i))" @onpointerover="(() => HandleOnMinutePointerOver(_i))" @onclick:stopPropagation="true"></div>
                            }
                        </div>
                    }
                </div>
            </div>
            <div aria-hidden="true" tabindex="0" style="pointer-events: none; position: fixed;"></div>
        </div>
    </div>

</div>
