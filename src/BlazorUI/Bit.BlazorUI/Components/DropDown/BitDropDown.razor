@namespace Bit.BlazorUI
@inherits BitInputBase<string>
<div @ref="RootElement"
     id="@UniqueId"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value">
    @if (LabelFragment is not null)
    {
        <label class="bit-drp-lbl" id="@DropdownLabelId">@LabelFragment</label>
    }
    else if (Label.HasValue())
    {
        <label class="bit-drp-lbl" id="@DropdownLabelId">@Label</label>
    }

    <div class="bit-drp-overlay"
         id="@DropDownOverlayId"
         @onclick="CloseCallout"></div>

    <div class="bit-drp-wrapper"
         id="@DropDownId"
         tabindex=@(IsEnabled ? 0 : -1)
         role="combobox"
         data-is-focusable="true"
         aria-expanded=@(isOpen ? "true" : "false")
         aria-labelledby="@GetDropdownAriaLabelledby"
         aria-required="@IsRequired"
         aria-disabled="@(IsEnabled is false)"
         aria-haspopup="listbox"
         aria-controls="@(IsOpen ? $"{DropDownId}-list" : null)"
         title="@Title"
         @onclick="HandleClick">
        <span class="bit-drp-wrapper-txt"
              id="@DropDownOptionId"
              aria-live="polite"
              aria-atomic="true"
              aria-invalid="false">
            @if (Text.HasValue())
            {
                @if (TextTemplate is not null)
                {
                    @TextTemplate(this)
                }
                else
                {
                    @Text
                }
            }
            else
            {
                @if (PlaceholderTemplate is not null)
                {
                    @PlaceholderTemplate(this)
                }
                else
                {
                    @Placeholder
                }
            }
        </span>
        <span class="bit-drp-wrapper-ic">
            @if (CaretDownFragment is not null)
            {
                @CaretDownFragment
            }
            else
            {
                <i class="bit-icon" aria-hidden="true"></i>
            }
        </span>
    </div>

    <div class="bit-drp-items-wrapper"
         id="@DropDownCalloutId"
         tabindex="0"
         role="listbox"
         aria-labelledby="@DropdownLabelId">
        <div class="bit-drp-close-btn-contianer">
            <button class="close-btn"
                    type="button"
                    aria-label="Close"
                    aria-describedby="Close"
                    aria-hidden="Close"
                    title="Close"
                    @onclick="CloseCallout">
                <span>
                    <i class="bit-icon bit-icon--ChromeClose"></i>
                </span>
            </button>
        </div>
        @if (ShowSearchBox)
        {
            <div class="@GetSearchBoxClasses()">
                <div class="icon-container" aria-hidden="true">
                    <i class="bit-icon bit-icon--Search" aria-hidden="true"></i>
                </div>
                <input class="search-input"
                   type="text"
                   aria-label="Search text"
                   placeholder="@SearchBoxPlaceholder"
                   role="searchbox"
                   value="@searchText"
                   @onfocusin="HandleSearchBoxFocusIn"
                   @onfocusout="HandleSearchBoxFocusOut"
                   @oninput="@HandleFilterChange" />
                @if (searchText.HasValue())
                {
                    <div class="search-clear-btn-container">
                        <button class="search-clear-btn"
                        type="button"
                        aria-label="Clear text"
                        aria-hidden="true"
                        disabled="@(searchText.HasNoValue())"
                        @onclick="HandleSearchBoxOnClear">
                            <span>
                                <i class="bit-icon bit-icon--Clear" aria-hidden="true"></i>
                            </span>
                        </button>
                    </div>
                }
            </div>
        }

        <div id="@DropDownCalloutId" class="scroll-wrapper">
            @if (Virtualize)
            {
                <Virtualize Items="@GetItems()"
                        Context="item"
                        ItemSize="@ItemSize"
                        OverscanCount="@OverscanCount">
                    @dropDownItemTemplate!(item)
                </Virtualize>
            }
            else
            {
                @foreach (var item in GetItems())
                {
                    @dropDownItemTemplate(item)
                }
            }
        </div>

    </div>
    <select @attributes="InputHtmlAttributes" class="bit-input-hidden" multiple>
        @foreach (BitDropDownItem item in Items.Where(i => i.ItemType == BitDropDownItemType.Normal && i.IsSelected))
        {
            <option value="@item.Value" selected>@item.Text</option>
        }
    </select>
</div>

@code {
    private RenderFragment<(BitDropDownItem item, int index)> dropDownItemTemplate => dropDownItem => __builder =>
    {
        if (dropDownItem.item.ItemType == BitDropDownItemType.Header)
        {
            <div class="@RootElementClass-head-@VisualClassRegistrar()" id="@($"{DropDownId}{dropDownItem.item.Text?.ToLower()}Header")">
                @dropDownItem.item.Text
            </div>
        }
        else if (dropDownItem.item.ItemType == BitDropDownItemType.Normal)
        {
            @if (IsMultiSelect)
            {
                <div style="@(dropDownItem.item.IsHidden ? "display: none" : string.Empty)" class="@GetCssClassForItem(dropDownItem.item)">
                    <label class="bit-drp-chb-lbl" for="@($"{DropDownId}-list{dropDownItem.index}")" @onclick="@((e) => HandleItemClick(dropDownItem.item))">
                        <div class="bit-drp-chb-checkbox">
                            <i class=@($"bit-drp-chb-checkmark bit-icon bit-icon--{BitIconName.Accept.GetName()}")
                               aria-hidden="true"
                               aria-label="@dropDownItem.item.Text"></i>
                        </div>

                        <span class="bit-drp-chb-txt no-text-select">
                            @if (ItemTemplate is not null)
                            {
                                @ItemTemplate(dropDownItem.item)
                            }
                            else
                            {
                                @dropDownItem.item.Text
                            }
                        </span>
                    </label>
                </div>
            }
            else
            {
                <button class="bit-drp-item @(dropDownItem.item.IsSelected ? $"{RootElementClass}-slc-{VisualClassRegistrar()}" : string.Empty)"
                        style="@(dropDownItem.item.IsHidden ? "display: none" : string.Empty)"
                        id="@($"{DropDownId}-list{dropDownItem.index}")"
                        type="button"
                        role="option"
                        data-is-focusable="@(dropDownItem.item.IsEnabled ? "true" : "false")"
                        disabled=@(!dropDownItem.item.IsEnabled)
                        data-index="@dropDownItem.index"
                        aria-disabled="@(!dropDownItem.item.IsEnabled)"
                        aria-selected="@(dropDownItem.item.IsSelected ? "true" : "false")"
                        aria-setsize="@NormalDropDownItems.Count"
                        aria-posinset="@GetItemPosInSet(dropDownItem.item)"
                        tabindex="@(dropDownItem.item.IsEnabled ? 0 : -1)"
                        title="@dropDownItem.item.Title"
                        aria-label="@dropDownItem.item.AriaLabel"
                        @onclick="()=> HandleItemClick(dropDownItem.item)">
                    @if (ItemTemplate is not null)
                    {
                        @ItemTemplate(dropDownItem.item)
                    }
                    else
                    {
                        @dropDownItem.item.Text
                    }
                </button>
            }
        }
        else if (dropDownItem.item.ItemType == BitDropDownItemType.Divider)
        {
            <div class="@RootElementClass-div-@VisualClassRegistrar()" role="separator"></div>
        }
    };
}