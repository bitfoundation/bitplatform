@namespace Bit.BlazorUI
@inherits BitInputBase<TValue>
@typeparam TItem
@typeparam TValue

<CascadingValue Value="this" IsFixed="true">
    <div style="display:none" hidden>@(Options ?? ChildContent)</div>
</CascadingValue>

<div @ref="RootElement" @attributes="HtmlAttributes"
     role="radiogroup"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value"
     aria-label="@AriaLabel"
     aria-labelledby="@GetAriaLabelledBy()">

    <label id="@_labelId" disabled="@(IsEnabled is false)">
        @if (LabelTemplate is not null)
        {
            @LabelTemplate
        }
        else if (Label.HasValue())
        {
            <span class="bit-chg-lbl">@Label</span>
        }
    </label>

    <div class="bit-chg-cnt @GetLayoutFlowClass()">
        @foreach (var item in _items)
        {
            var inputId = GetInputId(item);
            var isChecked = GetIsCheckedItem(item);

            <div class="@GetItemContainerClassName(item)">
                <label for="@inputId">
                    @if (ItemTemplate is not null)
                    {
                        @ItemTemplate(item)
                    }
                    else
                    {
                        <div class="@GetItemLabelClass(item)">
                            @if (ItemLabelTemplate is not null)
                            {
                                @ItemLabelTemplate(item)
                            }
                            else
                            {
                                var imageSrc = GetImageSrc(item);
                                var imageSize = GetImageSize(item);

                                @if (imageSrc.HasValue())
                                {
                                    <div class="bit-chgi-img-cnt">
                                        <div class="bit-chgi-img-wrp">
                                            <div class="bit-chgi-img" style="@($"width:{imageSize.Width}px; height:{imageSize.Height}px;")">
                                                <img src="@(isChecked ? GetSelectedImageSrc(item) : imageSrc)" alt="@GetImageAlt(item)">
                                            </div>
                                        </div>
                                    </div>
                                }

                                var iconName = GetIconName(item);

                                @if (iconName.HasValue())
                                {
                                    <div class="bit-chgi-ico-cnt">
                                        <div class="bit-chgi-ico-wrp">
                                            <i aria-hidden="true" class="bit-icon bit-icon--@iconName" />
                                        </div>
                                    </div>
                                }

                                @if (imageSrc.HasValue() || iconName.HasValue())
                                {
                                    <div class="bit-chgi-wrp">
                                        <span class="bit-chgi-txt">@GetText(item)</span>
                                    </div>
                                }
                                else
                                {
                                    <span class="bit-chgi-txt">@GetText(item)</span>
                                }
                            }
                        </div>
                    }
                </label>

                <input @attributes="InputHtmlAttributes" @onclick="HandleClick" @onchange="() => HandleChange(new() { Value = GetValue(item) })"
                       hidden
                       type="radio"
                       name="@Name"
                       id="@inputId"
                       checked=@isChecked
                       class="bit-chgi-input"
                       required="@IsRequired"
                       aria-label="@GetAriaLabel(item)"
                       value="@GetValue(item)?.ToString()"
                       disabled="@(GetIsEnabled(item) is false)" />
            </div>
        }
    </div>

</div>