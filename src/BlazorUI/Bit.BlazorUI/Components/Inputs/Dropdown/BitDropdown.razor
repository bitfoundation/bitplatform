@namespace Bit.BlazorUI
@inherits BitInputBase<TValue>
@typeparam TItem
@typeparam TValue

<CascadingValue Value="this" IsFixed="true">
    <div style="display:none" hidden>@(Options ?? ChildContent)</div>
</CascadingValue>

<div @ref="RootElement" @attributes="HtmlAttributes"
     id="@UniqueId"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value"
     aria-owns="@(IsOpen ? _calloutId : null)">

    @if (LabelTemplate is not null)
    {
        <label id="@_labelId">
            @LabelTemplate
        </label>
    }
    else if (Label.HasValue())
    {
        <label class="bit-drp-lbl" id="@_labelId">
            @Label
        </label>
    }

    <div @onclick="HandleOnClick"
         title="@Title"
         role="combobox"
         id="@_dropdownId"
         class="bit-drp-wrp"
         tabindex=@(IsEnabled ? 0 : -1)
         aria-haspopup="listbox"
         aria-required="@IsRequired"
         aria-disabled="@(IsEnabled is false)"
         aria-expanded=@(IsOpen ? "true" : "false")
         aria-labelledby="@GetDropdownAriaLabelledby"
         aria-controls="@(IsOpen ? _calloutId : null)">

        <span class="bit-drp-tcn"
              id="@_dropdownTextContainerId"
              aria-live="polite"
              aria-atomic="true"
              aria-invalid="false">

            @if (_text.HasValue())
            {
                @if (TextTemplate is not null)
                {
                    @TextTemplate(this)
                }
                else
                {
                    @_text
                }
            }
            else
            {
                @if (PlaceholderTemplate is not null)
                {
                    @PlaceholderTemplate(this)
                }
                else
                {
                    @Placeholder
                }
            }
        </span>

        @if (ShowClearButton && SelectedItems.Count > 0 && IsEnabled)
        {
            <button type="button" @onclick:stopPropagation @onclick="Clear" class="bit-drp-icn bit-drp-clr">
                <i class="bit-icon bit-icon--Cancel" />
            </button>
        }

        <span class="bit-drp-icn">
            @if (CaretDownTemplate is not null)
            {
                @CaretDownTemplate
            }
            else
            {
                <i class="bit-icon bit-icon--@CaretDownIconName" aria-hidden="true" />
            }
        </span>
    </div>

    <div @onclick="CloseCallout"
         style="display:@(IsOpen ? "block" : "none");"
         class="bit-drp-ovl"></div>

    <div class="bit-drp-cal" id="@_calloutId" tabindex="0" role="listbox" aria-labelledby="@_labelId">
        @if (IsResponsive)
        {
            <div class="bit-drp-rlc">
                @if (LabelTemplate is not null)
                {
                    @LabelTemplate
                }
                else if (Label.HasValue())
                {
                    <label class="bit-drp-lbl">@Label</label>
                }

                <button @onclick="CloseCallout"
                        class="bit-drp-cls"
                        type="button"
                        aria-label="Close"
                        aria-describedby="Close"
                        aria-hidden="Close"
                        title="Close">
                    <span>
                        <i class="bit-icon bit-icon--Cancel" />
                    </span>
                </button>
            </div>
        }

        @if (ShowSearchBox)
        {
            <div class="@GetSearchBoxClasses()">
                <div class="bit-drp-sic" aria-hidden="true">
                    <i class="bit-icon bit-icon--Search" aria-hidden="true" />
                </div>
                <input @ref="_searchInputRef" @onfocusin="HandleSearchBoxFocusIn" @onfocusout="HandleSearchBoxFocusOut" @oninput="@HandleFilterChange"
                       type="text"
                       role="searchbox"
                       class="bit-drp-sin"
                       value="@_searchText"
                       aria-label="Search text"
                       placeholder="@SearchBoxPlaceholder" />

                @if (_searchText.HasValue())
                {
                    <div class="bit-drp-sbcc">
                        <button @onclick="HandleSearchBoxOnClear"
                                type="button"
                                class="bit-drp-sbc"
                                aria-hidden="true"
                                aria-label="Clear text"
                                disabled="@(_searchText.HasNoValue())">
                            <span>
                                <i class="bit-icon bit-icon--Cancel" aria-hidden="true" />
                            </span>
                        </button>
                    </div>
                }
            </div>
        }

        <div id="@_scrollContainerId" class="bit-drp-scn">
            @if (Virtualize)
            {
                if (ItemsProvider is null)
                {
                    <Virtualize Items="GetSearchedItems()"
                                Context="item"
                                ItemSize="ItemSize"
                                OverscanCount="OverscanCount"
                                Placeholder="VirtualizePlaceholder">
                        <_BitDropdownItem Item="item" Dropdown="this" />
                    </Virtualize>
                }
                else
                {
                    <Virtualize @ref="_virtualizeElement"
                                Context="item"
                                OverscanCount="OverscanCount"
                                Placeholder="VirtualizePlaceholder"
                                ItemsProvider="InternalItemsProvider">
                        <_BitDropdownItem Item="item" Dropdown="this" />
                    </Virtualize>
                }
            }
            else
            {
                @foreach (var item in GetSearchedItems())
                {
                    <_BitDropdownItem Item="item" Dropdown="this" />
                }
            }
        </div>

    </div>

    <select @attributes="InputHtmlAttributes" class="bit-input-hidden" multiple>
        @foreach (var item in SelectedItems)
        {
            <option value="@GetValue(item)" selected>@GetText(item)</option>
        }
    </select>
</div>