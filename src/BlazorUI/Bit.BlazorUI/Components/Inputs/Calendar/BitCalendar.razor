@namespace Bit.BlazorUI
@inherits BitInputBase<DateTimeOffset?>

<div @ref="RootElement" @attributes="HtmlAttributes"
     id="@_Id"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value">

    <div style="@Styles?.Container" class="bit-cal-ctn @Classes?.Container" disabled=@(IsEnabled is false)>
        <div class="bit-cal-grp" role="group" aria-label="">
            <div class="bit-cal-sdt"
                 aria-live="polite"
                 aria-atomic="true">
                @(string.Format(SelectedDateAriaAtomic, CurrentValueAsString))
            </div>
            @if (MonthPickerPosition == BitCalendarMonthPickerPosition.Besides || _showMonthPicker is false)
            {
                <div style="@Styles?.DayPickerWrapper" class="bit-cal-dwp @Classes?.DayPickerWrapper">
                    <div style="@Styles?.DayPickerHeader" class="bit-cal-pkh @Classes?.DayPickerHeader">
                        @if (MonthPickerPosition == BitCalendarMonthPickerPosition.Overlay && IsMonthPickerVisible)
                        {
                            <button @onclick="@ToggleMonthPickerOverlay"
                                    tabindex="0"
                                    type="button"
                                    aria-live="polite"
                                    aria-atomic="true"
                                    style="@Styles?.DayPickerMonthWrapper"
                                    class="bit-cal-ptb @Classes?.DayPickerMonthWrapper"
                                    aria-label="@(string.Format(MonthPickerToggleAriaLabel, _monthTitle))">
                                <span style="@Styles?.DayPickerMonthTitle" class="@Classes?.DayPickerMonthTitle" id="@_monthTitleId">@_monthTitle</span>
                            </button>
                        }
                        else
                        {
                            <div style="@Styles?.DayPickerMonthWrapper"
                                 class="bit-cal-pkt @Classes?.DayPickerMonthWrapper"
                                 aria-live="polite"
                                 aria-atomic="true"
                                 tabindex="-1">
                                <span style="@Styles?.DayPickerMonthTitle" class="@Classes?.DayPickerMonthTitle" id="@_monthTitleId">@_monthTitle</span>
                            </div>
                        }
                        <div style="@Styles?.DayPickerNavContainer" class="bit-cal-nbc @Classes?.DayPickerNavContainer">
                            <button @onclick="() => HandleMonthChange(false)"
                                    type="button"
                                    style="@Styles?.PrevMonthNavButton"
                                    class="bit-cal-nbt @Classes?.PrevMonthNavButton"
                                    title="@GoToPrevMonthTitle"
                                    disabled="@(CanChangeMonth(false) is false)"
                                    aria-disabled="@(CanChangeMonth(false) is false)">
                                <i style="@Styles?.PrevMonthNavIcon" class="bit-icon bit-icon--Up @Classes?.PrevMonthNavIcon" aria-hidden="true" />
                            </button>
                            @if ((MonthPickerPosition == BitCalendarMonthPickerPosition.Overlay || IsMonthPickerVisible is false) && ShowGoToToday)
                            {
                                <button @onclick="HandleGoToToday"
                                        type="button"
                                        style="@Styles?.GotoTodayButton"
                                        class="bit-cal-gtb @Classes?.GotoTodayButton"
                                        title="@GoToTodayTitle"
                                        disabled="@IsGoToTodayButtonDisabled()">
                                    <i style="@Styles?.GotoTodayIcon" class="bit-icon bit-icon--GotoToday @Classes?.GotoTodayIcon" aria-hidden="true" />
                                </button>
                            }
                            <button @onclick="() => HandleMonthChange(true)"
                                    type="button"
                                    style="@Styles?.NextMonthNavButton"
                                    class="bit-cal-nbt @Classes?.NextMonthNavButton"
                                    title="@GoToNextMonthTitle"
                                    disabled="@(CanChangeMonth(true) is false)"
                                    aria-disabled="@(CanChangeMonth(true) is false)">
                                <i style="@Styles?.NextMonthNavIcon" class="bit-icon bit-icon--Down @Classes?.NextMonthNavIcon" aria-hidden="true" />
                            </button>
                        </div>
                    </div>
                    <table role="grid"
                           class="bit-cal-dgd"
                           aria-readonly="true"
                           aria-multiselectable="false"
                           aria-labelledby="@_monthTitleId"
                           aria-activedescendant="@_activeDescendantId">
                        <tbody>
                            <tr class="bit-cal-dgh">
                                @if (ShowWeekNumbers)
                                {
                                    <th style="@Styles?.DayOfWeekName" class="bit-cal-wlb @Classes?.DayOfWeekName"></th>
                                }

                                @for (var index = 0; index < 7; index++)
                                {
                                    var dayOfWeekName = Culture.DateTimeFormat.GetShortestDayName(GetDayOfWeek(index));
                                    <th style="@Styles?.DayOfWeekName" class="bit-cal-wlb @Classes?.DayOfWeekName" scope="col" title="@dayOfWeekName">@dayOfWeekName[0]</th>
                                }
                            </tr>
                            @for (var week = 0; week < 6; week++)
                            {
                                //to ignore the last empty week of the month || to ignore the first whole week of the month
                                if (_daysOfCurrentMonth[week, 0] == 0 || (week == 0 && _daysOfCurrentMonth[week, 6] > 20)) continue;

                                <tr class="bit-cal-dgr">
                                    @if (ShowWeekNumbers)
                                    {
                                        var weekNumber = GetWeekNumber(week);
                                        <th style="@Styles?.WeekNumber"
                                            class="bit-cal-wnm @Classes?.WeekNumber"
                                            title="@(string.Format(WeekNumberTitle, weekNumber)))"
                                            aria-label="@(string.Format(WeekNumberTitle, weekNumber))"
                                            scope="row">
                                            <span>@weekNumber</span>
                                        </th>
                                    }

                                    @for (var day = 0; day < 7; day++)
                                    {
                                        var w = week;
                                        var d = day;
                                        var disabled = IsWeekDayOutOfMinAndMaxDate(d, w);
                                        <td style="@Styles?.DayCell" class="bit-cal-dcl@(GetDateCellCssClass(d, w)) @Classes?.DayCell" role="presentation">
                                            <button @onclick="() => SelectDate(d, w)"
                                                    type="button"
                                                    role="gridcell"
                                                    style="@Styles?.DayButton"
                                                    class="bit-cal-dbt@(GetDateButtonCssClass(d, w)) @Classes?.DayButton"
                                                    aria-readonly="true"
                                                    disabled="@disabled"
                                                    aria-disabled="@disabled"
                                                    tabindex="@(week == _selectedDateWeek && day == _selectedDateDayOfWeek ? 0 : -1)"
                                                    aria-selected="@(week == _selectedDateWeek && day == _selectedDateDayOfWeek ? "true" : "false")">
                                                @if (DayCellTemplate is not null)
                                                {
                                                    @DayCellTemplate(GetDateTimeOfDayCell(d, w))
                                                }
                                                else
                                                {
                                                    <span style="@Styles?.DayText" class="bit-cal-dtx @Classes?.DayText" aria-hidden="true">@_daysOfCurrentMonth[w, d]</span>
                                                }
                                            </button>
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>

                    @if (ShowTimePicker)
                    {
                        <div class="bit-cal-tgp">
                            <div style="@Styles?.TimePickerContainer" class="bit-cal-twp @Classes?.TimePickerContainer">
                                <input @ref="_inputTimeHourRef"
                                       @bind="@_timeHour"
                                       @bind:event="oninput"
                                       @onfocus="HandleOnTimeHourFocus"
                                       min="0"
                                       max="23"
                                       type="number"
                                       inputmode="numeric"
                                       style="@Styles?.TimePickerHourInput"
                                       class="bit-cal-tin @Classes?.TimePickerHourInput"
                                       autocomplete="@BitAutoCompleteValue.NewPassword" />
                                <span class="bit-cal-tdv">:</span>
                                <input @ref="_inputTimeMinuteRef"
                                       @bind="@_timeMinute"
                                       @bind:event="oninput"
                                       @onfocus="HandleOnTimeMinuteFocus"
                                       min="0"
                                       max="59"
                                       type="number"
                                       inputmode="numeric"
                                       style="@Styles?.TimePickerMinuteInput"
                                       class="bit-cal-tin @Classes?.TimePickerMinuteInput"
                                       autocomplete="@BitAutoCompleteValue.NewPassword" />
                            </div>
                        </div>
                    }
                </div>
            }

            @if (IsMonthPickerVisible && (MonthPickerPosition == BitCalendarMonthPickerPosition.Besides || _showMonthPicker))
            {
                @if (MonthPickerPosition == BitCalendarMonthPickerPosition.Besides)
                {
                    <div style="@Styles?.Divider" class="bit-cal-dvd @Classes?.Divider"></div>
                }

                <div style="@Styles?.MonthPicker" class="bit-cal-mwp @Classes?.MonthPicker">
                    @if (_showYearPicker is false)
                    {
                        var prevDisabled = CanChangeYear(false) is false;
                        var nextDisabled = CanChangeYear(true) is false;
                        <div style="@Styles?.MonthPickerHeader" class="bit-cal-pkh @Classes?.MonthPickerHeader">
                            <button @onclick="ToggleBetweenMonthAndYearPicker"
                                    tabindex="0"
                                    type="button"
                                    aria-atomic="true"
                                    aria-live="polite"
                                    style="@Styles?.YearPickerToggleButton"
                                    class="bit-cal-ptb @Classes?.YearPickerToggleButton"
                                    aria-label="@(string.Format(YearPickerToggleAriaLabel, _displayYear))">
                                @_displayYear
                            </button>
                            <div style="@Styles?.MonthPickerNavContainer" class="bit-cal-nbc @Classes?.MonthPickerNavContainer">
                                <button @onclick="() => HandleYearChange(false)"
                                        type="button"
                                        style="@Styles?.PrevYearNavButton"
                                        class="bit-cal-nbt @Classes?.PrevYearNavButton"
                                        title="@(string.Format(GoToPrevYearTitle, _displayYear - 1))"
                                        disabled="@prevDisabled"
                                        aria-disabled="@prevDisabled">
                                    <i style="@Styles?.PrevYearNavIcon" class="bit-icon bit-icon--Up @Classes?.PrevYearNavIcon" aria-hidden="true" />
                                </button>
                                @if (ShowGoToToday)
                                {
                                    <button @onclick="HandleGoToToday"
                                            type="button"
                                            style="@Styles?.GotoTodayButton"
                                            class="bit-cal-gtb @Classes?.GotoTodayButton"
                                            title="@GoToTodayTitle"
                                            disabled="@IsGoToTodayButtonDisabled()">
                                        <i style="@Styles?.GotoTodayIcon" class="bit-icon bit-icon--GotoToday @Classes?.GotoTodayIcon" aria-hidden="true" />
                                    </button>
                                }
                                <button @onclick="() => HandleYearChange(true)"
                                        type="button"
                                        style="@Styles?.NextYearNavButton"
                                        class="bit-cal-nbt @Classes?.NextYearNavButton"
                                        title="@(string.Format(GoToNextYearTitle, _displayYear + 1))"
                                        aria-disabled="@nextDisabled"
                                        disabled="@nextDisabled">
                                    <i style="@Styles?.NextYearNavIcon" class="bit-icon bit-icon--Down @Classes?.NextYearNavIcon" aria-hidden="true" />
                                </button>
                            </div>
                        </div>
                        <div style="@Styles?.MonthsContainer" class="bit-cal-pkc @Classes?.MonthsContainer" role="grid" aria-label="@_displayYear">
                            @for (var rowIndex = 0; rowIndex <= 2; rowIndex++)
                            {
                                <div style="@Styles?.MonthRow" class="bit-cal-pkr @Classes?.MonthRow" role="row">
                                    @for (var cellIndex = 1; cellIndex <= 4; cellIndex++)
                                    {
                                        var month = (rowIndex * 4) + cellIndex;
                                        var monthName = Culture.DateTimeFormat.GetMonthName(month);
                                        var disabled = IsMonthOutOfMinAndMaxDate(month);
                                        var selected = month == _currentMonth;
                                        <button @onclick="() => SelectMonth(month)"
                                                type="button"
                                                role="gridcell"
                                                title="@monthName"
                                                aria-readonly="true"
                                                aria-label="@monthName"
                                                style="@Styles?.MonthButton"
                                                class="bit-cal-pkb@(GetMonthCellCssClass(month)) @Classes?.MonthButton"
                                                disabled="@disabled"
                                                tabindex="@(selected ? 0 : -1)"
                                                aria-disabled="@disabled"
                                                aria-selected="@(selected ? "true" : "false")">
                                            @if (MonthCellTemplate is not null)
                                            {
                                                @MonthCellTemplate(GetDateTimeOfMonthCell(month))
                                            }
                                            else
                                            {
                                                <span style="@Styles?.MonthText" class="@Classes?.MonthText" aria-hidden="true">@Culture.DateTimeFormat.GetAbbreviatedMonthName(month)</span>
                                            }
                                        </button>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        var prevDisabled = CanChangeYearRange(false) is false;
                        var nextDisabled = CanChangeYearRange(true) is false;
                        <div style="@Styles?.YearRangePickerHeader" class="bit-cal-pkh @Classes?.YearRangePickerHeader">
                            <button @onclick="ToggleBetweenMonthAndYearPicker"
                                    type="button"
                                    aria-atomic="true"
                                    aria-live="polite"
                                    style="@Styles?.YearRangePickerToggle"
                                    class="bit-cal-ptb @Classes?.YearRangePickerToggle"
                                    aria-label="@(string.Format(YearRangePickerToggleAriaLabel, _yearPickerStartYear, _yearPickerEndYear))">
                                @_yearPickerStartYear - @_yearPickerEndYear
                            </button>
                            <div style="@Styles?.YearRangePickerNavContainer" class="bit-cal-nbc @Classes?.YearRangePickerNavContainer">
                                <button @onclick="() => HandleYearRangeChange(false)"
                                        type="button"
                                        style="@Styles?.PrevYearRangeNavButton"
                                        class="bit-cal-nbt @Classes?.PrevYearRangeNavButton"
                                        disabled="@prevDisabled"
                                        aria-disabled="@prevDisabled"
                                        title="@(string.Format(GoToPreviousYearRangeTitle, _yearPickerStartYear - 12, _yearPickerStartYear - 1))">
                                    <i style="@Styles?.PrevYearRangeNavIcon" class="bit-icon bit-icon--Up @Classes?.PrevYearRangeNavIcon" aria-hidden="true" />
                                </button>
                                @if (ShowGoToToday)
                                {
                                    <button @onclick="HandleGoToToday"
                                            type="button"
                                            style="@Styles?.GotoTodayButton"
                                            class="bit-cal-gtb @Classes?.GotoTodayButton"
                                            title="@GoToTodayTitle"
                                            disabled="@IsGoToTodayButtonDisabled()">
                                        <i style="@Styles?.GotoTodayIcon" class="bit-icon bit-icon--GotoToday @Classes?.GotoTodayIcon" aria-hidden="true" />
                                    </button>
                                }
                                <button @onclick="() => HandleYearRangeChange(true)"
                                        type="button"
                                        style="@Styles?.NextYearRangeNavButton"
                                        class="bit-cal-nbt @Classes?.NextYearRangeNavButton"
                                        disabled="@nextDisabled"
                                        aria-disabled="@nextDisabled"
                                        title="@(string.Format(GoToNextYearRangeTitle, _yearPickerStartYear + 12, _yearPickerEndYear + 12))">
                                    <i style="@Styles?.NextYearRangeNavIcon" class="bit-icon bit-icon--Down @Classes?.NextYearRangeNavIcon" aria-hidden="true" />
                                </button>
                            </div>
                        </div>
                        <div style="@Styles?.YearsContainer" class="bit-cal-pkc @Classes?.YearsContainer" role="grid" aria-label="@_yearPickerStartYear - @_yearPickerEndYear">
                            @for (var rowIndex = 0; rowIndex <= 2; rowIndex++)
                            {
                                <div style="@Styles?.YearRow" class="bit-cal-pkr @Classes?.YearRow" role="row">
                                    @for (var cellIndex = 0; cellIndex <= 3; cellIndex++)
                                    {
                                        var year = _yearPickerStartYear + (rowIndex * 4) + cellIndex;
                                        var disabled = IsYearOutOfMinAndMaxDate(year);
                                        var selected = year == _currentYear;
                                        <button @onclick="() => SelectYear(year)"
                                                type="button"
                                                role="gridcell"
                                                style="@Styles?.YearButton"
                                                class="bit-cal-pkb @Classes?.YearButton"
                                                aria-readonly="true"
                                                disabled="@disabled"
                                                tabindex="@(selected ? 0 : -1)"
                                                aria-disabled="@disabled"
                                                aria-selected="@(selected ? "true" : "false")">
                                            @if (YearCellTemplate is not null)
                                            {
                                                @YearCellTemplate(year)
                                            }
                                            else
                                            {
                                                <span style="@Styles?.YearText" class="@Classes?.YearText" aria-hidden="true">@year</span>
                                            }
                                        </button>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>