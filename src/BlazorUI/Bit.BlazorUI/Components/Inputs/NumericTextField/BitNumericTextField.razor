@namespace Bit.BlazorUI
@inherits BitInputBase<TValue>
@typeparam TValue

<div @ref="RootElement" @attributes="HtmlAttributes"
     id="@_Id"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value">
    @if (IconName.HasValue() || Label.HasValue() || LabelTemplate is not null)
    {
        <div style="@Styles?.LabelContainer" class="bit-ntf-lct @Classes?.LabelContainer">
            @if (IconName.HasValue())
            {
                <i style="@Styles?.Icon"
                   class="bit-ntf-lic bit-icon bit-icon--@IconName @Classes?.Icon"
                   aria-hidden="true"
                   role="@GetIconRole"
                   aria-label="@IconAriaLabel" />
            }

            @if (LabelTemplate is not null)
            {
                <label id="@GetLabelId" for="@_inputId">
                    @LabelTemplate
                </label>
            }
            else if (Label.HasValue())
            {
                <label style="@Styles?.Label"
                       class="bit-ntf-lbl @Classes?.Label"
                       id="@GetLabelId"
                       for="@_inputId">
                    @Label
                </label>
            }
        </div>
    }

    <div style="@Styles?.InputWrapper"
         class="bit-ntf-wrp @Classes?.InputWrapper"
         title="@Title"
         aria-label="@AriaLabel"
         aria-setsize="@AriaSetSize"
         aria-posinset="@AriaPositionInSet">
        @if (PrefixTemplate is not null)
        {
            @PrefixTemplate
        }
        else if (Prefix.HasValue())
        {
            <div style="@Styles?.PrefixContainer" class="bit-ntf-pre @Classes?.PrefixContainer">
                <span style="@Styles?.Prefix" class="@Classes?.Prefix">
                    @Prefix
                </span>
            </div>
        }

        <input @ref="@_inputRef"
               @attributes="@InputHtmlAttributes"
               @onblur="e => HandleOnBlur(e)"
               @onfocus="e => HandleOnFocus(e)"
               @oninput="e => HandleOnChange(e)"
               @onchange="e => HandleOnChange(e)"
               @onkeydown="e => HandleOnKeyDown(e)"
               @onfocusin="e => HandleOnFocusIn(e)"
               @onfocusout="e => HandleOnFocusOut(e)"
               style="@Styles?.Input"
               class="bit-ntf-inp @Classes?.Input"
               type="text"
               id="@_inputId"
               autocomplete="off"
               aria-valuemin="@Min"
               aria-valuemax="@Max"
               placeholder="@Placeholder"
               value="@_intermediateValue"
               aria-labelledby="@GetLabelId"
               disabled="@(IsEnabled is false)"
               aria-valuenow="@GetAriaValueNow"
               aria-valuetext="@GetAriaValueText"
               aria-describedby="@AriaDescription"
               aria-disabled="@(IsEnabled is false)" />
        @if (ShowButtons)
        {
            <span style="@Styles?.ButtonsContainer" class="bit-ntf-act @Classes?.ButtonsContainer">
                <button @ref="_buttonIncrement"
                        @onpointerup="HandleOnPointerUpOrOut"
                        @onpointerout="HandleOnPointerUpOrOut"
                        @onpointerdown="e => HandleOnPointerDown(BitNumericTextFieldAction.Increment, e)"
                        type="button"
                        tabindex="-1"
                        date-is-focusable="false"
                        style="@Styles?.IncrementButton"
                        class="bit-ntf-aup @Classes?.IncrementButton"
                        aria-label="@IncrementAriaLabel"
                        disabled="@(IsEnabled is false)"
                        aria-disabled="@(IsEnabled is false)">
                    <span style="@Styles?.IncrementIconContainer" class="bit-ntf-aic @Classes?.IncrementIconContainer">
                        <i style="@Styles?.IncrementIcon"
                           class="bit-ntf-bic bit-icon bit-icon--@IncrementIconName @Classes?.IncrementIcon" />
                    </span>
                </button>

                <button @ref="_buttonDecrement"
                        @onpointerup="HandleOnPointerUpOrOut"
                        @onpointerout="HandleOnPointerUpOrOut"
                        @onpointerdown="e => HandleOnPointerDown(BitNumericTextFieldAction.Decrement, e)"
                        type="button"
                        tabindex="-1"
                        date-is-focusable="false"
                        style="@Styles?.DecrementButton"
                        class="bit-ntf-adn @Classes?.DecrementButton"
                        disabled="@(IsEnabled is false)"
                        aria-label="@DecrementAriaLabel"
                        aria-disabled="@(IsEnabled is false)">
                    <span style="@Styles?.DecrementIconContainer" class="bit-ntf-aic @Classes?.DecrementIconContainer">
                        <i style="@Styles?.DecrementIcon"
                           class="bit-ntf-bic bit-icon bit-icon--@DecrementIconName @Classes?.DecrementIcon" />
                    </span>
                </button>
            </span>
        }

        @if (SuffixTemplate is not null)
        {
            @SuffixTemplate
        }
        else if (Suffix.HasValue())
        {
            <div style="@Styles?.SuffixContainer" class="bit-ntf-suf @Classes?.SuffixContainer">
                <span style="@Styles?.Suffix" class="@Classes?.Suffix">
                    @Suffix
                </span>
            </div>
        }
    </div>
</div>