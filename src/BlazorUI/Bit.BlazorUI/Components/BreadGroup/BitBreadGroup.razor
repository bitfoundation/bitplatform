@namespace Bit.BlazorUI
@inherits BitComponentBase

<div @ref="RootElement"
     @attributes="HtmlAttributes"
     id="@UniqueId"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value"
     aria-label="@AriaLabel">

    <CascadingValue Value="this" IsFixed="true">
        @ChildContent
    </CascadingValue>

    <div class="options-wrapper" id="@_wrapperId">
        <ul>
            @foreach (var option in _displayOptions)
            {
                <li @ref="option.RootElement"
                    @attributes="option.HtmlAttributes"
                    id="@option.UniqueId"
                    style="@option._styleBuilder.Value"
                    class="@option._classBuilder.Value"
                    aria-label="@option.AriaLabel">

                    @if (IsOverfelowButton(option))
                    {
                        <button type="button"
                                class="overflow-btn"
                                aria-label="@OverflowAriaLabel"
                                id="@_overflowDropDownId"
                                @onclick="HandleCallout">
                            <span class="overflow-icon-container">
                                <i class="@($"bit-icon bit-icon--{OverflowIcon.GetName()}")"></i>
                            </span>
                        </button>
                    }
                    else
                    {
                        if (option.Href.HasValue())
                        {
                            <a href="@option.Href"
                               aria-current="@(IsSelectedOption(option) ? "page" : null)"
                               style="@GetOptionStyles(option)"
                               class="@GetOptionClasses(option)">
                                @option.Text
                            </a>
                        }
                        else
                        {
                            <button aria-current="@(IsSelectedOption(option) ? "page" : null)"
                                    style="@GetOptionStyles(option)"
                                    class="@GetOptionClasses(option)"
                                    @onclick="(e) => HandleOnOverflowOptionClick(e, option)">
                                @option.Text
                            </button>
                        }
                    }
                </li>

                @if (HasDividerIconOption(option))
                {
                    <i class="@($"bit-icon bit-icon--{DividerIcon.GetName()}")"></i>
                }
            }
        </ul>
    </div>

    <div class="overlay" id="@_overlayId" @onclick="HandleCallout"></div>

    <div class="overflow-menu-wrapper"
         id="@_calloutId"
         tabindex="0"
         role="listbox">
        <ul>
            @foreach (var option in _overflowOptions)
            {
                <li @ref="option.RootElement"
                    @attributes="option.HtmlAttributes"
                    id="@option.UniqueId"
                    style="@option._styleBuilder.Value"
                    class="@option._classBuilder.Value"
                    aria-label="@option.AriaLabel">

                    @if (option.Href.HasValue())
                    {
                        <a href="@option.Href"
                           aria-current="@(IsSelectedOption(option) ? "page" : null)"
                           style="@GetOptionStyles(option)"
                           class="@GetOptionClasses(option)">
                            @option.Text
                        </a>
                    }
                    else
                    {
                        <button aria-current="@(IsSelectedOption(option) ? "page" : null)"
                                style="@GetOptionStyles(option)"
                                class="@GetOptionClasses(option)"
                                @onclick="(e) => HandleOnOverflowOptionClick(e, option)">
                            @option.Text
                        </button>
                    }
                </li>
            }
        </ul>
    </div>
</div>