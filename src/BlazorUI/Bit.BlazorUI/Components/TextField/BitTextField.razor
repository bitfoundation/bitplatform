@namespace Bit.BlazorUI
@inherits BitInputBase<string?>

<div @ref="RootElement"
     @attributes="HtmlAttributes"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value">
    <div class="bit-txt-wrp">
        @if (LabelTemplate is not null)
        {
            <label style="@LabelStyle" class="bit-txt-lbl @LabelClass" id="@_labelId" for="@_textFieldId">
                @LabelTemplate
            </label>
        }
        else if (Label.HasValue())
        {
            <label style="@LabelStyle" class="bit-txt-lbl @LabelClass" id="@_labelId" for="@_textFieldId">
                @Label
            </label>
        }

        <div class="bit-txt-fgp">
            @if (PrefixTemplate is not null)
            {
                <span>
                    @PrefixTemplate
                </span>
            }
            else if (Prefix.HasValue())
            {
                <div style="@PrefixStyle" class="bit-txt-txp @PrefixClass">
                    <span>@Prefix</span>
                </div>
            }

            @if (IsMultiline && Type == BitTextFieldType.Text)
            {
                <textarea @attributes="InputHtmlAttributes"
                          id="@_textFieldId"
                          style="@InputStyle"
                          class="bit-txt-txf @InputClass"
                          rows="@Rows"
                          disabled=@(IsEnabled is false)
                          readonly=@IsReadonly
                          required=@IsRequired
                          placeholder="@Placeholder"
                          maxlength="@MaxLength"
                          aria-label="@AriaLabel"
                          aria-labelledby="@(Label.HasValue() || LabelTemplate is not null ? _labelId : null)"
                          aria-describedby="@(Description.HasValue() || DescriptionTemplate is not null ? _descriptionId : null)"
                          @onclick="@HandleOnClick"
                          @onfocusin="@HandleOnFocusIn"
                          @onfocusout="@HandleOnFocusOut"
                          @onfocus="@HandleOnFocus"
                          @oninput="@HandleOnChange"
                          @onchange="@HandleOnChange"
                          @onkeydown="@HandleOnKeyDown"
                          @onkeyup="@HandleOnKeyUp">
                    @CurrentValue
                 </textarea>
            }
            else
            {
                <input id="@_textFieldId"
                       @attributes="InputHtmlAttributes"
                       style="@InputStyle"
                       class="bit-txt-txf @InputClass"
                       disabled=@(IsEnabled is false)
                       readonly=@IsReadonly
                       required=@IsRequired
                       type="@_inputType"
                       value="@CurrentValue"
                       placeholder="@Placeholder"
                       maxlength="@MaxLength"
                       aria-label="@AriaLabel"
                       aria-labelledby="@(Label.HasValue() || LabelTemplate is not null ? _labelId : null)"
                       aria-describedby="@(Description.HasValue() || DescriptionTemplate is not null ? _descriptionId : null)"
                       autocomplete="@AutoComplete"
                       @onclick="@HandleOnClick"
                       @onfocusin="@HandleOnFocusIn"
                       @onfocusout="@HandleOnFocusOut"
                       @onfocus="@HandleOnFocus"
                       @oninput="@HandleOnChange"
                       @onchange="@HandleOnChange"
                       @onkeydown="@HandleOnKeyDown"
                       @onkeyup="@HandleOnKeyUp" />
            }

            @if (CanRevealPassword && Type == BitTextFieldType.Password)
            {
                <button style="@RevealPasswordStyle"
                        class="bit-txt-prb @RevealPasswordClass"
                        type="button"
                        @onclick="ToggleRevealPassword"
                        aria-label="@RevealPasswordAriaLabel"
                        aria-pressed="@(_elementType == BitTextFieldType.Text ? "true" : "false")">
                    <span>
                        <i class="bit-icon bit-icon--@(_elementType == BitTextFieldType.Text ? "Hide" : "RedEye")" aria-hidden="true" />
                    </span>
                </button>
            }

            @if (IconName.HasValue)
            {
                <i class="bit-icon bit-icon--@IconName.GetName()" aria-hidden="true"></i>
            }

            @if (SuffixTemplate is not null)
            {
                <span>
                    @SuffixTemplate
                </span>
            }
            else if (Suffix.HasValue())
            {
                <div style="@SuffixStyle" class="bit-txt-txs @SuffixClass">
                    <span>@Suffix</span>
                </div>
            }

        </div>
    </div>
    @if (Description.HasValue() || DescriptionTemplate is not null)
    {
        <span class="bit-txt-txd" id="@_descriptionId">
            @if (DescriptionTemplate is not null)
            {
                <span>
                    @DescriptionTemplate
                </span>
            }
            else if (Description.HasValue())
            {
                <span style="@DescriptionStyle" class="@DescriptionClass">@Description</span>
            }
        </span>
    }
</div>