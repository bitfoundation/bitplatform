@namespace Bit.BlazorUI
@typeparam TItem

<li role="listitem">
    @if (Nav.RenderType is BitNavRenderType.Grouped && Parent is null)
    {
        <button @onclick="ToggleItem"
                class="group-chevron-btn"
                type="button"
                tabindex="0"
                aria-label="@(Nav.GetIsEnabled(Item) ? Nav.GetCollapseAriaLabel(Item) : Nav.GetExpandAriaLabel(Item))"
                aria-expanded="@(Nav.GetItemExpanded(Item) ? "true" : "false")">
            @if (Nav.HeaderTemplate is not null)
            {
                @Nav.HeaderTemplate(Item)
            }
            else
            {
                <i class="bit-icon bit-icon--ChevronDown @(Nav.GetItemExpanded(Item) ? "expand" : "")" aria-hidden="true"></i>
                <span class="group-header">@Nav.GetText(Item)</span>
            }
        </button>
    }
    else
    {
        <div style="padding: 0 10px 0 @(Nav.GetChildItems(Item).Any() ? (Depth * 14) : (Depth * 14) + 30)px;@GetItemContainerStyles()"
             class="item-container @GetItemContainerClasses()"
             name="@Nav.GetText(Item)">

            @if (Nav.GetChildItems(Item).Any())
            {
                <button @onclick="ToggleItem"
                        style="@Nav.ClassStyles?.ToggleButton?.Style"
                        class="chevron-btn @Nav.ClassStyles?.ToggleButton?.Class"
                        type="button"
                        tabindex="0"
                        aria-label="@(Nav.GetItemExpanded(Item) ? Nav.GetCollapseAriaLabel(Item) : Nav.GetExpandAriaLabel(Item))"
                        aria-expanded="@(Nav.GetItemExpanded(Item) ? "true" : "false")">
                    <i class="bit-icon bit-icon--ChevronDown @(Nav.GetItemExpanded(Item) ? "expand" : "")" aria-hidden="true"></i>
                </button>
            }

            @if (Nav.GetUrl(Item).HasValue() || Nav.GetForceAnchor(Item))
            {
                <a @onclick="HandleOnClick"
                   href="@(Nav.GetIsEnabled(Item) ? Nav.GetUrl(Item) : null)"
                   target="@Nav.GetTarget(Item)"
                   style="@GetItemStyles()"
                   class="item @GetItemClasses()"
                   tabindex="-1"
                   title="@(Nav.GetTitle(Item) is not null ? Nav.GetTitle(Item) : Nav.GetText(Item))"
                   disabled="@(Nav.GetIsEnabled(Item) is false)"
                   aria-label="@Nav.GetAriaLabel(Item)"
                   aria-current="@(Item == Nav.SelectedItem ? _AriaCurrentMap[Nav.GetAriaCurrent(Item)] : null)"
                   rel="@(Nav.GetUrl(Item).HasValue() && Nav.GetTarget(Item).HasValue() && IsRelativeUrl(Nav.GetUrl(Item)!) is false ? "noopener noreferrer" : null)">

                    @if (Nav.ItemTemplate is not null)
                    {
                        @Nav.ItemTemplate(Item)
                    }
                    else
                    {
                        @if (Nav.GetIconName(Item).HasValue)
                        {
                            <i class=@($"bit-icon bit-icon--{Nav.GetIconName(Item).GetName()} item-icon") aria-hidden="true"></i>
                        }
                        <span>@Nav.GetText(Item)</span>
                    }
                </a>
            }
            else
            {
                <button @onclick="HandleOnClick"
                        style="@GetItemStyles()"
                        class="item @GetItemClasses()"
                        title="@(Nav.GetTitle(Item) is not null ? Nav.GetTitle(Item) : Nav.GetText(Item))"
                        disabled="@(Nav.GetIsEnabled(Item) is false)"
                        aria-label="@Nav.GetAriaLabel(Item)"
                        aria-current="@(Item == Nav.SelectedItem ? _AriaCurrentMap[Nav.GetAriaCurrent(Item)] : null)"
                        tabindex="-1"
                        type="button">

                    @if (Nav.ItemTemplate is not null)
                    {
                        @Nav.ItemTemplate(Item)
                    }
                    else
                    {
                        @if (Nav.GetIconName(Item).HasValue)
                        {
                            <i class=@($"bit-icon bit-icon--{Nav.GetIconName(Item).GetName()} item-icon") aria-hidden="true"></i>
                        }
                        <span>@Nav.GetText(Item)</span>
                    }
                </button>
            }
        </div>
    }

    @if ((Nav.GetChildItems(Item).Any()) && (Nav.GetItemExpanded(Item)))
    {
        <ul role="list">
            <CascadingValue Value="this" IsFixed="true">
                @foreach (var childItem in Nav.GetChildItems(Item))
                {
                    <_BitNavChild @key="Nav.GetKey(childItem)" Item="childItem" Depth="Depth + 1" />
                }
            </CascadingValue>
        </ul>
    }
</li>