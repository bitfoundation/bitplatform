@namespace Bit.BlazorUI
@typeparam TItem

<li role="listitem" style="@Nav.GetStyle(Item)" class="@Nav.GetClass(Item)">
    @{
        var template = Nav.GetTemplate(Item);
        var templateRenderMode = Nav.GetTemplateRenderMode(Item);
        var isEnabled = Nav.GetIsEnabled(Item);
        var isExpanded = Nav.GetItemExpanded(Item);
        var isSeparator = Nav.GetIsSeparator(Item);
        var colAriaLabel = Nav.GetCollapseAriaLabel(Item);
        var expAriaLabel = Nav.GetExpandAriaLabel(Item);
        var text = Nav.GetText(Item);
        var childItems = Nav.GetChildItems(Item);
        var description = Nav.GetDescription(Item);
    }
    @if (Nav.RenderType is BitNavRenderType.Grouped && Parent is null)
    {
        @if (isSeparator)
        {
            if (template is not null)
            {
                @template(Item)
            }
            else
            {
                <div class="bit-nav-sep"></div>
            }
        }
        else if (template is not null && templateRenderMode is BitNavItemTemplateRenderMode.Replace)
        {
            @template(Item)
        }
        else if (Nav.HeaderTemplate is not null && Nav.HeaderTemplateRenderMode is BitNavItemTemplateRenderMode.Replace)
        {
            @Nav.HeaderTemplate(Item)
        }
        else
        {
            <button @onclick="ToggleItem"
                    tabindex="0"
                    type="button"
                    class="bit-nav-gcb"
                    aria-expanded="@(isExpanded ? "true" : "false")"
                    aria-label="@(isEnabled ? colAriaLabel : expAriaLabel)">
                @if (template is not null)
                {
                    @template(Item)
                }
                else if (Nav.HeaderTemplate is not null)
                {
                    @Nav.HeaderTemplate(Item)
                }
                else
                {
                    if (description.HasValue())
                    {
                        <div class="bit-nav-itg">
                            <div class="bit-nav-iit">
                                <i class="bit-icon bit-icon--ChevronDown @(isExpanded ? "bit-nav-exp" : "")" aria-hidden="true" />
                                <span class="bit-nav-ghd">@text</span>
                            </div>
                            <span style="@Nav.Styles?.Description" class="bit-nav-des @Nav.Classes?.Description">
                                @description
                            </span>
                        </div>
                    }
                    else
                    {
                        <i class="bit-icon bit-icon--ChevronDown @(isExpanded ? "bit-nav-exp" : "")" aria-hidden="true" />
                        <span class="bit-nav-ghd">@text</span>
                    }
                }
            </button>
        }
    }
    else
    {
        @if (isSeparator)
        {
            if (template is not null)
            {
                @template(Item)
            }
            else
            {
                <div class="bit-nav-sep"></div>
            }
        }
        else
        {
            <div name="@text"
                 class="bit-nav-ict @GetItemContainerClasses()"
                 style="padding-left:@(childItems.Any() ? (Depth * 14) : (Depth * 14) + 30)px; @GetItemContainerStyles()">

                @if (childItems.Any())
                {
                    <button @onclick="ToggleItem"
                            type="button"
                            tabindex="0"
                            style="@Nav.Styles?.ToggleButton"
                            class="bit-nav-cbt @Nav.Classes?.ToggleButton"
                            aria-expanded="@(isExpanded ? "true" : "false")"
                            aria-label="@(isExpanded ? colAriaLabel : expAriaLabel)">
                        <i class="bit-icon bit-icon--ChevronDown @(isExpanded ? "bit-nav-exp" : "")" aria-hidden="true" />
                    </button>
                }


                @if (template is not null && templateRenderMode is BitNavItemTemplateRenderMode.Replace)
                {
                    @template(Item)
                }
                else if (Nav.ItemTemplate is not null && Nav.ItemTemplateRenderMode is BitNavItemTemplateRenderMode.Replace)
                {
                    @Nav.ItemTemplate(Item)
                }
                else
                {
                    var url = Nav.GetUrl(Item);
                    var title = Nav.GetTitle(Item);
                    @if (url.HasValue() || Nav.GetForceAnchor(Item))
                    {
                        var target = Nav.GetTarget(Item);
                        <a @onclick="HandleOnClick"
                           tabindex="-1"
                           style="@GetItemStyles()"
                           target="@target"
                           aria-label="@Nav.GetAriaLabel(Item)"
                           class="bit-nav-itm @GetItemClasses()"
                           disabled="@(isEnabled is false)"
                           href="@(isEnabled ? url : null)"
                           title="@(title is not null ? title : text)"
                           aria-current="@(Item == Nav.SelectedItem ? _AriaCurrentMap[Nav.GetAriaCurrent(Item)] : null)"
                           rel="@(url.HasValue() && target.HasValue() && IsRelativeUrl(url!) is false ? "noopener noreferrer" : null)">
                            @if (template is not null)
                            {
                                @template(Item)
                            }
                            else if (Nav.ItemTemplate is not null)
                            {
                                @Nav.ItemTemplate(Item)
                            }
                            else
                            {
                                var iconName = Nav.GetIconName(Item);
                                if (description.HasValue())
                                {
                                    <div class="bit-nav-itg">
                                        <div class="bit-nav-iit">
                                            @if (iconName.HasValue())
                                            {
                                                <i style="@Nav.Styles?.ItemIcon" class="bit-nav-iic bit-icon bit-icon--@iconName @Nav.Classes?.ItemIcon" aria-hidden="true" />
                                            }
                                            <span>@text</span>
                                        </div>
                                        <span style="@Nav.Styles?.Description" class="bit-nav-des @(iconName.HasValue() ? "bit-nav-ide" : "") @Nav.Classes?.Description">
                                            @description
                                        </span>
                                    </div>
                                }
                                else
                                {
                                    @if (iconName.HasValue())
                                    {
                                        <i style="@Nav.Styles?.ItemIcon" class="bit-nav-iic bit-icon bit-icon--@iconName @Nav.Classes?.ItemIcon" aria-hidden="true" />
                                    }
                                    <span>@text</span>
                                }
                            }
                        </a>
                    }
                    else
                    {
                        <button @onclick="HandleOnClick"
                                type="button"
                                tabindex="-1"
                                style="@GetItemStyles()"
                                aria-label="@Nav.GetAriaLabel(Item)"
                                class="bit-nav-itm @GetItemClasses()"
                                disabled="@(isEnabled is false)"
                                title="@(title is not null ? title : text)"
                                aria-current="@(Item == Nav.SelectedItem ? _AriaCurrentMap[Nav.GetAriaCurrent(Item)] : null)">
                            @if (template is not null)
                            {
                                @template(Item)
                            }
                            else if (Nav.ItemTemplate is not null)
                            {
                                @Nav.ItemTemplate(Item)
                            }
                            else
                            {
                                var iconName = Nav.GetIconName(Item);
                                if (description.HasValue())
                                {
                                    <div class="bit-nav-itg">
                                        <div class="bit-nav-iit">
                                            @if (iconName.HasValue())
                                            {
                                                <i style="@Nav.Styles?.ItemIcon" class="bit-nav-iic bit-icon bit-icon--@iconName @Nav.Classes?.ItemIcon" aria-hidden="true" />
                                            }
                                            <span>@text</span>
                                        </div>
                                        <span style="@Nav.Styles?.Description" class="bit-nav-des @(iconName.HasValue() ? "bit-nav-ide" : "") @Nav.Classes?.Description">
                                            @description
                                        </span>
                                    </div>
                                }
                                else
                                {
                                    @if (iconName.HasValue())
                                    {
                                        <i style="@Nav.Styles?.ItemIcon" class="bit-nav-iic bit-icon bit-icon--@iconName @Nav.Classes?.ItemIcon" aria-hidden="true" />
                                    }
                                    <span>@text</span>
                                }
                            }
                        </button>
                    }
                }
            </div>
        }
    }

    @if ((childItems.Any()) && (isExpanded))
    {
        <ul role="list">
            <CascadingValue Value="this" IsFixed="true">
                @foreach (var item in childItems)
                {
                    <_BitNavChild @key="Nav.GetItemKey(item)" Item="item" Depth="Depth + 1" />
                }
            </CascadingValue>
        </ul>
    }
</li>