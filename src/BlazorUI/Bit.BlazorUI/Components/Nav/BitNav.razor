@namespace Bit.BlazorUI
@inherits BitComponentBase

<nav @ref="RootElement"
     @attributes="HtmlAttributes"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value"
     role="navigation"
     aria-label="@AriaLabel">
    @if (RenderType == BitNavRenderType.Grouped)
    {
        @foreach (var navLinkItem in Items)
        {
            @if (navLinkItem is not null)
            {
                <div class="nav-group">
                    @if (navLinkItem.Name.HasValue())
                    {

                        <button @onclick="(() => HandleOnItemExpand(navLinkItem))"
                                class="chevron-btn group-chevron-btn"
                                tabindex="0"
                                type="button"
                                aria-label="@(_itemsExpanded[navLinkItem] ? navLinkItem.CollapseAriaLabel : navLinkItem.ExpandAriaLabel)"
                                aria-expanded="@(_itemsExpanded[navLinkItem])">
                            @if (HeaderTemplate is not null)
                            {
                                @HeaderTemplate(navLinkItem)
                            }
                            else
                            {
                                <i class="bit-icon bit-icon--ChevronDown @(_itemsExpanded[navLinkItem] ? "expand" : "")" aria-hidden="true"></i>
                                @navLinkItem.Name
                            }
                        </button>
                    }

                    @if ((navLinkItem.Items?.Any() ?? false) && _itemsExpanded[navLinkItem])
                    {
                        <div class="group-content">
                            <ul class="nav-items" role="list">
                                @foreach (var childNavLinkItem in navLinkItem.Items)
                                {
                                    @childTemplate(childNavLinkItem)
                                }
                            </ul>
                        </div>
                    }
                </div>
            }
        }
    }
    else
    {
        <div class="nav-group">
            <div class="group-content">
                <ul class="nav-items" role="list">
                    @foreach (var navLinkItem in Items)
                    {
                        @childTemplate(navLinkItem)
                    }
                </ul>
            </div>
        </div>
    }
</nav>

@code {
    public RenderFragment<BitNavItem> childTemplate { get; set; } = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        int depth = 0;

        childTemplate = (navLinkItem) =>
        (
            @<li class="nav-item" role="listitem">

                <div class="composite-link @(!navLinkItem.IsEnabled ? "disabled" : "")" name="@navLinkItem.Name">
                    @if (navLinkItem.Items?.Any() ?? false)
                    {
                        <button class="chevron-btn"
                                style="margin-left: @((depth * 14).ToString() + "px");"
                                type="button"
                                tabindex="0"
                                aria-label="@(_itemsExpanded[navLinkItem] ? navLinkItem.CollapseAriaLabel : navLinkItem.ExpandAriaLabel)"
                                aria-expanded="@(_itemsExpanded[navLinkItem] ? "true" : "false")"
                                @onclick="(() => HandleOnItemExpand(navLinkItem))">
                            <i class="bit-icon bit-icon--ChevronDown @(_itemsExpanded[navLinkItem] ? "expand" : "")" aria-hidden="true"></i>
                        </button>
                    }

                    @if (navLinkItem.Url.HasValue() || navLinkItem.ForceAnchor)
                    {
                        <a class="@GetItemClasses(navLinkItem) @(navLinkItem == SelectedItem ? "selected" : "")"
                           style="padding: 0 20px 0 @(((depth * 14) + 27).ToString() + "px"); @navLinkItem.Style;"
                           href="@(navLinkItem.IsEnabled ? navLinkItem.Url : null)"
                           target="@navLinkItem.Target"
                           title="@(navLinkItem.Title is not null ? navLinkItem.Title : navLinkItem.Name)"
                           disabled="@(navLinkItem.IsEnabled is false)"
                           aria-label="@navLinkItem.AriaLabel"
                           aria-current="@(navLinkItem == SelectedItem ? _ariaCurrentMap[navLinkItem.AriaCurrent] : null)"
                           tabindex="-1"
                           rel="@(navLinkItem.Url.HasValue() && navLinkItem.Target.HasValue() && IsRelativeUrl(navLinkItem.Url) is false ? "noopener noreferrer" : null)"
                           @onclick="(() => HandleOnItemClick(navLinkItem))">

                        <div class="link-container">
                            @if (ItemTemplate is not null)
                            {
                                @ItemTemplate(navLinkItem)
                            }
                            else
                            {
                                @if (navLinkItem.IconName.HasValue)
                                {
                                   <i class=@($"bit-icon bit-icon--{navLinkItem.IconName.GetName()}") aria-hidden="true"></i>
                                }
                                <div class="link-txt">@navLinkItem.Name</div>
                            }
                        </div>
                    </a>
                    }
                    else
                    {
                        <button class="@GetItemClasses(navLinkItem) @(navLinkItem == SelectedItem ? "selected" : "")"
                                style="padding: 0 20px 0 @(((depth * 14) + 27).ToString() + "px"); @navLinkItem.Style;"
                                title="@(navLinkItem.Title is not null ? navLinkItem.Title : navLinkItem.Name)"
                                disabled="@(navLinkItem.IsEnabled is false)"
                                aria-label="@navLinkItem.AriaLabel"
                                aria-current="@(navLinkItem == SelectedItem ? _ariaCurrentMap[navLinkItem.AriaCurrent] : null)"
                                tabindex="-1"
                                type="button"
                                @onclick="(() => HandleOnItemClick(navLinkItem))">
                            <div class="link-container">
                                @if (navLinkItem.IconName.HasValue)
                                {
                                    <i class=@($"bit-icon bit-icon--{navLinkItem.IconName.GetName()}") aria-hidden="true"></i>
                                }

                                @if (ItemTemplate is not null)
                                {
                                    @ItemTemplate(navLinkItem)
                                }
                                else
                                {
                                    <div class="link-txt">@navLinkItem.Name</div>
                                }
                            </div>
                        </button>
                    }
                </div>
                @if ((navLinkItem.Items?.Any() ?? false) && _itemsExpanded[navLinkItem])
                {
                    depth++;

                    <ul class="nav-items" role="list">
                        @foreach (var childLinkItem in navLinkItem.Items)
                        {
                            @childTemplate(childLinkItem)
                        }
                    </ul>

                    depth--;
                }
            </li>
        );
    }
}
