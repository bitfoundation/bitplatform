@namespace Bit.BlazorUI
@inherits BitComponentBase

<nav @ref="RootElement"
     @attributes="HtmlAttributes"
     style="@StyleBuilder.Value"
     class="@ClassBuilder.Value"
     role="navigation"
     aria-label="@AriaLabel">
    @if (RenderType == BitNavRenderType.Grouped)
    {
        @foreach (var navLinkItem in NavLinkItems)
        {
            @if (navLinkItem is not null)
            {
                <div class="grp">
                    @*GroupHeader*@
                    @if (navLinkItem.Name.HasValue())
                    {
                        @if (HeaderTemplate is not null)
                        {
                            @HeaderTemplate(navLinkItem)
                        }
                        else
                        {
                            <button class="chevron-btn grp-chevron-btn"
                                    tabindex="0"
                                    type="button"
                                    aria-label="@(navLinkItem.IsExpanded ? navLinkItem.CollapseAriaLabel : navLinkItem.ExpandAriaLabel)"
                                    aria-expanded="@(navLinkItem.IsExpanded ? "true" : "false")"
                                    @onclick="(() => HandleGroupHeaderClick(navLinkItem))">
                                <i class="bit-icon bit-icon--ChevronDown @(navLinkItem.IsExpanded ? "expand-fluent" : "")" aria-hidden="true"></i>
                                @navLinkItem.Name
                            </button>
                        }
                    }

                    @if ((navLinkItem.Links?.Any() ?? false) && navLinkItem.IsExpanded)
                    {
                        <div class="grp-content">
                            <ul class="list" role="list">
                                @foreach (var childNavLinkItem in navLinkItem.Links)
                                {
                                    @childTemplate!(childNavLinkItem)
                                }
                            </ul>
                        </div>
                    }
                </div>
            }
        }
    }
    else
    {
        <div class="grp">
            <div class="grp-content">
                <ul class="list" role="list">
                    @foreach (var navLinkItem in NavLinkItems)
                    {
                        @if (navLinkItem is not null)
                        {
                            @childTemplate!(navLinkItem)
                        }
                    }
                </ul>
            </div>
        </div>
    }
</nav>

@code {
    public RenderFragment<BitNavLinkItem>? childTemplate { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        childTemplate = (navLinkItem) =>
        (
    @<li class="item"
         role="listitem"
         @key="navLinkItem.Key"
         @onclick="(() => HandleClick(navLinkItem))">

        <div class="composite-link @(!navLinkItem.IsEnabled ? "disabled-composite-link" : "")"
             name="@navLinkItem.Name">
            @if (navLinkItem.Links?.Any() ?? false)
            {
                <button class="chevron-btn"
                        style="margin-left: @((navLinkItem.Depth * 14).ToString() + "px");"
                        type="button"
                        tabindex="0"
                        aria-label="@GetExpandButtonAriaLabel(navLinkItem)"
                        aria-expanded="@(navLinkItem.IsExpanded ? "true" : "false")"
                        @onclick="(() => HandleLinkExpand(navLinkItem))">
                    <i class="bit-icon bit-icon--ChevronDown @(navLinkItem.IsExpanded ? "expand-fluent" : "")"
                       aria-hidden="true"></i>
                </button>
            }

            @if (navLinkItem.Url.HasValue() || navLinkItem.ForceAnchor)
            {
                <a class="@GetLinkClass(navLinkItem)"
                   style="padding: 0 20px 0 @(((navLinkItem.Depth * 14) + 27).ToString() + "px"); @navLinkItem.ItemStyle;"
                   href="@(navLinkItem.IsEnabled ? navLinkItem.Url : null)"
                   target="@navLinkItem.Target"
                   title="@(navLinkItem.Title is not null ? navLinkItem.Title : navLinkItem.Name)"
                   disabled="@(navLinkItem.IsEnabled is false)"
                   aria-label="@navLinkItem.AriaLabel"
                   aria-current="@(navLinkItem.Key == SelectedKey ? AriaCurrentMap[navLinkItem.AriaCurrent] : null)"
                   tabindex="-1"
                   rel="@GetNavLinkItemRel(navLinkItem)"
                   @onclick="(()=>HandleLinkClick(navLinkItem))">

                    <span class="link-container">
                        @if (navLinkItem.IconName.HasValue)
                        {
                            <i class=@($"bit-icon bit-icon--{navLinkItem.IconName.GetName()}") aria-hidden="true"></i>
                        }

                        @if (LinkTemplate is not null)
                        {
                            @LinkTemplate(navLinkItem)
                        }
                        else
                        {
                            <div class="link-txt">@navLinkItem.Name</div>
                        }
                    </span>
                </a>
            }
            else
            {
                <button class="@GetLinkClass(navLinkItem)"
                        style="padding: 0 20px 0 @(((navLinkItem.Depth * 14) + 27).ToString() + "px"); @navLinkItem.ItemStyle;"
                        title="@(navLinkItem.Title is not null ? navLinkItem.Title : navLinkItem.Name)"
                        disabled="@(navLinkItem.IsEnabled is false)"
                        aria-label="@navLinkItem.AriaLabel"
                        aria-current="@(navLinkItem.Key == SelectedKey ? AriaCurrentMap[navLinkItem.AriaCurrent] : null)"
                        tabindex="-1"
                        type="button"
                        @onclick="(() => HandleLinkClick(navLinkItem))">
                    <span class="link-container">
                        @if (navLinkItem.IconName.HasValue)
                        {
                            <i class=@($"bit-icon bit-icon--{navLinkItem.IconName.GetName()}") aria-hidden="true"></i>
                        }

                        @if (LinkTemplate is not null)
                        {
                            @LinkTemplate(navLinkItem)
                        }
                        else
                        {
                            <div class="link-txt">@navLinkItem.Name</div>
                        }
                    </span>
                </button>
            }
        </div>
        @if ((navLinkItem.Links?.Any() ?? false) && navLinkItem.IsExpanded)
        {
            <ul class="list"
                role="list">
                @foreach (var childLinkItem in navLinkItem.Links)
                {
                    childLinkItem.Depth = navLinkItem.Depth + 1;
                    if (childTemplate is not null)
                        @childTemplate!(childLinkItem)
                    }
            </ul>
        }
    </li>
    );
    }
}
