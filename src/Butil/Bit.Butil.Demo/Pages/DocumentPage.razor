@page "/document"
@implements IDisposable
@inject Bit.Butil.Console console
@inject Bit.Butil.Document document

<PageTitle>Document Samples</PageTitle>

<h1>Document</h1>

<pre style="font-family:Consolas">
@@inject Bit.Butil.Document document

@@code {
    ...
    await document.AddEventListener(ButilEvents.Click, args => { ... });
    ...
    await document.SetTitle("New shinny title");
    ...
}
</pre>

<br />
<hr />

<h3>Open the DevTools and start clicking</h3>

<hr />
<br />

<button @onclick=AddEventListener>AddEventListener</button>
&nbsp;
<button @onclick=RemoveEventListener>RemoveEventListener</button>
<br />
<div>Is Registered: @isRegistered</div>

<br />
<hr />
<br />

<button @onclick=GetTitle>Document Title</button>
<br />
<br />
<button @onclick=GetUrl>Document URL</button>

@code {
    private bool isRegistered = false;

    private Action<ButilMouseEventArgs> _handler = default!;

    protected override void OnInitialized()
    {
        _handler = (ButilMouseEventArgs arg) => _ = console.Log("Click from C# = X:", arg.ClientX, "Y:", arg.ClientY);

        base.OnInitialized();
    }

    private void AddEventListener()
    {
        _ = document.AddEventListener(ButilEvents.Click, _handler);
        isRegistered = true;
    }

    private void RemoveEventListener()
    {
        _ = document.RemoveEventListener(ButilEvents.Click, _handler);
        isRegistered = false;
    }

    private async Task GetTitle()
    {
        await console.Log("document.title =", await document.GetTitle());
    }

    private async Task GetUrl()
    {
        await console.Log("document.URL =", await document.GetUrl());
    }

    public void Dispose()
    {
        if (isRegistered)
        {
            _ = document.RemoveEventListener(ButilEvents.Click, _handler);
        }
    }
}