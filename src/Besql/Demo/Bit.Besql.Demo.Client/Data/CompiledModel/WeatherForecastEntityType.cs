// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using Bit.Besql.Demo.Client.Model;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Bit.Besql.Demo.Client.Data
{
    [EntityFrameworkInternal]
    public partial class WeatherForecastEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Bit.Besql.Demo.Client.Model.WeatherForecast",
                typeof(WeatherForecast),
                baseEntityType,
                propertyCount: 4,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(WeatherForecast).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WeatherForecast).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetGetter(
                (WeatherForecast entity) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Id(entity),
                (WeatherForecast entity) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Id(entity) == 0,
                (WeatherForecast instance) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Id(instance),
                (WeatherForecast instance) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Id(instance) == 0);
            id.SetSetter(
                (WeatherForecast entity, int value) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Id(entity) = value);
            id.SetMaterializationSetter(
                (WeatherForecast entity, int value) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Id(entity) = value);
            id.SetAccessors(
                (InternalEntityEntry entry) => entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<int>(0) : entry.FlaggedAsTemporary(0) && UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Id((WeatherForecast)entry.Entity) == 0 ? entry.ReadTemporaryValue<int>(0) : UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Id((WeatherForecast)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Id((WeatherForecast)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 0),
                (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 0),
                (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));
            id.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("WeatherForecastEntityType.UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Id", "Bit.Besql.Demo.Client.Data") });

            var date = runtimeEntityType.AddProperty(
                "Date",
                typeof(DateTimeOffset),
                propertyInfo: typeof(WeatherForecast).GetProperty("Date", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WeatherForecast).GetField("<Date>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeOffsetToBinaryConverter());
            date.SetGetter(
                (WeatherForecast entity) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Date(entity),
                (WeatherForecast entity) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Date(entity).EqualsExact(default(DateTimeOffset)),
                (WeatherForecast instance) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Date(instance),
                (WeatherForecast instance) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Date(instance).EqualsExact(default(DateTimeOffset)));
            date.SetSetter(
                (WeatherForecast entity, DateTimeOffset value) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Date(entity) = value);
            date.SetMaterializationSetter(
                (WeatherForecast entity, DateTimeOffset value) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Date(entity) = value);
            date.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Date((WeatherForecast)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Date((WeatherForecast)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(date, 1),
                (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(date),
                (ValueBuffer valueBuffer) => valueBuffer[1]);
            date.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            date.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => v.GetHashCode(),
                    (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => v.GetHashCode(),
                    (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"),
                converter: new ValueConverter<DateTimeOffset, long>(
                    (DateTimeOffset v) => DateTimeOffsetToBinaryConverter.ToLong(v),
                    (long v) => DateTimeOffsetToBinaryConverter.ToDateTimeOffset(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DateTimeOffset, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<DateTimeOffset, long>(
                        (DateTimeOffset v) => DateTimeOffsetToBinaryConverter.ToLong(v),
                        (long v) => DateTimeOffsetToBinaryConverter.ToDateTimeOffset(v))));
            date.SetSentinelFromProviderValue(0L);
            date.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("WeatherForecastEntityType.UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Date", "Bit.Besql.Demo.Client.Data") });

            var summary = runtimeEntityType.AddProperty(
                "Summary",
                typeof(string),
                propertyInfo: typeof(WeatherForecast).GetProperty("Summary", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WeatherForecast).GetField("<Summary>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            summary.SetGetter(
                (WeatherForecast entity) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Summary(entity),
                (WeatherForecast entity) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Summary(entity) == null,
                (WeatherForecast instance) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Summary(instance),
                (WeatherForecast instance) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Summary(instance) == null);
            summary.SetSetter(
                (WeatherForecast entity, string value) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Summary(entity) = value);
            summary.SetMaterializationSetter(
                (WeatherForecast entity, string value) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Summary(entity) = value);
            summary.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Summary((WeatherForecast)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Summary((WeatherForecast)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(summary, 2),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(summary),
                (ValueBuffer valueBuffer) => valueBuffer[2]);
            summary.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            summary.TypeMapping = SqliteStringTypeMapping.Default;
            summary.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("WeatherForecastEntityType.UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Summary", "Bit.Besql.Demo.Client.Data") });

            var temperatureC = runtimeEntityType.AddProperty(
                "TemperatureC",
                typeof(int),
                propertyInfo: typeof(WeatherForecast).GetProperty("TemperatureC", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WeatherForecast).GetField("<TemperatureC>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            temperatureC.SetGetter(
                (WeatherForecast entity) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_TemperatureC(entity),
                (WeatherForecast entity) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_TemperatureC(entity) == 0,
                (WeatherForecast instance) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_TemperatureC(instance),
                (WeatherForecast instance) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_TemperatureC(instance) == 0);
            temperatureC.SetSetter(
                (WeatherForecast entity, int value) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_TemperatureC(entity) = value);
            temperatureC.SetMaterializationSetter(
                (WeatherForecast entity, int value) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_TemperatureC(entity) = value);
            temperatureC.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_TemperatureC((WeatherForecast)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_TemperatureC((WeatherForecast)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(temperatureC, 3),
                (InternalEntityEntry entry) => entry.GetCurrentValue<int>(temperatureC),
                (ValueBuffer valueBuffer) => valueBuffer[3]);
            temperatureC.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            temperatureC.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));
            temperatureC.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("WeatherForecastEntityType.UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_TemperatureC", "Bit.Besql.Demo.Client.Data") });

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { temperatureC });

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id")!;
            var date = runtimeEntityType.FindProperty("Date")!;
            var summary = runtimeEntityType.FindProperty("Summary")!;
            var temperatureC = runtimeEntityType.FindProperty("TemperatureC")!;
            runtimeEntityType.SetOriginalValuesFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (WeatherForecast)source.Entity;
                    return (ISnapshot)new Snapshot<int, DateTimeOffset, string, int>(((ValueComparer<int>)id.GetValueComparer()).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<DateTimeOffset>)date.GetValueComparer()).Snapshot(source.GetCurrentValue<DateTimeOffset>(date)), source.GetCurrentValue<string>(summary) == null ? null : ((ValueComparer<string>)summary.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(summary)), ((ValueComparer<int>)temperatureC.GetValueComparer()).Snapshot(source.GetCurrentValue<int>(temperatureC)));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                () => (ISnapshot)new Snapshot<int>(((ValueComparer<int>)id.GetValueComparer()).Snapshot(default(int))));
            runtimeEntityType.SetTemporaryValuesFactory(
                (InternalEntityEntry source) => (ISnapshot)new Snapshot<int>(default(int)));
            runtimeEntityType.SetShadowValuesFactory(
                (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (WeatherForecast)source.Entity;
                    return (ISnapshot)new Snapshot<int>(((ValueComparer<int>)id.GetKeyValueComparer()).Snapshot(source.GetCurrentValue<int>(id)));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 4,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 4,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 1);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "WeatherForecasts");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Id>k__BackingField")]
        public static extern ref int UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Id(WeatherForecast @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Date>k__BackingField")]
        public static extern ref DateTimeOffset UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Date(WeatherForecast @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Summary>k__BackingField")]
        public static extern ref string UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_Summary(WeatherForecast @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<TemperatureC>k__BackingField")]
        public static extern ref int UnsafeAccessor_Bit_Besql_Demo_Client_Model_WeatherForecast_TemperatureC(WeatherForecast @this);
    }
}
