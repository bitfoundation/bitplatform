@page "/weather"

@using Bit.Besql.Demo.Client.Model
@using Microsoft.EntityFrameworkCore
@using Bit.Besql.Demo.Client.Data

@inject HttpClient HttpClient;
@inject IBitBesqlStorage BitBesqlStorage;
@inject IDbContextFactory<OfflineDbContext> DbContextFactory

<PageTitle>Bit Besql weather forecast sample</PageTitle>

<button class="btn btn-primary" @onclick="ReadDataSample">Read data sample</button>
<button class="btn btn-primary" @onclick="AddWeatherForecastSample">Add weather forecast</button>
<button class="btn btn-primary" @onclick="DeleteSomeForecastsSample">Delete some forecasts</button>
<button class="btn btn-primary" @onclick="PauseResumeSyncSample">Pause / resume sync</button>
<button class="btn btn-primary" @onclick="UsePrePopulatedDatabaseSample">Use pre populated database</button>

<h1>@forecastsCount</h1>

@code {

    private int? forecastsCount;

    private async Task ReadDataSample()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        forecastsCount = await dbContext.WeatherForecasts.CountAsync();
    }

    private async Task AddWeatherForecastSample()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        await dbContext.WeatherForecasts.AddAsync(new()
        {
            Date = new DateTimeOffset(2024, 1, 4, 10, 10, 10, TimeSpan.Zero),
            Summary = "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y zA B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y zA B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y zA B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y zA B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y zA B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y zA B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y zA B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y zA B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z ",
            TemperatureC = Random.Shared.Next(1, 30)
        });
        await dbContext.WeatherForecasts.AddAsync(new()
        {
            Date = new DateTimeOffset(2024, 1, 4, 10, 10, 10, TimeSpan.Zero),
            Summary = "Test",
            TemperatureC = Random.Shared.Next(1, 30)
        });
        await dbContext.SaveChangesAsync();

        await ReadDataSample();
    }

    private async Task DeleteSomeForecastsSample()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var deletedCount = await dbContext.WeatherForecasts
            .Where(w => w.TemperatureC % 2 == 0)
            .ExecuteDeleteAsync();
        deletedCount += await dbContext.WeatherForecasts
            .Where(w => w.TemperatureC % 3 == 0)
            .ExecuteDeleteAsync();

        await ReadDataSample();
    }

    private async Task PauseResumeSyncSample()
    {
        BitBesqlStorage.PauseAutomaticPersistent();

        try
        {
            await AddWeatherForecastSample();

            await Task.Delay(5_000);

            await AddWeatherForecastSample();
        }
        finally
        {
            await BitBesqlStorage.ResumeAutomaticPersistent();
        }

        await ReadDataSample();
    }

    private async Task UsePrePopulatedDatabaseSample()
    {
        // This functionality can also be implemented as an API that dynamically populates a SQLite database.
        // Important: Ensure the SQLite database is created with `PRAGMA synchronous = FULL` from the start.
        await using var prePopulatedDatabase = await HttpClient.GetStreamAsync("https://localhost:5050/Pre-Populated-Offline-Client.db");

        var fileName = "Offline-Client.db";
        await using (var fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write))
        {
            await prePopulatedDatabase.CopyToAsync(fileStream);
        }
        await BitBesqlStorage.Persist(fileName);

        await ReadDataSample();
    }
}
